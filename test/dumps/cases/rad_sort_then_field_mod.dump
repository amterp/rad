=====
Rad sort then field mods
=====
rad url:
    fields ID, Name
    sort
    ID:
        map n -> n * 2
=====
B: [ 0, 69] PS: [0,  0], PE: [5,  0] source_file
B: [ 0, 68] PS: [0,  0], PE: [4, 22]   rad_block
B: [ 0,  3] PS: [0,  0], PE: [0,  3]     rad_type: rad_keyword `rad`
B: [ 4,  7] PS: [0,  4], PE: [0,  7]     source: expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]       ternary_expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]         delegate: or_expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]           delegate: and_expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]             delegate: compare_expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]               delegate: add_expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]                 delegate: mult_expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]                   delegate: unary_expr
B: [ 4,  7] PS: [0,  4], PE: [0,  7]                     delegate: var_path
B: [ 4,  7] PS: [0,  4], PE: [0,  7]                       root: identifier `url`
B: [ 7,  8] PS: [0,  7], PE: [0,  8]     : `:`
B: [13, 28] PS: [1,  4], PE: [1, 19]     stmt: rad_field_stmt
B: [13, 19] PS: [1,  4], PE: [1, 10]       fields `fields`
B: [20, 22] PS: [1, 11], PE: [1, 13]       identifier: identifier `ID`
B: [22, 23] PS: [1, 13], PE: [1, 14]       , `,`
B: [24, 28] PS: [1, 15], PE: [1, 19]       identifier: identifier `Name`
B: [33, 37] PS: [2,  4], PE: [2,  8]     stmt: rad_sort_stmt
B: [33, 37] PS: [2,  4], PE: [2,  8]       sort `sort`
B: [42, 68] PS: [3,  4], PE: [4, 22]     stmt: rad_field_modifier_stmt
B: [42, 44] PS: [3,  4], PE: [3,  6]       identifier: identifier `ID`
B: [44, 45] PS: [3,  6], PE: [3,  7]       : `:`
B: [54, 68] PS: [4,  8], PE: [4, 22]       mod_stmt: rad_field_mod_map
B: [54, 57] PS: [4,  8], PE: [4, 11]         map `map`
B: [58, 68] PS: [4, 12], PE: [4, 22]         lambda: lambda
B: [58, 59] PS: [4, 12], PE: [4, 13]           identifier: identifier `n`
B: [60, 62] PS: [4, 14], PE: [4, 16]           -> `->`
B: [63, 68] PS: [4, 17], PE: [4, 22]           expr: expr
B: [63, 68] PS: [4, 17], PE: [4, 22]             ternary_expr
B: [63, 68] PS: [4, 17], PE: [4, 22]               delegate: or_expr
B: [63, 68] PS: [4, 17], PE: [4, 22]                 delegate: and_expr
B: [63, 68] PS: [4, 17], PE: [4, 22]                   delegate: compare_expr
B: [63, 68] PS: [4, 17], PE: [4, 22]                     delegate: add_expr
B: [63, 68] PS: [4, 17], PE: [4, 22]                       delegate: mult_expr
B: [63, 64] PS: [4, 17], PE: [4, 18]                         left: mult_expr
B: [63, 64] PS: [4, 17], PE: [4, 18]                           delegate: unary_expr
B: [63, 64] PS: [4, 17], PE: [4, 18]                             delegate: var_path
B: [63, 64] PS: [4, 17], PE: [4, 18]                               root: identifier `n`
B: [65, 66] PS: [4, 19], PE: [4, 20]                         op: * `*`
B: [67, 68] PS: [4, 21], PE: [4, 22]                         right: unary_expr
B: [67, 68] PS: [4, 21], PE: [4, 22]                           delegate: indexed_expr
B: [67, 68] PS: [4, 21], PE: [4, 22]                             root: primary_expr
B: [67, 68] PS: [4, 21], PE: [4, 22]                               literal
B: [67, 68] PS: [4, 21], PE: [4, 22]                                 int `2`
