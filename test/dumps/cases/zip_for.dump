=====
For loop zip
=====
for i, a, b, c, d in zip(al, bl, cl, dl):
    print(i, a, b, c, d)
=====
B: [ 0, 67] PS: [0,  0], PE: [2,  0] source_file
B: [ 0, 66] PS: [0,  0], PE: [1, 24]   for_loop
B: [ 0,  3] PS: [0,  0], PE: [0,  3]     for `for`
B: [ 4, 17] PS: [0,  4], PE: [0, 17]     lefts: for_lefts
B: [ 4,  5] PS: [0,  4], PE: [0,  5]       left: identifier `i`
B: [ 5,  6] PS: [0,  5], PE: [0,  6]       , `,`
B: [ 7,  8] PS: [0,  7], PE: [0,  8]       left: identifier `a`
B: [ 8,  9] PS: [0,  8], PE: [0,  9]       , `,`
B: [10, 11] PS: [0, 10], PE: [0, 11]       left: identifier `b`
B: [11, 12] PS: [0, 11], PE: [0, 12]       , `,`
B: [13, 14] PS: [0, 13], PE: [0, 14]       left: identifier `c`
B: [14, 15] PS: [0, 14], PE: [0, 15]       , `,`
B: [16, 17] PS: [0, 16], PE: [0, 17]       left: identifier `d`
B: [18, 20] PS: [0, 18], PE: [0, 20]     in `in`
B: [21, 40] PS: [0, 21], PE: [0, 40]     right: expr
B: [21, 40] PS: [0, 21], PE: [0, 40]       base: call
B: [21, 24] PS: [0, 21], PE: [0, 24]         func: identifier `zip`
B: [24, 25] PS: [0, 24], PE: [0, 25]         ( `(`
B: [25, 27] PS: [0, 25], PE: [0, 27]         arg: expr
B: [25, 27] PS: [0, 25], PE: [0, 27]           base: var_path
B: [25, 27] PS: [0, 25], PE: [0, 27]             root: identifier `al`
B: [27, 28] PS: [0, 27], PE: [0, 28]         , `,`
B: [29, 31] PS: [0, 29], PE: [0, 31]         arg: expr
B: [29, 31] PS: [0, 29], PE: [0, 31]           base: var_path
B: [29, 31] PS: [0, 29], PE: [0, 31]             root: identifier `bl`
B: [31, 32] PS: [0, 31], PE: [0, 32]         , `,`
B: [33, 35] PS: [0, 33], PE: [0, 35]         arg: expr
B: [33, 35] PS: [0, 33], PE: [0, 35]           base: var_path
B: [33, 35] PS: [0, 33], PE: [0, 35]             root: identifier `cl`
B: [35, 36] PS: [0, 35], PE: [0, 36]         , `,`
B: [37, 39] PS: [0, 37], PE: [0, 39]         arg: expr
B: [37, 39] PS: [0, 37], PE: [0, 39]           base: var_path
B: [37, 39] PS: [0, 37], PE: [0, 39]             root: identifier `dl`
B: [39, 40] PS: [0, 39], PE: [0, 40]         ) `)`
B: [40, 41] PS: [0, 40], PE: [0, 41]     : `:`
B: [46, 66] PS: [1,  4], PE: [1, 24]     stmt: expr
B: [46, 66] PS: [1,  4], PE: [1, 24]       base: call
B: [46, 51] PS: [1,  4], PE: [1,  9]         func: identifier `print`
B: [51, 52] PS: [1,  9], PE: [1, 10]         ( `(`
B: [52, 53] PS: [1, 10], PE: [1, 11]         arg: expr
B: [52, 53] PS: [1, 10], PE: [1, 11]           base: var_path
B: [52, 53] PS: [1, 10], PE: [1, 11]             root: identifier `i`
B: [53, 54] PS: [1, 11], PE: [1, 12]         , `,`
B: [55, 56] PS: [1, 13], PE: [1, 14]         arg: expr
B: [55, 56] PS: [1, 13], PE: [1, 14]           base: var_path
B: [55, 56] PS: [1, 13], PE: [1, 14]             root: identifier `a`
B: [56, 57] PS: [1, 14], PE: [1, 15]         , `,`
B: [58, 59] PS: [1, 16], PE: [1, 17]         arg: expr
B: [58, 59] PS: [1, 16], PE: [1, 17]           base: var_path
B: [58, 59] PS: [1, 16], PE: [1, 17]             root: identifier `b`
B: [59, 60] PS: [1, 17], PE: [1, 18]         , `,`
B: [61, 62] PS: [1, 19], PE: [1, 20]         arg: expr
B: [61, 62] PS: [1, 19], PE: [1, 20]           base: var_path
B: [61, 62] PS: [1, 19], PE: [1, 20]             root: identifier `c`
B: [62, 63] PS: [1, 20], PE: [1, 21]         , `,`
B: [64, 65] PS: [1, 22], PE: [1, 23]         arg: expr
B: [64, 65] PS: [1, 22], PE: [1, 23]           base: var_path
B: [64, 65] PS: [1, 22], PE: [1, 23]             root: identifier `d`
B: [65, 66] PS: [1, 23], PE: [1, 24]         ) `)`
