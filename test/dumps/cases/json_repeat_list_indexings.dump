=====
Json paths repeat list indexings
=====
Nums = json[][][1].foo[][1][].bar
=====
B: [ 0, 34] PS: [0,  0], PE: [1,  0] source_file
B: [ 0, 33] PS: [0,  0], PE: [0, 33]   assign
B: [ 0,  4] PS: [0,  0], PE: [0,  4]     left: var_path
B: [ 0,  4] PS: [0,  0], PE: [0,  4]       root: identifier `Nums`
B: [ 5,  6] PS: [0,  5], PE: [0,  6]     = `=`
B: [ 7, 33] PS: [0,  7], PE: [0, 33]     right: json_path
B: [ 7, 18] PS: [0,  7], PE: [0, 18]       segment: json_opener
B: [ 7, 11] PS: [0,  7], PE: [0, 11]         key: json `json`
B: [11, 13] PS: [0, 11], PE: [0, 13]         index: json_path_indexer
B: [11, 12] PS: [0, 11], PE: [0, 12]           [ `[`
B: [12, 13] PS: [0, 12], PE: [0, 13]           ] `]`
B: [13, 15] PS: [0, 13], PE: [0, 15]         index: json_path_indexer
B: [13, 14] PS: [0, 13], PE: [0, 14]           [ `[`
B: [14, 15] PS: [0, 14], PE: [0, 15]           ] `]`
B: [15, 18] PS: [0, 15], PE: [0, 18]         index: json_path_indexer
B: [15, 16] PS: [0, 15], PE: [0, 16]           [ `[`
B: [16, 17] PS: [0, 16], PE: [0, 17]           expr: expr
B: [16, 17] PS: [0, 16], PE: [0, 17]             ternary_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]               delegate: or_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                 delegate: and_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                   delegate: compare_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                     delegate: add_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                       delegate: mult_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                         delegate: unary_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                           delegate: indexed_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                             root: primary_expr
B: [16, 17] PS: [0, 16], PE: [0, 17]                               literal
B: [16, 17] PS: [0, 16], PE: [0, 17]                                 int `1`
B: [17, 18] PS: [0, 17], PE: [0, 18]           ] `]`
B: [18, 19] PS: [0, 18], PE: [0, 19]       . `.`
B: [19, 29] PS: [0, 19], PE: [0, 29]       segment: json_segment
B: [19, 22] PS: [0, 19], PE: [0, 22]         key: identifier `foo`
B: [22, 24] PS: [0, 22], PE: [0, 24]         index: json_path_indexer
B: [22, 23] PS: [0, 22], PE: [0, 23]           [ `[`
B: [23, 24] PS: [0, 23], PE: [0, 24]           ] `]`
B: [24, 27] PS: [0, 24], PE: [0, 27]         index: json_path_indexer
B: [24, 25] PS: [0, 24], PE: [0, 25]           [ `[`
B: [25, 26] PS: [0, 25], PE: [0, 26]           expr: expr
B: [25, 26] PS: [0, 25], PE: [0, 26]             ternary_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]               delegate: or_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                 delegate: and_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                   delegate: compare_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                     delegate: add_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                       delegate: mult_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                         delegate: unary_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                           delegate: indexed_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                             root: primary_expr
B: [25, 26] PS: [0, 25], PE: [0, 26]                               literal
B: [25, 26] PS: [0, 25], PE: [0, 26]                                 int `1`
B: [26, 27] PS: [0, 26], PE: [0, 27]           ] `]`
B: [27, 29] PS: [0, 27], PE: [0, 29]         index: json_path_indexer
B: [27, 28] PS: [0, 27], PE: [0, 28]           [ `[`
B: [28, 29] PS: [0, 28], PE: [0, 29]           ] `]`
B: [29, 30] PS: [0, 29], PE: [0, 30]       . `.`
B: [30, 33] PS: [0, 30], PE: [0, 33]       segment: json_segment
B: [30, 33] PS: [0, 30], PE: [0, 33]         key: identifier `bar`
