=====
Str interpolation formatting
=====
a = "{1 + 1:3}"
b = "{1 + 1:4.5}"
c = "{1 + 1:>4.5}"
d = "{1 + 1:<4.5}"
=====
B: [ 0, 72] PS: [0,  0], PE: [4,  0] source_file
B: [ 0, 15] PS: [0,  0], PE: [0, 15]   assign
B: [ 0,  1] PS: [0,  0], PE: [0,  1]     left: var_path
B: [ 0,  1] PS: [0,  0], PE: [0,  1]       root: identifier `a`
B: [ 2,  3] PS: [0,  2], PE: [0,  3]     = `=`
B: [ 4, 15] PS: [0,  4], PE: [0, 15]     right: expr
B: [ 4, 15] PS: [0,  4], PE: [0, 15]       primary_expr
B: [ 4, 15] PS: [0,  4], PE: [0, 15]         literal
B: [ 4, 15] PS: [0,  4], PE: [0, 15]           string
B: [ 4,  5] PS: [0,  4], PE: [0,  5]             start: string_start `"`
B: [ 5, 14] PS: [0,  5], PE: [0, 14]             contents: string_contents
B: [ 5, 14] PS: [0,  5], PE: [0, 14]               interpolation: interpolation
B: [ 5,  6] PS: [0,  5], PE: [0,  6]                 { `{`
B: [ 6, 11] PS: [0,  6], PE: [0, 11]                 expr: expr
B: [ 6, 11] PS: [0,  6], PE: [0, 11]                   primary_expr
B: [ 6, 11] PS: [0,  6], PE: [0, 11]                     binary_op
B: [ 6,  7] PS: [0,  6], PE: [0,  7]                       left: primary_expr
B: [ 6,  7] PS: [0,  6], PE: [0,  7]                         literal
B: [ 6,  7] PS: [0,  6], PE: [0,  7]                           int `1`
B: [ 8,  9] PS: [0,  8], PE: [0,  9]                       op: + `+`
B: [10, 11] PS: [0, 10], PE: [0, 11]                       right: primary_expr
B: [10, 11] PS: [0, 10], PE: [0, 11]                         literal
B: [10, 11] PS: [0, 10], PE: [0, 11]                           int `1`
B: [11, 13] PS: [0, 11], PE: [0, 13]                 format: format_specifier
B: [11, 12] PS: [0, 11], PE: [0, 12]                   : `:`
B: [12, 13] PS: [0, 12], PE: [0, 13]                   padding: int `3`
B: [13, 14] PS: [0, 13], PE: [0, 14]                 } `}`
B: [14, 15] PS: [0, 14], PE: [0, 15]             end: string_end `"`
B: [16, 33] PS: [1,  0], PE: [1, 17]   assign
B: [16, 17] PS: [1,  0], PE: [1,  1]     left: var_path
B: [16, 17] PS: [1,  0], PE: [1,  1]       root: identifier `b`
B: [18, 19] PS: [1,  2], PE: [1,  3]     = `=`
B: [20, 33] PS: [1,  4], PE: [1, 17]     right: expr
B: [20, 33] PS: [1,  4], PE: [1, 17]       primary_expr
B: [20, 33] PS: [1,  4], PE: [1, 17]         literal
B: [20, 33] PS: [1,  4], PE: [1, 17]           string
B: [20, 21] PS: [1,  4], PE: [1,  5]             start: string_start `"`
B: [21, 32] PS: [1,  5], PE: [1, 16]             contents: string_contents
B: [21, 32] PS: [1,  5], PE: [1, 16]               interpolation: interpolation
B: [21, 22] PS: [1,  5], PE: [1,  6]                 { `{`
B: [22, 27] PS: [1,  6], PE: [1, 11]                 expr: expr
B: [22, 27] PS: [1,  6], PE: [1, 11]                   primary_expr
B: [22, 27] PS: [1,  6], PE: [1, 11]                     binary_op
B: [22, 23] PS: [1,  6], PE: [1,  7]                       left: primary_expr
B: [22, 23] PS: [1,  6], PE: [1,  7]                         literal
B: [22, 23] PS: [1,  6], PE: [1,  7]                           int `1`
B: [24, 25] PS: [1,  8], PE: [1,  9]                       op: + `+`
B: [26, 27] PS: [1, 10], PE: [1, 11]                       right: primary_expr
B: [26, 27] PS: [1, 10], PE: [1, 11]                         literal
B: [26, 27] PS: [1, 10], PE: [1, 11]                           int `1`
B: [27, 31] PS: [1, 11], PE: [1, 15]                 format: format_specifier
B: [27, 28] PS: [1, 11], PE: [1, 12]                   : `:`
B: [28, 29] PS: [1, 12], PE: [1, 13]                   padding: int `4`
B: [29, 30] PS: [1, 13], PE: [1, 14]                   . `.`
B: [30, 31] PS: [1, 14], PE: [1, 15]                   precision: int `5`
B: [31, 32] PS: [1, 15], PE: [1, 16]                 } `}`
B: [32, 33] PS: [1, 16], PE: [1, 17]             end: string_end `"`
B: [34, 52] PS: [2,  0], PE: [2, 18]   assign
B: [34, 35] PS: [2,  0], PE: [2,  1]     left: var_path
B: [34, 35] PS: [2,  0], PE: [2,  1]       root: identifier `c`
B: [36, 37] PS: [2,  2], PE: [2,  3]     = `=`
B: [38, 52] PS: [2,  4], PE: [2, 18]     right: expr
B: [38, 52] PS: [2,  4], PE: [2, 18]       primary_expr
B: [38, 52] PS: [2,  4], PE: [2, 18]         literal
B: [38, 52] PS: [2,  4], PE: [2, 18]           string
B: [38, 39] PS: [2,  4], PE: [2,  5]             start: string_start `"`
B: [39, 51] PS: [2,  5], PE: [2, 17]             contents: string_contents
B: [39, 51] PS: [2,  5], PE: [2, 17]               interpolation: interpolation
B: [39, 40] PS: [2,  5], PE: [2,  6]                 { `{`
B: [40, 45] PS: [2,  6], PE: [2, 11]                 expr: expr
B: [40, 45] PS: [2,  6], PE: [2, 11]                   primary_expr
B: [40, 45] PS: [2,  6], PE: [2, 11]                     binary_op
B: [40, 41] PS: [2,  6], PE: [2,  7]                       left: primary_expr
B: [40, 41] PS: [2,  6], PE: [2,  7]                         literal
B: [40, 41] PS: [2,  6], PE: [2,  7]                           int `1`
B: [42, 43] PS: [2,  8], PE: [2,  9]                       op: + `+`
B: [44, 45] PS: [2, 10], PE: [2, 11]                       right: primary_expr
B: [44, 45] PS: [2, 10], PE: [2, 11]                         literal
B: [44, 45] PS: [2, 10], PE: [2, 11]                           int `1`
B: [45, 50] PS: [2, 11], PE: [2, 16]                 format: format_specifier
B: [45, 46] PS: [2, 11], PE: [2, 12]                   : `:`
B: [46, 47] PS: [2, 12], PE: [2, 13]                   alignment: > `>`
B: [47, 48] PS: [2, 13], PE: [2, 14]                   padding: int `4`
B: [48, 49] PS: [2, 14], PE: [2, 15]                   . `.`
B: [49, 50] PS: [2, 15], PE: [2, 16]                   precision: int `5`
B: [50, 51] PS: [2, 16], PE: [2, 17]                 } `}`
B: [51, 52] PS: [2, 17], PE: [2, 18]             end: string_end `"`
B: [53, 71] PS: [3,  0], PE: [3, 18]   assign
B: [53, 54] PS: [3,  0], PE: [3,  1]     left: var_path
B: [53, 54] PS: [3,  0], PE: [3,  1]       root: identifier `d`
B: [55, 56] PS: [3,  2], PE: [3,  3]     = `=`
B: [57, 71] PS: [3,  4], PE: [3, 18]     right: expr
B: [57, 71] PS: [3,  4], PE: [3, 18]       primary_expr
B: [57, 71] PS: [3,  4], PE: [3, 18]         literal
B: [57, 71] PS: [3,  4], PE: [3, 18]           string
B: [57, 58] PS: [3,  4], PE: [3,  5]             start: string_start `"`
B: [58, 70] PS: [3,  5], PE: [3, 17]             contents: string_contents
B: [58, 70] PS: [3,  5], PE: [3, 17]               interpolation: interpolation
B: [58, 59] PS: [3,  5], PE: [3,  6]                 { `{`
B: [59, 64] PS: [3,  6], PE: [3, 11]                 expr: expr
B: [59, 64] PS: [3,  6], PE: [3, 11]                   primary_expr
B: [59, 64] PS: [3,  6], PE: [3, 11]                     binary_op
B: [59, 60] PS: [3,  6], PE: [3,  7]                       left: primary_expr
B: [59, 60] PS: [3,  6], PE: [3,  7]                         literal
B: [59, 60] PS: [3,  6], PE: [3,  7]                           int `1`
B: [61, 62] PS: [3,  8], PE: [3,  9]                       op: + `+`
B: [63, 64] PS: [3, 10], PE: [3, 11]                       right: primary_expr
B: [63, 64] PS: [3, 10], PE: [3, 11]                         literal
B: [63, 64] PS: [3, 10], PE: [3, 11]                           int `1`
B: [64, 69] PS: [3, 11], PE: [3, 16]                 format: format_specifier
B: [64, 65] PS: [3, 11], PE: [3, 12]                   : `:`
B: [65, 66] PS: [3, 12], PE: [3, 13]                   alignment: < `<`
B: [66, 67] PS: [3, 13], PE: [3, 14]                   padding: int `4`
B: [67, 68] PS: [3, 14], PE: [3, 15]                   . `.`
B: [68, 69] PS: [3, 15], PE: [3, 16]                   precision: int `5`
B: [69, 70] PS: [3, 16], PE: [3, 17]                 } `}`
B: [70, 71] PS: [3, 17], PE: [3, 18]             end: string_end `"`
