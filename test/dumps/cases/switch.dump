=====
Switch expression basic
=====
title, url = switch endpoint:
    case "cars", "automobiles": "Cars", "{base}/automobiles"
    case "books": "Books", "{base}/reading?type=books"
a = 2
=====
B: [  0, 152] PS: [0,  0], PE: [4,  0] source_file
B: [  0, 145] PS: [0,  0], PE: [2, 54]   switch_stmt
B: [  0,   5] PS: [0,  0], PE: [0,  5]     left: var_path
B: [  0,   5] PS: [0,  0], PE: [0,  5]       root: identifier `title`
B: [  5,   6] PS: [0,  5], PE: [0,  6]     , `,`
B: [  7,  10] PS: [0,  7], PE: [0, 10]     left: var_path
B: [  7,  10] PS: [0,  7], PE: [0, 10]       root: identifier `url`
B: [ 11,  12] PS: [0, 11], PE: [0, 12]     = `=`
B: [ 13,  19] PS: [0, 13], PE: [0, 19]     switch `switch`
B: [ 20,  28] PS: [0, 20], PE: [0, 28]     discriminant: expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]       ternary_expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]         delegate: or_expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]           delegate: and_expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]             delegate: compare_expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]               delegate: add_expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]                 delegate: mult_expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]                   delegate: unary_expr
B: [ 20,  28] PS: [0, 20], PE: [0, 28]                     delegate: var_path
B: [ 20,  28] PS: [0, 20], PE: [0, 28]                       root: identifier `endpoint`
B: [ 28,  29] PS: [0, 28], PE: [0, 29]     : `:`
B: [ 34,  90] PS: [1,  4], PE: [1, 60]     case: switch_case
B: [ 34,  38] PS: [1,  4], PE: [1,  8]       case `case`
B: [ 39,  45] PS: [1,  9], PE: [1, 15]       case_key: expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]         ternary_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]           delegate: or_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]             delegate: and_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]               delegate: compare_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]                 delegate: add_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]                   delegate: mult_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]                     delegate: unary_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]                       delegate: indexed_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]                         root: primary_expr
B: [ 39,  45] PS: [1,  9], PE: [1, 15]                           literal
B: [ 39,  45] PS: [1,  9], PE: [1, 15]                             string
B: [ 39,  40] PS: [1,  9], PE: [1, 10]                               start: string_start `"`
B: [ 40,  44] PS: [1, 10], PE: [1, 14]                               contents: string_contents
B: [ 40,  44] PS: [1, 10], PE: [1, 14]                                 content: string_content `cars`
B: [ 44,  45] PS: [1, 14], PE: [1, 15]                               end: string_end `"`
B: [ 45,  46] PS: [1, 15], PE: [1, 16]       , `,`
B: [ 47,  60] PS: [1, 17], PE: [1, 30]       case_key: expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]         ternary_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]           delegate: or_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]             delegate: and_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]               delegate: compare_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]                 delegate: add_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]                   delegate: mult_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]                     delegate: unary_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]                       delegate: indexed_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]                         root: primary_expr
B: [ 47,  60] PS: [1, 17], PE: [1, 30]                           literal
B: [ 47,  60] PS: [1, 17], PE: [1, 30]                             string
B: [ 47,  48] PS: [1, 17], PE: [1, 18]                               start: string_start `"`
B: [ 48,  59] PS: [1, 18], PE: [1, 29]                               contents: string_contents
B: [ 48,  59] PS: [1, 18], PE: [1, 29]                                 content: string_content `automobiles`
B: [ 59,  60] PS: [1, 29], PE: [1, 30]                               end: string_end `"`
B: [ 60,  61] PS: [1, 30], PE: [1, 31]       : `:`
B: [ 62,  68] PS: [1, 32], PE: [1, 38]       case_value: expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]         ternary_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]           delegate: or_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]             delegate: and_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]               delegate: compare_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]                 delegate: add_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]                   delegate: mult_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]                     delegate: unary_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]                       delegate: indexed_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]                         root: primary_expr
B: [ 62,  68] PS: [1, 32], PE: [1, 38]                           literal
B: [ 62,  68] PS: [1, 32], PE: [1, 38]                             string
B: [ 62,  63] PS: [1, 32], PE: [1, 33]                               start: string_start `"`
B: [ 63,  67] PS: [1, 33], PE: [1, 37]                               contents: string_contents
B: [ 63,  67] PS: [1, 33], PE: [1, 37]                                 content: string_content `Cars`
B: [ 67,  68] PS: [1, 37], PE: [1, 38]                               end: string_end `"`
B: [ 68,  69] PS: [1, 38], PE: [1, 39]       , `,`
B: [ 70,  90] PS: [1, 40], PE: [1, 60]       case_value: expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]         ternary_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]           delegate: or_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]             delegate: and_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]               delegate: compare_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]                 delegate: add_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]                   delegate: mult_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]                     delegate: unary_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]                       delegate: indexed_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]                         root: primary_expr
B: [ 70,  90] PS: [1, 40], PE: [1, 60]                           literal
B: [ 70,  90] PS: [1, 40], PE: [1, 60]                             string
B: [ 70,  71] PS: [1, 40], PE: [1, 41]                               start: string_start `"`
B: [ 71,  89] PS: [1, 41], PE: [1, 59]                               contents: string_contents
B: [ 71,  77] PS: [1, 41], PE: [1, 47]                                 interpolation: interpolation
B: [ 71,  72] PS: [1, 41], PE: [1, 42]                                   { `{`
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                   expr: expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                     ternary_expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                       delegate: or_expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                         delegate: and_expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                           delegate: compare_expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                             delegate: add_expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                               delegate: mult_expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                                 delegate: unary_expr
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                                   delegate: var_path
B: [ 72,  76] PS: [1, 42], PE: [1, 46]                                                     root: identifier `base`
B: [ 76,  77] PS: [1, 46], PE: [1, 47]                                   } `}`
B: [ 77,  89] PS: [1, 47], PE: [1, 59]                                 content: string_content `/automobiles`
B: [ 89,  90] PS: [1, 59], PE: [1, 60]                               end: string_end `"`
B: [ 95, 145] PS: [2,  4], PE: [2, 54]     case: switch_case
B: [ 95,  99] PS: [2,  4], PE: [2,  8]       case `case`
B: [100, 107] PS: [2,  9], PE: [2, 16]       case_key: expr
B: [100, 107] PS: [2,  9], PE: [2, 16]         ternary_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]           delegate: or_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]             delegate: and_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]               delegate: compare_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]                 delegate: add_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]                   delegate: mult_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]                     delegate: unary_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]                       delegate: indexed_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]                         root: primary_expr
B: [100, 107] PS: [2,  9], PE: [2, 16]                           literal
B: [100, 107] PS: [2,  9], PE: [2, 16]                             string
B: [100, 101] PS: [2,  9], PE: [2, 10]                               start: string_start `"`
B: [101, 106] PS: [2, 10], PE: [2, 15]                               contents: string_contents
B: [101, 106] PS: [2, 10], PE: [2, 15]                                 content: string_content `books`
B: [106, 107] PS: [2, 15], PE: [2, 16]                               end: string_end `"`
B: [107, 108] PS: [2, 16], PE: [2, 17]       : `:`
B: [109, 116] PS: [2, 18], PE: [2, 25]       case_value: expr
B: [109, 116] PS: [2, 18], PE: [2, 25]         ternary_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]           delegate: or_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]             delegate: and_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]               delegate: compare_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]                 delegate: add_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]                   delegate: mult_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]                     delegate: unary_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]                       delegate: indexed_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]                         root: primary_expr
B: [109, 116] PS: [2, 18], PE: [2, 25]                           literal
B: [109, 116] PS: [2, 18], PE: [2, 25]                             string
B: [109, 110] PS: [2, 18], PE: [2, 19]                               start: string_start `"`
B: [110, 115] PS: [2, 19], PE: [2, 24]                               contents: string_contents
B: [110, 115] PS: [2, 19], PE: [2, 24]                                 content: string_content `Books`
B: [115, 116] PS: [2, 24], PE: [2, 25]                               end: string_end `"`
B: [116, 117] PS: [2, 25], PE: [2, 26]       , `,`
B: [118, 145] PS: [2, 27], PE: [2, 54]       case_value: expr
B: [118, 145] PS: [2, 27], PE: [2, 54]         ternary_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]           delegate: or_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]             delegate: and_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]               delegate: compare_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]                 delegate: add_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]                   delegate: mult_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]                     delegate: unary_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]                       delegate: indexed_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]                         root: primary_expr
B: [118, 145] PS: [2, 27], PE: [2, 54]                           literal
B: [118, 145] PS: [2, 27], PE: [2, 54]                             string
B: [118, 119] PS: [2, 27], PE: [2, 28]                               start: string_start `"`
B: [119, 144] PS: [2, 28], PE: [2, 53]                               contents: string_contents
B: [119, 125] PS: [2, 28], PE: [2, 34]                                 interpolation: interpolation
B: [119, 120] PS: [2, 28], PE: [2, 29]                                   { `{`
B: [120, 124] PS: [2, 29], PE: [2, 33]                                   expr: expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                     ternary_expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                       delegate: or_expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                         delegate: and_expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                           delegate: compare_expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                             delegate: add_expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                               delegate: mult_expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                                 delegate: unary_expr
B: [120, 124] PS: [2, 29], PE: [2, 33]                                                   delegate: var_path
B: [120, 124] PS: [2, 29], PE: [2, 33]                                                     root: identifier `base`
B: [124, 125] PS: [2, 33], PE: [2, 34]                                   } `}`
B: [125, 144] PS: [2, 34], PE: [2, 53]                                 content: string_content `/reading?type=books`
B: [144, 145] PS: [2, 53], PE: [2, 54]                               end: string_end `"`
B: [146, 151] PS: [3,  0], PE: [3,  5]   assign
B: [146, 147] PS: [3,  0], PE: [3,  1]     left: var_path
B: [146, 147] PS: [3,  0], PE: [3,  1]       root: identifier `a`
B: [148, 149] PS: [3,  2], PE: [3,  3]     = `=`
B: [150, 151] PS: [3,  4], PE: [3,  5]     right: expr
B: [150, 151] PS: [3,  4], PE: [3,  5]       ternary_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]         delegate: or_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]           delegate: and_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]             delegate: compare_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]               delegate: add_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]                 delegate: mult_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]                   delegate: unary_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]                     delegate: indexed_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]                       root: primary_expr
B: [150, 151] PS: [3,  4], PE: [3,  5]                         literal
B: [150, 151] PS: [3,  4], PE: [3,  5]                           int `2`
