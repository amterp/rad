=====
Assignment
=====
a += 1
a -= 2
a *= 3
a /= 4
a %= 5
=====
B: [ 0, 35] PS: [0, 0], PE: [5, 0] source_file
B: [ 0,  6] PS: [0, 0], PE: [0, 6]   compound_assign
B: [ 0,  1] PS: [0, 0], PE: [0, 1]     left: var_path
B: [ 0,  1] PS: [0, 0], PE: [0, 1]       root: identifier `a`
B: [ 2,  4] PS: [0, 2], PE: [0, 4]     op: += `+=`
B: [ 5,  6] PS: [0, 5], PE: [0, 6]     right: expr
B: [ 5,  6] PS: [0, 5], PE: [0, 6]       primary_expr
B: [ 5,  6] PS: [0, 5], PE: [0, 6]         literal
B: [ 5,  6] PS: [0, 5], PE: [0, 6]           int `1`
B: [ 7, 13] PS: [1, 0], PE: [1, 6]   compound_assign
B: [ 7,  8] PS: [1, 0], PE: [1, 1]     left: var_path
B: [ 7,  8] PS: [1, 0], PE: [1, 1]       root: identifier `a`
B: [ 9, 11] PS: [1, 2], PE: [1, 4]     op: -= `-=`
B: [12, 13] PS: [1, 5], PE: [1, 6]     right: expr
B: [12, 13] PS: [1, 5], PE: [1, 6]       primary_expr
B: [12, 13] PS: [1, 5], PE: [1, 6]         literal
B: [12, 13] PS: [1, 5], PE: [1, 6]           int `2`
B: [14, 20] PS: [2, 0], PE: [2, 6]   compound_assign
B: [14, 15] PS: [2, 0], PE: [2, 1]     left: var_path
B: [14, 15] PS: [2, 0], PE: [2, 1]       root: identifier `a`
B: [16, 18] PS: [2, 2], PE: [2, 4]     op: *= `*=`
B: [19, 20] PS: [2, 5], PE: [2, 6]     right: expr
B: [19, 20] PS: [2, 5], PE: [2, 6]       primary_expr
B: [19, 20] PS: [2, 5], PE: [2, 6]         literal
B: [19, 20] PS: [2, 5], PE: [2, 6]           int `3`
B: [21, 27] PS: [3, 0], PE: [3, 6]   compound_assign
B: [21, 22] PS: [3, 0], PE: [3, 1]     left: var_path
B: [21, 22] PS: [3, 0], PE: [3, 1]       root: identifier `a`
B: [23, 25] PS: [3, 2], PE: [3, 4]     op: /= `/=`
B: [26, 27] PS: [3, 5], PE: [3, 6]     right: expr
B: [26, 27] PS: [3, 5], PE: [3, 6]       primary_expr
B: [26, 27] PS: [3, 5], PE: [3, 6]         literal
B: [26, 27] PS: [3, 5], PE: [3, 6]           int `4`
B: [28, 34] PS: [4, 0], PE: [4, 6]   compound_assign
B: [28, 29] PS: [4, 0], PE: [4, 1]     left: var_path
B: [28, 29] PS: [4, 0], PE: [4, 1]       root: identifier `a`
B: [30, 32] PS: [4, 2], PE: [4, 4]     op: %= `%=`
B: [33, 34] PS: [4, 5], PE: [4, 6]     right: expr
B: [33, 34] PS: [4, 5], PE: [4, 6]       primary_expr
B: [33, 34] PS: [4, 5], PE: [4, 6]         literal
B: [33, 34] PS: [4, 5], PE: [4, 6]           int `5`
