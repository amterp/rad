=====
Complete
=====
#!/usr/bin/env rad
---
this is a file
header

whoa! hello
---
args:
    name string
    age int = 30 # An age.
    employed bool
    foo string[] = ["blah", "bloop"]
    bar "BAR" b int[] = [4, 5]

    name enum ["alice", "bob"]
    name regex "[A-Z][a-z]*"

a = 2
a = "hello"
a = 3.14
a = true
a = [1, 2, 3]
a = {"x": 1, y: 2}

a = 3 + 5 * 3 - 1 / 0.01 % 2
a += 2
a -= 1
a *= 5
a /= 2
a %= 2

a = `hello {upper("alice")}`
print(a)

f1 = json[].id
f2 = json.hello[].blah.*.woop

rad url:
    fields f1, f2
    sort f1 desc, f2
    sort

    if a > b:
        sort f2, f1

    f1:
        map fn(a) a * 2

    f1, f2:
        color "red" ".*"

if bah > 5:
    hello = bloop

    if blah == 2:
        yoink += 2
    else if blah == 3:
        boom = "haha"

request url:
    fields f1

display:
    fields f2, f1, f3

area = [width[i] * height[i] for i in range(width)]

numbers = [1, 2, 3]
print(join(numbers, "... "))
print(join(numbers, "... ", "Okay I'll count. "))
print(join(numbers, "... ", "Okay I'll count. ", "!"))

a = nums[:]
a = nums[1:]
a = nums[1:2]
a = nums[:2]

my_headers = {
    "Authorization": "Bearer {token}",
}
response = http_post(url, body, headers=my_headers)

text = """
This is an
example of text
that "may contain quotes"!
"""
print(text)

text = r"Hello\n{name}"
text = r'Hello\n{name}'
text = r`Hello\n{name}`

url, name = pick_from_resource("./resources/websites.json", website)
print("url: {url}, name: {name}")

$!`ls`

cmd = `curl {url}`
$cmd
fail:
    print("Oh no, curl failed!")

$cmd
recover:
    print("Oh no, curl failed!")

unsafe $`ls`

code = $!cmd

code, stdout = $!cmd

code, stdout, stderr = $!cmd

_, _, stderr = $!cmd

quiet $!`touch {filename}.txt`

unsafe quiet $`touch {filename}.txt`
quiet unsafe $`touch {filename}.txt`

defer:
    $!`mv notes-tmp.txt notes.txt`
    print("Moved back!")

$!`sed -i '' "s/Version = .*/Version = {version}/" {path}`
errdefer:
    print("Undoing bump...")
    $!`git checkout -- {path}`

if false:  // failure simulation point 1
    print("Oh no! BAD!")
    exit(1)

$!`git add {path}`
errdefer:
    print("Resetting {path}...")
    _, _ = $!`git reset {path}`

if false:  // failure simulation point 2
    print("Bah! BAD!")
    exit(1)

$!`git commit -m "Bump version to {version}"`
=====
B: [   0, 2270] PS: [  0,  0] PE: [145,  0] source_file
B: [   0,   18] PS: [  0,  0] PE: [  0, 18]   shebang `#!/usr/bin/env rad`
B: [  19,   62] PS: [  1,  0] PE: [  7,  0]   file_header
B: [  19,   22] PS: [  1,  0] PE: [  1,  3]     --- `---`
B: [  23,   58] PS: [  2,  0] PE: [  6,  0]     contents: file_header_contents `this is a file\nheader\n\nwhoa! hello\n`
B: [  58,   61] PS: [  6,  0] PE: [  6,  3]     --- `---`
B: [  62,  257] PS: [  7,  0] PE: [ 15, 28]   arg_block
B: [  62,   66] PS: [  7,  0] PE: [  7,  4]     args `args`
B: [  66,   67] PS: [  7,  4] PE: [  7,  5]     : `:`
B: [  72,   83] PS: [  8,  4] PE: [  8, 15]     declaration: arg_declaration
B: [  72,   76] PS: [  8,  4] PE: [  8,  8]       arg_name: identifier `name`
B: [  77,   83] PS: [  8,  9] PE: [  8, 15]       type: string_type `string`
B: [  88,  110] PS: [  9,  4] PE: [  9, 26]     declaration: arg_declaration
B: [  88,   91] PS: [  9,  4] PE: [  9,  7]       arg_name: identifier `age`
B: [  92,   95] PS: [  9,  8] PE: [  9, 11]       type: int_type `int`
B: [  96,   97] PS: [  9, 12] PE: [  9, 13]       = `=`
B: [  98,  100] PS: [  9, 14] PE: [  9, 16]       default: int_arg
B: [  98,  100] PS: [  9, 14] PE: [  9, 16]         value: int `30`
B: [ 103,  110] PS: [  9, 19] PE: [  9, 26]       comment: comment_text `An age.`
B: [ 115,  128] PS: [ 10,  4] PE: [ 10, 17]     declaration: arg_declaration
B: [ 115,  123] PS: [ 10,  4] PE: [ 10, 12]       arg_name: identifier `employed`
B: [ 124,  128] PS: [ 10, 13] PE: [ 10, 17]       type: bool_type `bool`
B: [ 133,  165] PS: [ 11,  4] PE: [ 11, 36]     declaration: arg_declaration
B: [ 133,  136] PS: [ 11,  4] PE: [ 11,  7]       arg_name: identifier `foo`
B: [ 137,  145] PS: [ 11,  8] PE: [ 11, 16]       type: string_list_type `string[]`
B: [ 146,  147] PS: [ 11, 17] PE: [ 11, 18]       = `=`
B: [ 148,  165] PS: [ 11, 19] PE: [ 11, 36]       default: string_list
B: [ 148,  149] PS: [ 11, 19] PE: [ 11, 20]         [ `[`
B: [ 149,  155] PS: [ 11, 20] PE: [ 11, 26]         list_entry: string
B: [ 149,  150] PS: [ 11, 20] PE: [ 11, 21]           start: string_start `"`
B: [ 150,  154] PS: [ 11, 21] PE: [ 11, 25]           contents: string_contents
B: [ 150,  154] PS: [ 11, 21] PE: [ 11, 25]             content: string_content `blah`
B: [ 154,  155] PS: [ 11, 25] PE: [ 11, 26]           end: string_end `"`
B: [ 155,  156] PS: [ 11, 26] PE: [ 11, 27]         , `,`
B: [ 157,  164] PS: [ 11, 28] PE: [ 11, 35]         list_entry: string
B: [ 157,  158] PS: [ 11, 28] PE: [ 11, 29]           start: string_start `"`
B: [ 158,  163] PS: [ 11, 29] PE: [ 11, 34]           contents: string_contents
B: [ 158,  163] PS: [ 11, 29] PE: [ 11, 34]             content: string_content `bloop`
B: [ 163,  164] PS: [ 11, 34] PE: [ 11, 35]           end: string_end `"`
B: [ 164,  165] PS: [ 11, 35] PE: [ 11, 36]         ] `]`
B: [ 170,  196] PS: [ 12,  4] PE: [ 12, 30]     declaration: arg_declaration
B: [ 170,  173] PS: [ 12,  4] PE: [ 12,  7]       arg_name: identifier `bar`
B: [ 174,  179] PS: [ 12,  8] PE: [ 12, 13]       rename: string
B: [ 174,  175] PS: [ 12,  8] PE: [ 12,  9]         start: string_start `"`
B: [ 175,  178] PS: [ 12,  9] PE: [ 12, 12]         contents: string_contents
B: [ 175,  178] PS: [ 12,  9] PE: [ 12, 12]           content: string_content `BAR`
B: [ 178,  179] PS: [ 12, 12] PE: [ 12, 13]         end: string_end `"`
B: [ 180,  181] PS: [ 12, 14] PE: [ 12, 15]       shorthand: shorthand_flag `b`
B: [ 182,  187] PS: [ 12, 16] PE: [ 12, 21]       type: int_list_type `int[]`
B: [ 188,  189] PS: [ 12, 22] PE: [ 12, 23]       = `=`
B: [ 190,  196] PS: [ 12, 24] PE: [ 12, 30]       default: int_list
B: [ 190,  191] PS: [ 12, 24] PE: [ 12, 25]         [ `[`
B: [ 191,  192] PS: [ 12, 25] PE: [ 12, 26]         list_entry: int_arg
B: [ 191,  192] PS: [ 12, 25] PE: [ 12, 26]           value: int `4`
B: [ 192,  193] PS: [ 12, 26] PE: [ 12, 27]         , `,`
B: [ 194,  195] PS: [ 12, 28] PE: [ 12, 29]         list_entry: int_arg
B: [ 194,  195] PS: [ 12, 28] PE: [ 12, 29]           value: int `5`
B: [ 195,  196] PS: [ 12, 29] PE: [ 12, 30]         ] `]`
B: [ 202,  228] PS: [ 14,  4] PE: [ 14, 30]     enum_constraint: arg_enum_constraint
B: [ 202,  206] PS: [ 14,  4] PE: [ 14,  8]       arg_name: identifier `name`
B: [ 207,  211] PS: [ 14,  9] PE: [ 14, 13]       enum `enum`
B: [ 212,  228] PS: [ 14, 14] PE: [ 14, 30]       values: string_list
B: [ 212,  213] PS: [ 14, 14] PE: [ 14, 15]         [ `[`
B: [ 213,  220] PS: [ 14, 15] PE: [ 14, 22]         list_entry: string
B: [ 213,  214] PS: [ 14, 15] PE: [ 14, 16]           start: string_start `"`
B: [ 214,  219] PS: [ 14, 16] PE: [ 14, 21]           contents: string_contents
B: [ 214,  219] PS: [ 14, 16] PE: [ 14, 21]             content: string_content `alice`
B: [ 219,  220] PS: [ 14, 21] PE: [ 14, 22]           end: string_end `"`
B: [ 220,  221] PS: [ 14, 22] PE: [ 14, 23]         , `,`
B: [ 222,  227] PS: [ 14, 24] PE: [ 14, 29]         list_entry: string
B: [ 222,  223] PS: [ 14, 24] PE: [ 14, 25]           start: string_start `"`
B: [ 223,  226] PS: [ 14, 25] PE: [ 14, 28]           contents: string_contents
B: [ 223,  226] PS: [ 14, 25] PE: [ 14, 28]             content: string_content `bob`
B: [ 226,  227] PS: [ 14, 28] PE: [ 14, 29]           end: string_end `"`
B: [ 227,  228] PS: [ 14, 29] PE: [ 14, 30]         ] `]`
B: [ 233,  257] PS: [ 15,  4] PE: [ 15, 28]     regex_constraint: arg_regex_constraint
B: [ 233,  237] PS: [ 15,  4] PE: [ 15,  8]       arg_name: identifier `name`
B: [ 238,  243] PS: [ 15,  9] PE: [ 15, 14]       regex `regex`
B: [ 244,  257] PS: [ 15, 15] PE: [ 15, 28]       regex: string
B: [ 244,  245] PS: [ 15, 15] PE: [ 15, 16]         start: string_start `"`
B: [ 245,  256] PS: [ 15, 16] PE: [ 15, 27]         contents: string_contents
B: [ 245,  256] PS: [ 15, 16] PE: [ 15, 27]           content: string_content `[A-Z][a-z]*`
B: [ 256,  257] PS: [ 15, 27] PE: [ 15, 28]         end: string_end `"`
B: [ 259,  264] PS: [ 17,  0] PE: [ 17,  5]   assign
B: [ 259,  260] PS: [ 17,  0] PE: [ 17,  1]     left: var_path
B: [ 259,  260] PS: [ 17,  0] PE: [ 17,  1]       root: identifier `a`
B: [ 261,  262] PS: [ 17,  2] PE: [ 17,  3]     = `=`
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]     right: expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]       ternary_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]         delegate: or_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]           delegate: and_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]             delegate: compare_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]               delegate: add_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]                 delegate: mult_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]                   delegate: unary_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]                     delegate: indexed_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]                       root: primary_expr
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]                         literal
B: [ 263,  264] PS: [ 17,  4] PE: [ 17,  5]                           int `2`
B: [ 265,  276] PS: [ 18,  0] PE: [ 18, 11]   assign
B: [ 265,  266] PS: [ 18,  0] PE: [ 18,  1]     left: var_path
B: [ 265,  266] PS: [ 18,  0] PE: [ 18,  1]       root: identifier `a`
B: [ 267,  268] PS: [ 18,  2] PE: [ 18,  3]     = `=`
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]     right: expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]       ternary_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]         delegate: or_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]           delegate: and_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]             delegate: compare_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]               delegate: add_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]                 delegate: mult_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]                   delegate: unary_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]                     delegate: indexed_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]                       root: primary_expr
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]                         literal
B: [ 269,  276] PS: [ 18,  4] PE: [ 18, 11]                           string
B: [ 269,  270] PS: [ 18,  4] PE: [ 18,  5]                             start: string_start `"`
B: [ 270,  275] PS: [ 18,  5] PE: [ 18, 10]                             contents: string_contents
B: [ 270,  275] PS: [ 18,  5] PE: [ 18, 10]                               content: string_content `hello`
B: [ 275,  276] PS: [ 18, 10] PE: [ 18, 11]                             end: string_end `"`
B: [ 277,  285] PS: [ 19,  0] PE: [ 19,  8]   assign
B: [ 277,  278] PS: [ 19,  0] PE: [ 19,  1]     left: var_path
B: [ 277,  278] PS: [ 19,  0] PE: [ 19,  1]       root: identifier `a`
B: [ 279,  280] PS: [ 19,  2] PE: [ 19,  3]     = `=`
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]     right: expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]       ternary_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]         delegate: or_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]           delegate: and_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]             delegate: compare_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]               delegate: add_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]                 delegate: mult_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]                   delegate: unary_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]                     delegate: indexed_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]                       root: primary_expr
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]                         literal
B: [ 281,  285] PS: [ 19,  4] PE: [ 19,  8]                           float `3.14`
B: [ 286,  294] PS: [ 20,  0] PE: [ 20,  8]   assign
B: [ 286,  287] PS: [ 20,  0] PE: [ 20,  1]     left: var_path
B: [ 286,  287] PS: [ 20,  0] PE: [ 20,  1]       root: identifier `a`
B: [ 288,  289] PS: [ 20,  2] PE: [ 20,  3]     = `=`
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]     right: expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]       ternary_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]         delegate: or_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]           delegate: and_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]             delegate: compare_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]               delegate: add_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]                 delegate: mult_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]                   delegate: unary_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]                     delegate: indexed_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]                       root: primary_expr
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]                         literal
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]                           bool
B: [ 290,  294] PS: [ 20,  4] PE: [ 20,  8]                             true `true`
B: [ 295,  308] PS: [ 21,  0] PE: [ 21, 13]   assign
B: [ 295,  296] PS: [ 21,  0] PE: [ 21,  1]     left: var_path
B: [ 295,  296] PS: [ 21,  0] PE: [ 21,  1]       root: identifier `a`
B: [ 297,  298] PS: [ 21,  2] PE: [ 21,  3]     = `=`
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]     right: expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]       ternary_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]         delegate: or_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]           delegate: and_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]             delegate: compare_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]               delegate: add_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]                 delegate: mult_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]                   delegate: unary_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]                     delegate: indexed_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]                       root: primary_expr
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]                         literal
B: [ 299,  308] PS: [ 21,  4] PE: [ 21, 13]                           list
B: [ 299,  300] PS: [ 21,  4] PE: [ 21,  5]                             [ `[`
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                             list_entry: expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                               ternary_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                 delegate: or_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                   delegate: and_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                     delegate: compare_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                       delegate: add_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                         delegate: mult_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                           delegate: unary_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                             delegate: indexed_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                               root: primary_expr
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                                 literal
B: [ 300,  301] PS: [ 21,  5] PE: [ 21,  6]                                                   int `1`
B: [ 301,  302] PS: [ 21,  6] PE: [ 21,  7]                             , `,`
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                             list_entry: expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                               ternary_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                 delegate: or_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                   delegate: and_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                     delegate: compare_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                       delegate: add_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                         delegate: mult_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                           delegate: unary_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                             delegate: indexed_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                               root: primary_expr
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                                 literal
B: [ 303,  304] PS: [ 21,  8] PE: [ 21,  9]                                                   int `2`
B: [ 304,  305] PS: [ 21,  9] PE: [ 21, 10]                             , `,`
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                             list_entry: expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                               ternary_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                 delegate: or_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                   delegate: and_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                     delegate: compare_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                       delegate: add_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                         delegate: mult_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                           delegate: unary_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                             delegate: indexed_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                               root: primary_expr
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                                 literal
B: [ 306,  307] PS: [ 21, 11] PE: [ 21, 12]                                                   int `3`
B: [ 307,  308] PS: [ 21, 12] PE: [ 21, 13]                             ] `]`
B: [ 309,  327] PS: [ 22,  0] PE: [ 22, 18]   assign
B: [ 309,  310] PS: [ 22,  0] PE: [ 22,  1]     left: var_path
B: [ 309,  310] PS: [ 22,  0] PE: [ 22,  1]       root: identifier `a`
B: [ 311,  312] PS: [ 22,  2] PE: [ 22,  3]     = `=`
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]     right: expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]       ternary_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]         delegate: or_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]           delegate: and_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]             delegate: compare_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]               delegate: add_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]                 delegate: mult_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]                   delegate: unary_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]                     delegate: indexed_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]                       root: primary_expr
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]                         literal
B: [ 313,  327] PS: [ 22,  4] PE: [ 22, 18]                           map
B: [ 313,  314] PS: [ 22,  4] PE: [ 22,  5]                             { `{`
B: [ 314,  320] PS: [ 22,  5] PE: [ 22, 11]                             map_entry: map_entry
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                               key: expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                 ternary_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                   delegate: or_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                     delegate: and_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                       delegate: compare_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                         delegate: add_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                           delegate: mult_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                             delegate: unary_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                               delegate: indexed_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                                 root: primary_expr
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                                   literal
B: [ 314,  317] PS: [ 22,  5] PE: [ 22,  8]                                                     string
B: [ 314,  315] PS: [ 22,  5] PE: [ 22,  6]                                                       start: string_start `"`
B: [ 315,  316] PS: [ 22,  6] PE: [ 22,  7]                                                       contents: string_contents
B: [ 315,  316] PS: [ 22,  6] PE: [ 22,  7]                                                         content: string_content `x`
B: [ 316,  317] PS: [ 22,  7] PE: [ 22,  8]                                                       end: string_end `"`
B: [ 317,  318] PS: [ 22,  8] PE: [ 22,  9]                               : `:`
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                               value: expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                 ternary_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                   delegate: or_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                     delegate: and_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                       delegate: compare_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                         delegate: add_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                           delegate: mult_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                             delegate: unary_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                               delegate: indexed_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                                 root: primary_expr
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                                   literal
B: [ 319,  320] PS: [ 22, 10] PE: [ 22, 11]                                                     int `1`
B: [ 320,  321] PS: [ 22, 11] PE: [ 22, 12]                             , `,`
B: [ 322,  326] PS: [ 22, 13] PE: [ 22, 17]                             map_entry: map_entry
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                               key: expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                 ternary_expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                   delegate: or_expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                     delegate: and_expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                       delegate: compare_expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                         delegate: add_expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                           delegate: mult_expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                             delegate: unary_expr
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                               delegate: var_path
B: [ 322,  323] PS: [ 22, 13] PE: [ 22, 14]                                                 root: identifier `y`
B: [ 323,  324] PS: [ 22, 14] PE: [ 22, 15]                               : `:`
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                               value: expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                 ternary_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                   delegate: or_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                     delegate: and_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                       delegate: compare_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                         delegate: add_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                           delegate: mult_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                             delegate: unary_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                               delegate: indexed_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                                 root: primary_expr
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                                   literal
B: [ 325,  326] PS: [ 22, 16] PE: [ 22, 17]                                                     int `2`
B: [ 326,  327] PS: [ 22, 17] PE: [ 22, 18]                             } `}`
B: [ 329,  357] PS: [ 24,  0] PE: [ 24, 28]   assign
B: [ 329,  330] PS: [ 24,  0] PE: [ 24,  1]     left: var_path
B: [ 329,  330] PS: [ 24,  0] PE: [ 24,  1]       root: identifier `a`
B: [ 331,  332] PS: [ 24,  2] PE: [ 24,  3]     = `=`
B: [ 333,  357] PS: [ 24,  4] PE: [ 24, 28]     right: expr
B: [ 333,  357] PS: [ 24,  4] PE: [ 24, 28]       ternary_expr
B: [ 333,  357] PS: [ 24,  4] PE: [ 24, 28]         delegate: or_expr
B: [ 333,  357] PS: [ 24,  4] PE: [ 24, 28]           delegate: and_expr
B: [ 333,  357] PS: [ 24,  4] PE: [ 24, 28]             delegate: compare_expr
B: [ 333,  357] PS: [ 24,  4] PE: [ 24, 28]               delegate: add_expr
B: [ 333,  342] PS: [ 24,  4] PE: [ 24, 13]                 left: add_expr
B: [ 333,  334] PS: [ 24,  4] PE: [ 24,  5]                   left: add_expr
B: [ 333,  334] PS: [ 24,  4] PE: [ 24,  5]                     delegate: mult_expr
B: [ 333,  334] PS: [ 24,  4] PE: [ 24,  5]                       delegate: unary_expr
B: [ 333,  334] PS: [ 24,  4] PE: [ 24,  5]                         delegate: indexed_expr
B: [ 333,  334] PS: [ 24,  4] PE: [ 24,  5]                           root: primary_expr
B: [ 333,  334] PS: [ 24,  4] PE: [ 24,  5]                             literal
B: [ 333,  334] PS: [ 24,  4] PE: [ 24,  5]                               int `3`
B: [ 335,  336] PS: [ 24,  6] PE: [ 24,  7]                   op: + `+`
B: [ 337,  342] PS: [ 24,  8] PE: [ 24, 13]                   right: mult_expr
B: [ 337,  338] PS: [ 24,  8] PE: [ 24,  9]                     left: mult_expr
B: [ 337,  338] PS: [ 24,  8] PE: [ 24,  9]                       delegate: unary_expr
B: [ 337,  338] PS: [ 24,  8] PE: [ 24,  9]                         delegate: indexed_expr
B: [ 337,  338] PS: [ 24,  8] PE: [ 24,  9]                           root: primary_expr
B: [ 337,  338] PS: [ 24,  8] PE: [ 24,  9]                             literal
B: [ 337,  338] PS: [ 24,  8] PE: [ 24,  9]                               int `5`
B: [ 339,  340] PS: [ 24, 10] PE: [ 24, 11]                     op: * `*`
B: [ 341,  342] PS: [ 24, 12] PE: [ 24, 13]                     right: unary_expr
B: [ 341,  342] PS: [ 24, 12] PE: [ 24, 13]                       delegate: indexed_expr
B: [ 341,  342] PS: [ 24, 12] PE: [ 24, 13]                         root: primary_expr
B: [ 341,  342] PS: [ 24, 12] PE: [ 24, 13]                           literal
B: [ 341,  342] PS: [ 24, 12] PE: [ 24, 13]                             int `3`
B: [ 343,  344] PS: [ 24, 14] PE: [ 24, 15]                 op: - `-`
B: [ 345,  357] PS: [ 24, 16] PE: [ 24, 28]                 right: mult_expr
B: [ 345,  353] PS: [ 24, 16] PE: [ 24, 24]                   left: mult_expr
B: [ 345,  346] PS: [ 24, 16] PE: [ 24, 17]                     left: mult_expr
B: [ 345,  346] PS: [ 24, 16] PE: [ 24, 17]                       delegate: unary_expr
B: [ 345,  346] PS: [ 24, 16] PE: [ 24, 17]                         delegate: indexed_expr
B: [ 345,  346] PS: [ 24, 16] PE: [ 24, 17]                           root: primary_expr
B: [ 345,  346] PS: [ 24, 16] PE: [ 24, 17]                             literal
B: [ 345,  346] PS: [ 24, 16] PE: [ 24, 17]                               int `1`
B: [ 347,  348] PS: [ 24, 18] PE: [ 24, 19]                     op: / `/`
B: [ 349,  353] PS: [ 24, 20] PE: [ 24, 24]                     right: unary_expr
B: [ 349,  353] PS: [ 24, 20] PE: [ 24, 24]                       delegate: indexed_expr
B: [ 349,  353] PS: [ 24, 20] PE: [ 24, 24]                         root: primary_expr
B: [ 349,  353] PS: [ 24, 20] PE: [ 24, 24]                           literal
B: [ 349,  353] PS: [ 24, 20] PE: [ 24, 24]                             float `0.01`
B: [ 354,  355] PS: [ 24, 25] PE: [ 24, 26]                   op: % `%`
B: [ 356,  357] PS: [ 24, 27] PE: [ 24, 28]                   right: unary_expr
B: [ 356,  357] PS: [ 24, 27] PE: [ 24, 28]                     delegate: indexed_expr
B: [ 356,  357] PS: [ 24, 27] PE: [ 24, 28]                       root: primary_expr
B: [ 356,  357] PS: [ 24, 27] PE: [ 24, 28]                         literal
B: [ 356,  357] PS: [ 24, 27] PE: [ 24, 28]                           int `2`
B: [ 358,  364] PS: [ 25,  0] PE: [ 25,  6]   compound_assign
B: [ 358,  359] PS: [ 25,  0] PE: [ 25,  1]     left: var_path
B: [ 358,  359] PS: [ 25,  0] PE: [ 25,  1]       root: identifier `a`
B: [ 360,  362] PS: [ 25,  2] PE: [ 25,  4]     op: += `+=`
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]     right: expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]       ternary_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]         delegate: or_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]           delegate: and_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]             delegate: compare_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]               delegate: add_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]                 delegate: mult_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]                   delegate: unary_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]                     delegate: indexed_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]                       root: primary_expr
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]                         literal
B: [ 363,  364] PS: [ 25,  5] PE: [ 25,  6]                           int `2`
B: [ 365,  371] PS: [ 26,  0] PE: [ 26,  6]   compound_assign
B: [ 365,  366] PS: [ 26,  0] PE: [ 26,  1]     left: var_path
B: [ 365,  366] PS: [ 26,  0] PE: [ 26,  1]       root: identifier `a`
B: [ 367,  369] PS: [ 26,  2] PE: [ 26,  4]     op: -= `-=`
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]     right: expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]       ternary_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]         delegate: or_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]           delegate: and_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]             delegate: compare_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]               delegate: add_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]                 delegate: mult_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]                   delegate: unary_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]                     delegate: indexed_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]                       root: primary_expr
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]                         literal
B: [ 370,  371] PS: [ 26,  5] PE: [ 26,  6]                           int `1`
B: [ 372,  378] PS: [ 27,  0] PE: [ 27,  6]   compound_assign
B: [ 372,  373] PS: [ 27,  0] PE: [ 27,  1]     left: var_path
B: [ 372,  373] PS: [ 27,  0] PE: [ 27,  1]       root: identifier `a`
B: [ 374,  376] PS: [ 27,  2] PE: [ 27,  4]     op: *= `*=`
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]     right: expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]       ternary_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]         delegate: or_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]           delegate: and_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]             delegate: compare_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]               delegate: add_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]                 delegate: mult_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]                   delegate: unary_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]                     delegate: indexed_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]                       root: primary_expr
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]                         literal
B: [ 377,  378] PS: [ 27,  5] PE: [ 27,  6]                           int `5`
B: [ 379,  385] PS: [ 28,  0] PE: [ 28,  6]   compound_assign
B: [ 379,  380] PS: [ 28,  0] PE: [ 28,  1]     left: var_path
B: [ 379,  380] PS: [ 28,  0] PE: [ 28,  1]       root: identifier `a`
B: [ 381,  383] PS: [ 28,  2] PE: [ 28,  4]     op: /= `/=`
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]     right: expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]       ternary_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]         delegate: or_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]           delegate: and_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]             delegate: compare_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]               delegate: add_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]                 delegate: mult_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]                   delegate: unary_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]                     delegate: indexed_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]                       root: primary_expr
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]                         literal
B: [ 384,  385] PS: [ 28,  5] PE: [ 28,  6]                           int `2`
B: [ 386,  392] PS: [ 29,  0] PE: [ 29,  6]   compound_assign
B: [ 386,  387] PS: [ 29,  0] PE: [ 29,  1]     left: var_path
B: [ 386,  387] PS: [ 29,  0] PE: [ 29,  1]       root: identifier `a`
B: [ 388,  390] PS: [ 29,  2] PE: [ 29,  4]     op: %= `%=`
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]     right: expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]       ternary_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]         delegate: or_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]           delegate: and_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]             delegate: compare_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]               delegate: add_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]                 delegate: mult_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]                   delegate: unary_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]                     delegate: indexed_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]                       root: primary_expr
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]                         literal
B: [ 391,  392] PS: [ 29,  5] PE: [ 29,  6]                           int `2`
B: [ 394,  422] PS: [ 31,  0] PE: [ 31, 28]   assign
B: [ 394,  395] PS: [ 31,  0] PE: [ 31,  1]     left: var_path
B: [ 394,  395] PS: [ 31,  0] PE: [ 31,  1]       root: identifier `a`
B: [ 396,  397] PS: [ 31,  2] PE: [ 31,  3]     = `=`
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]     right: expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]       ternary_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]         delegate: or_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]           delegate: and_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]             delegate: compare_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]               delegate: add_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]                 delegate: mult_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]                   delegate: unary_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]                     delegate: indexed_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]                       root: primary_expr
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]                         literal
B: [ 398,  422] PS: [ 31,  4] PE: [ 31, 28]                           string
B: [ 398,  399] PS: [ 31,  4] PE: [ 31,  5]                             start: string_start ```
B: [ 399,  421] PS: [ 31,  5] PE: [ 31, 27]                             contents: string_contents
B: [ 399,  405] PS: [ 31,  5] PE: [ 31, 11]                               content: string_content `hello `
B: [ 405,  421] PS: [ 31, 11] PE: [ 31, 27]                               interpolation: interpolation
B: [ 405,  406] PS: [ 31, 11] PE: [ 31, 12]                                 { `{`
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                 expr: expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                   ternary_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                     delegate: or_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                       delegate: and_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                         delegate: compare_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                           delegate: add_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                             delegate: mult_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                               delegate: unary_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                                 delegate: indexed_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                                   root: primary_expr
B: [ 406,  420] PS: [ 31, 12] PE: [ 31, 26]                                                     call
B: [ 406,  411] PS: [ 31, 12] PE: [ 31, 17]                                                       func: identifier `upper`
B: [ 411,  412] PS: [ 31, 17] PE: [ 31, 18]                                                       ( `(`
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                       arg: expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                         ternary_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                           delegate: or_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                             delegate: and_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                               delegate: compare_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                                 delegate: add_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                                   delegate: mult_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                                     delegate: unary_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                                       delegate: indexed_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                                         root: primary_expr
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                                           literal
B: [ 412,  419] PS: [ 31, 18] PE: [ 31, 25]                                                                             string
B: [ 412,  413] PS: [ 31, 18] PE: [ 31, 19]                                                                               start: string_start `"`
B: [ 413,  418] PS: [ 31, 19] PE: [ 31, 24]                                                                               contents: string_contents
B: [ 413,  418] PS: [ 31, 19] PE: [ 31, 24]                                                                                 content: string_content `alice`
B: [ 418,  419] PS: [ 31, 24] PE: [ 31, 25]                                                                               end: string_end `"`
B: [ 419,  420] PS: [ 31, 25] PE: [ 31, 26]                                                       ) `)`
B: [ 420,  421] PS: [ 31, 26] PE: [ 31, 27]                                 } `}`
B: [ 421,  422] PS: [ 31, 27] PE: [ 31, 28]                             end: string_end ```
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]   expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]     ternary_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]       delegate: or_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]         delegate: and_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]           delegate: compare_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]             delegate: add_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]               delegate: mult_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]                 delegate: unary_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]                   delegate: indexed_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]                     root: primary_expr
B: [ 423,  431] PS: [ 32,  0] PE: [ 32,  8]                       call
B: [ 423,  428] PS: [ 32,  0] PE: [ 32,  5]                         func: identifier `print`
B: [ 428,  429] PS: [ 32,  5] PE: [ 32,  6]                         ( `(`
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                         arg: expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                           ternary_expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                             delegate: or_expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                               delegate: and_expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                                 delegate: compare_expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                                   delegate: add_expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                                     delegate: mult_expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                                       delegate: unary_expr
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                                         delegate: var_path
B: [ 429,  430] PS: [ 32,  6] PE: [ 32,  7]                                           root: identifier `a`
B: [ 430,  431] PS: [ 32,  7] PE: [ 32,  8]                         ) `)`
B: [ 433,  447] PS: [ 34,  0] PE: [ 34, 14]   assign
B: [ 433,  435] PS: [ 34,  0] PE: [ 34,  2]     left: var_path
B: [ 433,  435] PS: [ 34,  0] PE: [ 34,  2]       root: identifier `f1`
B: [ 436,  437] PS: [ 34,  3] PE: [ 34,  4]     = `=`
B: [ 438,  447] PS: [ 34,  5] PE: [ 34, 14]     right: json_path
B: [ 438,  444] PS: [ 34,  5] PE: [ 34, 11]       segment: json_opener
B: [ 438,  442] PS: [ 34,  5] PE: [ 34,  9]         key: json `json`
B: [ 442,  444] PS: [ 34,  9] PE: [ 34, 11]         index: json_path_indexer
B: [ 442,  443] PS: [ 34,  9] PE: [ 34, 10]           [ `[`
B: [ 443,  444] PS: [ 34, 10] PE: [ 34, 11]           ] `]`
B: [ 444,  445] PS: [ 34, 11] PE: [ 34, 12]       . `.`
B: [ 445,  447] PS: [ 34, 12] PE: [ 34, 14]       segment: json_segment
B: [ 445,  447] PS: [ 34, 12] PE: [ 34, 14]         key: identifier `id`
B: [ 448,  477] PS: [ 35,  0] PE: [ 35, 29]   assign
B: [ 448,  450] PS: [ 35,  0] PE: [ 35,  2]     left: var_path
B: [ 448,  450] PS: [ 35,  0] PE: [ 35,  2]       root: identifier `f2`
B: [ 451,  452] PS: [ 35,  3] PE: [ 35,  4]     = `=`
B: [ 453,  477] PS: [ 35,  5] PE: [ 35, 29]     right: json_path
B: [ 453,  457] PS: [ 35,  5] PE: [ 35,  9]       segment: json_opener
B: [ 453,  457] PS: [ 35,  5] PE: [ 35,  9]         key: json `json`
B: [ 457,  458] PS: [ 35,  9] PE: [ 35, 10]       . `.`
B: [ 458,  465] PS: [ 35, 10] PE: [ 35, 17]       segment: json_segment
B: [ 458,  463] PS: [ 35, 10] PE: [ 35, 15]         key: identifier `hello`
B: [ 463,  465] PS: [ 35, 15] PE: [ 35, 17]         index: json_path_indexer
B: [ 463,  464] PS: [ 35, 15] PE: [ 35, 16]           [ `[`
B: [ 464,  465] PS: [ 35, 16] PE: [ 35, 17]           ] `]`
B: [ 465,  466] PS: [ 35, 17] PE: [ 35, 18]       . `.`
B: [ 466,  470] PS: [ 35, 18] PE: [ 35, 22]       segment: json_segment
B: [ 466,  470] PS: [ 35, 18] PE: [ 35, 22]         key: identifier `blah`
B: [ 470,  471] PS: [ 35, 22] PE: [ 35, 23]       . `.`
B: [ 471,  472] PS: [ 35, 23] PE: [ 35, 24]       segment: json_segment
B: [ 471,  472] PS: [ 35, 23] PE: [ 35, 24]         key: * `*`
B: [ 472,  473] PS: [ 35, 24] PE: [ 35, 25]       . `.`
B: [ 473,  477] PS: [ 35, 25] PE: [ 35, 29]       segment: json_segment
B: [ 473,  477] PS: [ 35, 25] PE: [ 35, 29]         key: identifier `woop`
B: [ 479,  641] PS: [ 37,  0] PE: [ 49, 24]   rad_block
B: [ 479,  482] PS: [ 37,  0] PE: [ 37,  3]     rad_type: rad_keyword `rad`
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]     source: expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]       ternary_expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]         delegate: or_expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]           delegate: and_expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]             delegate: compare_expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]               delegate: add_expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]                 delegate: mult_expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]                   delegate: unary_expr
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]                     delegate: var_path
B: [ 483,  486] PS: [ 37,  4] PE: [ 37,  7]                       root: identifier `url`
B: [ 486,  487] PS: [ 37,  7] PE: [ 37,  8]     : `:`
B: [ 492,  505] PS: [ 38,  4] PE: [ 38, 17]     stmt: rad_field_stmt
B: [ 492,  498] PS: [ 38,  4] PE: [ 38, 10]       fields `fields`
B: [ 499,  501] PS: [ 38, 11] PE: [ 38, 13]       identifier: identifier `f1`
B: [ 501,  502] PS: [ 38, 13] PE: [ 38, 14]       , `,`
B: [ 503,  505] PS: [ 38, 15] PE: [ 38, 17]       identifier: identifier `f2`
B: [ 510,  526] PS: [ 39,  4] PE: [ 39, 20]     stmt: rad_sort_stmt
B: [ 510,  514] PS: [ 39,  4] PE: [ 39,  8]       sort `sort`
B: [ 514,  522] PS: [ 39,  8] PE: [ 39, 16]       specifier: rad_sort_specifier
B: [ 515,  517] PS: [ 39,  9] PE: [ 39, 11]         first: immediate_identifier `f1`
B: [ 518,  522] PS: [ 39, 12] PE: [ 39, 16]         second: desc `desc`
B: [ 522,  523] PS: [ 39, 16] PE: [ 39, 17]       , `,`
B: [ 523,  526] PS: [ 39, 17] PE: [ 39, 20]       specifier: rad_sort_specifier
B: [ 524,  526] PS: [ 39, 18] PE: [ 39, 20]         first: immediate_identifier `f2`
B: [ 531,  535] PS: [ 40,  4] PE: [ 40,  8]     stmt: rad_sort_stmt
B: [ 531,  535] PS: [ 40,  4] PE: [ 40,  8]       sort `sort`
B: [ 541,  570] PS: [ 42,  4] PE: [ 43, 19]     stmt: rad_if_stmt
B: [ 541,  570] PS: [ 42,  4] PE: [ 43, 19]       alt: rad_if_alt
B: [ 541,  543] PS: [ 42,  4] PE: [ 42,  6]         if `if`
B: [ 544,  549] PS: [ 42,  7] PE: [ 42, 12]         condition: expr
B: [ 544,  549] PS: [ 42,  7] PE: [ 42, 12]           ternary_expr
B: [ 544,  549] PS: [ 42,  7] PE: [ 42, 12]             delegate: or_expr
B: [ 544,  549] PS: [ 42,  7] PE: [ 42, 12]               delegate: and_expr
B: [ 544,  549] PS: [ 42,  7] PE: [ 42, 12]                 delegate: compare_expr
B: [ 544,  545] PS: [ 42,  7] PE: [ 42,  8]                   left: compare_expr
B: [ 544,  545] PS: [ 42,  7] PE: [ 42,  8]                     delegate: add_expr
B: [ 544,  545] PS: [ 42,  7] PE: [ 42,  8]                       delegate: mult_expr
B: [ 544,  545] PS: [ 42,  7] PE: [ 42,  8]                         delegate: unary_expr
B: [ 544,  545] PS: [ 42,  7] PE: [ 42,  8]                           delegate: var_path
B: [ 544,  545] PS: [ 42,  7] PE: [ 42,  8]                             root: identifier `a`
B: [ 546,  547] PS: [ 42,  9] PE: [ 42, 10]                   op: > `>`
B: [ 548,  549] PS: [ 42, 11] PE: [ 42, 12]                   right: add_expr
B: [ 548,  549] PS: [ 42, 11] PE: [ 42, 12]                     delegate: mult_expr
B: [ 548,  549] PS: [ 42, 11] PE: [ 42, 12]                       delegate: unary_expr
B: [ 548,  549] PS: [ 42, 11] PE: [ 42, 12]                         delegate: var_path
B: [ 548,  549] PS: [ 42, 11] PE: [ 42, 12]                           root: identifier `b`
B: [ 549,  550] PS: [ 42, 12] PE: [ 42, 13]         : `:`
B: [ 559,  570] PS: [ 43,  8] PE: [ 43, 19]         stmt: rad_sort_stmt
B: [ 559,  563] PS: [ 43,  8] PE: [ 43, 12]           sort `sort`
B: [ 563,  566] PS: [ 43, 12] PE: [ 43, 15]           specifier: rad_sort_specifier
B: [ 564,  566] PS: [ 43, 13] PE: [ 43, 15]             first: immediate_identifier `f2`
B: [ 566,  567] PS: [ 43, 15] PE: [ 43, 16]           , `,`
B: [ 567,  570] PS: [ 43, 16] PE: [ 43, 19]           specifier: rad_sort_specifier
B: [ 568,  570] PS: [ 43, 17] PE: [ 43, 19]             first: immediate_identifier `f1`
B: [ 576,  603] PS: [ 45,  4] PE: [ 46, 23]     stmt: rad_field_modifier_stmt
B: [ 576,  578] PS: [ 45,  4] PE: [ 45,  6]       identifier: identifier `f1`
B: [ 578,  579] PS: [ 45,  6] PE: [ 45,  7]       : `:`
B: [ 588,  603] PS: [ 46,  8] PE: [ 46, 23]       mod_stmt: rad_field_mod_map
B: [ 588,  591] PS: [ 46,  8] PE: [ 46, 11]         map `map`
B: [ 592,  603] PS: [ 46, 12] PE: [ 46, 23]         lambda: lambda
B: [ 592,  594] PS: [ 46, 12] PE: [ 46, 14]           fn `fn`
B: [ 594,  595] PS: [ 46, 14] PE: [ 46, 15]           ( `(`
B: [ 595,  596] PS: [ 46, 15] PE: [ 46, 16]           param: identifier `a`
B: [ 596,  597] PS: [ 46, 16] PE: [ 46, 17]           ) `)`
B: [ 598,  603] PS: [ 46, 18] PE: [ 46, 23]           expr: expr
B: [ 598,  603] PS: [ 46, 18] PE: [ 46, 23]             ternary_expr
B: [ 598,  603] PS: [ 46, 18] PE: [ 46, 23]               delegate: or_expr
B: [ 598,  603] PS: [ 46, 18] PE: [ 46, 23]                 delegate: and_expr
B: [ 598,  603] PS: [ 46, 18] PE: [ 46, 23]                   delegate: compare_expr
B: [ 598,  603] PS: [ 46, 18] PE: [ 46, 23]                     delegate: add_expr
B: [ 598,  603] PS: [ 46, 18] PE: [ 46, 23]                       delegate: mult_expr
B: [ 598,  599] PS: [ 46, 18] PE: [ 46, 19]                         left: mult_expr
B: [ 598,  599] PS: [ 46, 18] PE: [ 46, 19]                           delegate: unary_expr
B: [ 598,  599] PS: [ 46, 18] PE: [ 46, 19]                             delegate: var_path
B: [ 598,  599] PS: [ 46, 18] PE: [ 46, 19]                               root: identifier `a`
B: [ 600,  601] PS: [ 46, 20] PE: [ 46, 21]                         op: * `*`
B: [ 602,  603] PS: [ 46, 22] PE: [ 46, 23]                         right: unary_expr
B: [ 602,  603] PS: [ 46, 22] PE: [ 46, 23]                           delegate: indexed_expr
B: [ 602,  603] PS: [ 46, 22] PE: [ 46, 23]                             root: primary_expr
B: [ 602,  603] PS: [ 46, 22] PE: [ 46, 23]                               literal
B: [ 602,  603] PS: [ 46, 22] PE: [ 46, 23]                                 int `2`
B: [ 609,  641] PS: [ 48,  4] PE: [ 49, 24]     stmt: rad_field_modifier_stmt
B: [ 609,  611] PS: [ 48,  4] PE: [ 48,  6]       identifier: identifier `f1`
B: [ 611,  612] PS: [ 48,  6] PE: [ 48,  7]       , `,`
B: [ 613,  615] PS: [ 48,  8] PE: [ 48, 10]       identifier: identifier `f2`
B: [ 615,  616] PS: [ 48, 10] PE: [ 48, 11]       : `:`
B: [ 625,  641] PS: [ 49,  8] PE: [ 49, 24]       mod_stmt: rad_field_mod_color
B: [ 625,  630] PS: [ 49,  8] PE: [ 49, 13]         color `color`
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]         color: expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]           ternary_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]             delegate: or_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]               delegate: and_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                 delegate: compare_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                   delegate: add_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                     delegate: mult_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                       delegate: unary_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                         delegate: indexed_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                           root: primary_expr
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                             literal
B: [ 631,  636] PS: [ 49, 14] PE: [ 49, 19]                               string
B: [ 631,  632] PS: [ 49, 14] PE: [ 49, 15]                                 start: string_start `"`
B: [ 632,  635] PS: [ 49, 15] PE: [ 49, 18]                                 contents: string_contents
B: [ 632,  635] PS: [ 49, 15] PE: [ 49, 18]                                   content: string_content `red`
B: [ 635,  636] PS: [ 49, 18] PE: [ 49, 19]                                 end: string_end `"`
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]         regex: expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]           ternary_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]             delegate: or_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]               delegate: and_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                 delegate: compare_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                   delegate: add_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                     delegate: mult_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                       delegate: unary_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                         delegate: indexed_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                           root: primary_expr
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                             literal
B: [ 637,  641] PS: [ 49, 20] PE: [ 49, 24]                               string
B: [ 637,  638] PS: [ 49, 20] PE: [ 49, 21]                                 start: string_start `"`
B: [ 638,  640] PS: [ 49, 21] PE: [ 49, 23]                                 contents: string_contents
B: [ 638,  640] PS: [ 49, 21] PE: [ 49, 23]                                   content: string_content `.*`
B: [ 640,  641] PS: [ 49, 23] PE: [ 49, 24]                                 end: string_end `"`
B: [ 643,  755] PS: [ 51,  0] PE: [ 57, 21]   if_stmt
B: [ 643,  755] PS: [ 51,  0] PE: [ 57, 21]     alt: if_alt
B: [ 643,  645] PS: [ 51,  0] PE: [ 51,  2]       if `if`
B: [ 646,  653] PS: [ 51,  3] PE: [ 51, 10]       condition: expr
B: [ 646,  653] PS: [ 51,  3] PE: [ 51, 10]         ternary_expr
B: [ 646,  653] PS: [ 51,  3] PE: [ 51, 10]           delegate: or_expr
B: [ 646,  653] PS: [ 51,  3] PE: [ 51, 10]             delegate: and_expr
B: [ 646,  653] PS: [ 51,  3] PE: [ 51, 10]               delegate: compare_expr
B: [ 646,  649] PS: [ 51,  3] PE: [ 51,  6]                 left: compare_expr
B: [ 646,  649] PS: [ 51,  3] PE: [ 51,  6]                   delegate: add_expr
B: [ 646,  649] PS: [ 51,  3] PE: [ 51,  6]                     delegate: mult_expr
B: [ 646,  649] PS: [ 51,  3] PE: [ 51,  6]                       delegate: unary_expr
B: [ 646,  649] PS: [ 51,  3] PE: [ 51,  6]                         delegate: var_path
B: [ 646,  649] PS: [ 51,  3] PE: [ 51,  6]                           root: identifier `bah`
B: [ 650,  651] PS: [ 51,  7] PE: [ 51,  8]                 op: > `>`
B: [ 652,  653] PS: [ 51,  9] PE: [ 51, 10]                 right: add_expr
B: [ 652,  653] PS: [ 51,  9] PE: [ 51, 10]                   delegate: mult_expr
B: [ 652,  653] PS: [ 51,  9] PE: [ 51, 10]                     delegate: unary_expr
B: [ 652,  653] PS: [ 51,  9] PE: [ 51, 10]                       delegate: indexed_expr
B: [ 652,  653] PS: [ 51,  9] PE: [ 51, 10]                         root: primary_expr
B: [ 652,  653] PS: [ 51,  9] PE: [ 51, 10]                           literal
B: [ 652,  653] PS: [ 51,  9] PE: [ 51, 10]                             int `5`
B: [ 653,  654] PS: [ 51, 10] PE: [ 51, 11]       : `:`
B: [ 659,  672] PS: [ 52,  4] PE: [ 52, 17]       stmt: assign
B: [ 659,  664] PS: [ 52,  4] PE: [ 52,  9]         left: var_path
B: [ 659,  664] PS: [ 52,  4] PE: [ 52,  9]           root: identifier `hello`
B: [ 665,  666] PS: [ 52, 10] PE: [ 52, 11]         = `=`
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]         right: expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]           ternary_expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]             delegate: or_expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]               delegate: and_expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]                 delegate: compare_expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]                   delegate: add_expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]                     delegate: mult_expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]                       delegate: unary_expr
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]                         delegate: var_path
B: [ 667,  672] PS: [ 52, 12] PE: [ 52, 17]                           root: identifier `bloop`
B: [ 678,  755] PS: [ 54,  4] PE: [ 57, 21]       stmt: if_stmt
B: [ 678,  710] PS: [ 54,  4] PE: [ 55, 18]         alt: if_alt
B: [ 678,  680] PS: [ 54,  4] PE: [ 54,  6]           if `if`
B: [ 681,  690] PS: [ 54,  7] PE: [ 54, 16]           condition: expr
B: [ 681,  690] PS: [ 54,  7] PE: [ 54, 16]             ternary_expr
B: [ 681,  690] PS: [ 54,  7] PE: [ 54, 16]               delegate: or_expr
B: [ 681,  690] PS: [ 54,  7] PE: [ 54, 16]                 delegate: and_expr
B: [ 681,  690] PS: [ 54,  7] PE: [ 54, 16]                   delegate: compare_expr
B: [ 681,  685] PS: [ 54,  7] PE: [ 54, 11]                     left: compare_expr
B: [ 681,  685] PS: [ 54,  7] PE: [ 54, 11]                       delegate: add_expr
B: [ 681,  685] PS: [ 54,  7] PE: [ 54, 11]                         delegate: mult_expr
B: [ 681,  685] PS: [ 54,  7] PE: [ 54, 11]                           delegate: unary_expr
B: [ 681,  685] PS: [ 54,  7] PE: [ 54, 11]                             delegate: var_path
B: [ 681,  685] PS: [ 54,  7] PE: [ 54, 11]                               root: identifier `blah`
B: [ 686,  688] PS: [ 54, 12] PE: [ 54, 14]                     op: == `==`
B: [ 689,  690] PS: [ 54, 15] PE: [ 54, 16]                     right: add_expr
B: [ 689,  690] PS: [ 54, 15] PE: [ 54, 16]                       delegate: mult_expr
B: [ 689,  690] PS: [ 54, 15] PE: [ 54, 16]                         delegate: unary_expr
B: [ 689,  690] PS: [ 54, 15] PE: [ 54, 16]                           delegate: indexed_expr
B: [ 689,  690] PS: [ 54, 15] PE: [ 54, 16]                             root: primary_expr
B: [ 689,  690] PS: [ 54, 15] PE: [ 54, 16]                               literal
B: [ 689,  690] PS: [ 54, 15] PE: [ 54, 16]                                 int `2`
B: [ 690,  691] PS: [ 54, 16] PE: [ 54, 17]           : `:`
B: [ 700,  710] PS: [ 55,  8] PE: [ 55, 18]           stmt: compound_assign
B: [ 700,  705] PS: [ 55,  8] PE: [ 55, 13]             left: var_path
B: [ 700,  705] PS: [ 55,  8] PE: [ 55, 13]               root: identifier `yoink`
B: [ 706,  708] PS: [ 55, 14] PE: [ 55, 16]             op: += `+=`
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]             right: expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]               ternary_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                 delegate: or_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                   delegate: and_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                     delegate: compare_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                       delegate: add_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                         delegate: mult_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                           delegate: unary_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                             delegate: indexed_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                               root: primary_expr
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                                 literal
B: [ 709,  710] PS: [ 55, 17] PE: [ 55, 18]                                   int `2`
B: [ 715,  719] PS: [ 56,  4] PE: [ 56,  8]         else `else`
B: [ 720,  755] PS: [ 56,  9] PE: [ 57, 21]         alt: if_alt
B: [ 720,  722] PS: [ 56,  9] PE: [ 56, 11]           if `if`
B: [ 723,  732] PS: [ 56, 12] PE: [ 56, 21]           condition: expr
B: [ 723,  732] PS: [ 56, 12] PE: [ 56, 21]             ternary_expr
B: [ 723,  732] PS: [ 56, 12] PE: [ 56, 21]               delegate: or_expr
B: [ 723,  732] PS: [ 56, 12] PE: [ 56, 21]                 delegate: and_expr
B: [ 723,  732] PS: [ 56, 12] PE: [ 56, 21]                   delegate: compare_expr
B: [ 723,  727] PS: [ 56, 12] PE: [ 56, 16]                     left: compare_expr
B: [ 723,  727] PS: [ 56, 12] PE: [ 56, 16]                       delegate: add_expr
B: [ 723,  727] PS: [ 56, 12] PE: [ 56, 16]                         delegate: mult_expr
B: [ 723,  727] PS: [ 56, 12] PE: [ 56, 16]                           delegate: unary_expr
B: [ 723,  727] PS: [ 56, 12] PE: [ 56, 16]                             delegate: var_path
B: [ 723,  727] PS: [ 56, 12] PE: [ 56, 16]                               root: identifier `blah`
B: [ 728,  730] PS: [ 56, 17] PE: [ 56, 19]                     op: == `==`
B: [ 731,  732] PS: [ 56, 20] PE: [ 56, 21]                     right: add_expr
B: [ 731,  732] PS: [ 56, 20] PE: [ 56, 21]                       delegate: mult_expr
B: [ 731,  732] PS: [ 56, 20] PE: [ 56, 21]                         delegate: unary_expr
B: [ 731,  732] PS: [ 56, 20] PE: [ 56, 21]                           delegate: indexed_expr
B: [ 731,  732] PS: [ 56, 20] PE: [ 56, 21]                             root: primary_expr
B: [ 731,  732] PS: [ 56, 20] PE: [ 56, 21]                               literal
B: [ 731,  732] PS: [ 56, 20] PE: [ 56, 21]                                 int `3`
B: [ 732,  733] PS: [ 56, 21] PE: [ 56, 22]           : `:`
B: [ 742,  755] PS: [ 57,  8] PE: [ 57, 21]           stmt: assign
B: [ 742,  746] PS: [ 57,  8] PE: [ 57, 12]             left: var_path
B: [ 742,  746] PS: [ 57,  8] PE: [ 57, 12]               root: identifier `boom`
B: [ 747,  748] PS: [ 57, 13] PE: [ 57, 14]             = `=`
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]             right: expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]               ternary_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                 delegate: or_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                   delegate: and_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                     delegate: compare_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                       delegate: add_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                         delegate: mult_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                           delegate: unary_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                             delegate: indexed_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                               root: primary_expr
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                                 literal
B: [ 749,  755] PS: [ 57, 15] PE: [ 57, 21]                                   string
B: [ 749,  750] PS: [ 57, 15] PE: [ 57, 16]                                     start: string_start `"`
B: [ 750,  754] PS: [ 57, 16] PE: [ 57, 20]                                     contents: string_contents
B: [ 750,  754] PS: [ 57, 16] PE: [ 57, 20]                                       content: string_content `haha`
B: [ 754,  755] PS: [ 57, 20] PE: [ 57, 21]                                     end: string_end `"`
B: [ 757,  783] PS: [ 59,  0] PE: [ 60, 13]   rad_block
B: [ 757,  764] PS: [ 59,  0] PE: [ 59,  7]     rad_type: request_keyword `request`
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]     source: expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]       ternary_expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]         delegate: or_expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]           delegate: and_expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]             delegate: compare_expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]               delegate: add_expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]                 delegate: mult_expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]                   delegate: unary_expr
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]                     delegate: var_path
B: [ 765,  768] PS: [ 59,  8] PE: [ 59, 11]                       root: identifier `url`
B: [ 768,  769] PS: [ 59, 11] PE: [ 59, 12]     : `:`
B: [ 774,  783] PS: [ 60,  4] PE: [ 60, 13]     stmt: rad_field_stmt
B: [ 774,  780] PS: [ 60,  4] PE: [ 60, 10]       fields `fields`
B: [ 781,  783] PS: [ 60, 11] PE: [ 60, 13]       identifier: identifier `f1`
B: [ 785,  815] PS: [ 62,  0] PE: [ 63, 21]   rad_block
B: [ 785,  792] PS: [ 62,  0] PE: [ 62,  7]     rad_type: display_keyword `display`
B: [ 792,  793] PS: [ 62,  7] PE: [ 62,  8]     : `:`
B: [ 798,  815] PS: [ 63,  4] PE: [ 63, 21]     stmt: rad_field_stmt
B: [ 798,  804] PS: [ 63,  4] PE: [ 63, 10]       fields `fields`
B: [ 805,  807] PS: [ 63, 11] PE: [ 63, 13]       identifier: identifier `f2`
B: [ 807,  808] PS: [ 63, 13] PE: [ 63, 14]       , `,`
B: [ 809,  811] PS: [ 63, 15] PE: [ 63, 17]       identifier: identifier `f1`
B: [ 811,  812] PS: [ 63, 17] PE: [ 63, 18]       , `,`
B: [ 813,  815] PS: [ 63, 19] PE: [ 63, 21]       identifier: identifier `f3`
B: [ 817,  868] PS: [ 65,  0] PE: [ 65, 51]   assign
B: [ 817,  821] PS: [ 65,  0] PE: [ 65,  4]     left: var_path
B: [ 817,  821] PS: [ 65,  0] PE: [ 65,  4]       root: identifier `area`
B: [ 822,  823] PS: [ 65,  5] PE: [ 65,  6]     = `=`
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]     right: expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]       ternary_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]         delegate: or_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]           delegate: and_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]             delegate: compare_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]               delegate: add_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]                 delegate: mult_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]                   delegate: unary_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]                     delegate: indexed_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]                       root: primary_expr
B: [ 824,  868] PS: [ 65,  7] PE: [ 65, 51]                         list_comprehension
B: [ 824,  825] PS: [ 65,  7] PE: [ 65,  8]                           [ `[`
B: [ 825,  845] PS: [ 65,  8] PE: [ 65, 28]                           expr: expr
B: [ 825,  845] PS: [ 65,  8] PE: [ 65, 28]                             ternary_expr
B: [ 825,  845] PS: [ 65,  8] PE: [ 65, 28]                               delegate: or_expr
B: [ 825,  845] PS: [ 65,  8] PE: [ 65, 28]                                 delegate: and_expr
B: [ 825,  845] PS: [ 65,  8] PE: [ 65, 28]                                   delegate: compare_expr
B: [ 825,  845] PS: [ 65,  8] PE: [ 65, 28]                                     delegate: add_expr
B: [ 825,  845] PS: [ 65,  8] PE: [ 65, 28]                                       delegate: mult_expr
B: [ 825,  833] PS: [ 65,  8] PE: [ 65, 16]                                         left: mult_expr
B: [ 825,  833] PS: [ 65,  8] PE: [ 65, 16]                                           delegate: unary_expr
B: [ 825,  833] PS: [ 65,  8] PE: [ 65, 16]                                             delegate: var_path
B: [ 825,  830] PS: [ 65,  8] PE: [ 65, 13]                                               root: identifier `width`
B: [ 830,  831] PS: [ 65, 13] PE: [ 65, 14]                                               [ `[`
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                               indexing: expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                 ternary_expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                   delegate: or_expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                     delegate: and_expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                       delegate: compare_expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                         delegate: add_expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                           delegate: mult_expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                             delegate: unary_expr
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                               delegate: var_path
B: [ 831,  832] PS: [ 65, 14] PE: [ 65, 15]                                                                 root: identifier `i`
B: [ 832,  833] PS: [ 65, 15] PE: [ 65, 16]                                               ] `]`
B: [ 834,  835] PS: [ 65, 17] PE: [ 65, 18]                                         op: * `*`
B: [ 836,  845] PS: [ 65, 19] PE: [ 65, 28]                                         right: unary_expr
B: [ 836,  845] PS: [ 65, 19] PE: [ 65, 28]                                           delegate: var_path
B: [ 836,  842] PS: [ 65, 19] PE: [ 65, 25]                                             root: identifier `height`
B: [ 842,  843] PS: [ 65, 25] PE: [ 65, 26]                                             [ `[`
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                             indexing: expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                               ternary_expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                 delegate: or_expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                   delegate: and_expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                     delegate: compare_expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                       delegate: add_expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                         delegate: mult_expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                           delegate: unary_expr
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                             delegate: var_path
B: [ 843,  844] PS: [ 65, 26] PE: [ 65, 27]                                                               root: identifier `i`
B: [ 844,  845] PS: [ 65, 27] PE: [ 65, 28]                                             ] `]`
B: [ 846,  849] PS: [ 65, 29] PE: [ 65, 32]                           for `for`
B: [ 850,  851] PS: [ 65, 33] PE: [ 65, 34]                           lefts: for_lefts
B: [ 850,  851] PS: [ 65, 33] PE: [ 65, 34]                             left: identifier `i`
B: [ 852,  854] PS: [ 65, 35] PE: [ 65, 37]                           in `in`
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                           right: expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                             ternary_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                               delegate: or_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                 delegate: and_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                   delegate: compare_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                     delegate: add_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                       delegate: mult_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                         delegate: unary_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                           delegate: indexed_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                             root: primary_expr
B: [ 855,  867] PS: [ 65, 38] PE: [ 65, 50]                                               call
B: [ 855,  860] PS: [ 65, 38] PE: [ 65, 43]                                                 func: identifier `range`
B: [ 860,  861] PS: [ 65, 43] PE: [ 65, 44]                                                 ( `(`
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                 arg: expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                   ternary_expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                     delegate: or_expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                       delegate: and_expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                         delegate: compare_expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                           delegate: add_expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                             delegate: mult_expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                               delegate: unary_expr
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                                 delegate: var_path
B: [ 861,  866] PS: [ 65, 44] PE: [ 65, 49]                                                                   root: identifier `width`
B: [ 866,  867] PS: [ 65, 49] PE: [ 65, 50]                                                 ) `)`
B: [ 867,  868] PS: [ 65, 50] PE: [ 65, 51]                           ] `]`
B: [ 870,  889] PS: [ 67,  0] PE: [ 67, 19]   assign
B: [ 870,  877] PS: [ 67,  0] PE: [ 67,  7]     left: var_path
B: [ 870,  877] PS: [ 67,  0] PE: [ 67,  7]       root: identifier `numbers`
B: [ 878,  879] PS: [ 67,  8] PE: [ 67,  9]     = `=`
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]     right: expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]       ternary_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]         delegate: or_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]           delegate: and_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]             delegate: compare_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]               delegate: add_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]                 delegate: mult_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]                   delegate: unary_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]                     delegate: indexed_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]                       root: primary_expr
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]                         literal
B: [ 880,  889] PS: [ 67, 10] PE: [ 67, 19]                           list
B: [ 880,  881] PS: [ 67, 10] PE: [ 67, 11]                             [ `[`
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                             list_entry: expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                               ternary_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                 delegate: or_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                   delegate: and_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                     delegate: compare_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                       delegate: add_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                         delegate: mult_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                           delegate: unary_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                             delegate: indexed_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                               root: primary_expr
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                                 literal
B: [ 881,  882] PS: [ 67, 11] PE: [ 67, 12]                                                   int `1`
B: [ 882,  883] PS: [ 67, 12] PE: [ 67, 13]                             , `,`
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                             list_entry: expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                               ternary_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                 delegate: or_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                   delegate: and_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                     delegate: compare_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                       delegate: add_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                         delegate: mult_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                           delegate: unary_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                             delegate: indexed_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                               root: primary_expr
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                                 literal
B: [ 884,  885] PS: [ 67, 14] PE: [ 67, 15]                                                   int `2`
B: [ 885,  886] PS: [ 67, 15] PE: [ 67, 16]                             , `,`
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                             list_entry: expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                               ternary_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                 delegate: or_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                   delegate: and_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                     delegate: compare_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                       delegate: add_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                         delegate: mult_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                           delegate: unary_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                             delegate: indexed_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                               root: primary_expr
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                                 literal
B: [ 887,  888] PS: [ 67, 17] PE: [ 67, 18]                                                   int `3`
B: [ 888,  889] PS: [ 67, 18] PE: [ 67, 19]                             ] `]`
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]   expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]     ternary_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]       delegate: or_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]         delegate: and_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]           delegate: compare_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]             delegate: add_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]               delegate: mult_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]                 delegate: unary_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]                   delegate: indexed_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]                     root: primary_expr
B: [ 890,  918] PS: [ 68,  0] PE: [ 68, 28]                       call
B: [ 890,  895] PS: [ 68,  0] PE: [ 68,  5]                         func: identifier `print`
B: [ 895,  896] PS: [ 68,  5] PE: [ 68,  6]                         ( `(`
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                         arg: expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                           ternary_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                             delegate: or_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                               delegate: and_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                                 delegate: compare_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                                   delegate: add_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                                     delegate: mult_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                                       delegate: unary_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                                         delegate: indexed_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                                           root: primary_expr
B: [ 896,  917] PS: [ 68,  6] PE: [ 68, 27]                                             call
B: [ 896,  900] PS: [ 68,  6] PE: [ 68, 10]                                               func: identifier `join`
B: [ 900,  901] PS: [ 68, 10] PE: [ 68, 11]                                               ( `(`
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                               arg: expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                 ternary_expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                   delegate: or_expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                     delegate: and_expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                       delegate: compare_expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                         delegate: add_expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                           delegate: mult_expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                             delegate: unary_expr
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                               delegate: var_path
B: [ 901,  908] PS: [ 68, 11] PE: [ 68, 18]                                                                 root: identifier `numbers`
B: [ 908,  909] PS: [ 68, 18] PE: [ 68, 19]                                               , `,`
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                               arg: expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                 ternary_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                   delegate: or_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                     delegate: and_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                       delegate: compare_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                         delegate: add_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                           delegate: mult_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                             delegate: unary_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                               delegate: indexed_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                                 root: primary_expr
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                                   literal
B: [ 910,  916] PS: [ 68, 20] PE: [ 68, 26]                                                                     string
B: [ 910,  911] PS: [ 68, 20] PE: [ 68, 21]                                                                       start: string_start `"`
B: [ 911,  915] PS: [ 68, 21] PE: [ 68, 25]                                                                       contents: string_contents
B: [ 911,  915] PS: [ 68, 21] PE: [ 68, 25]                                                                         content: string_content `... `
B: [ 915,  916] PS: [ 68, 25] PE: [ 68, 26]                                                                       end: string_end `"`
B: [ 916,  917] PS: [ 68, 26] PE: [ 68, 27]                                               ) `)`
B: [ 917,  918] PS: [ 68, 27] PE: [ 68, 28]                         ) `)`
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]   expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]     ternary_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]       delegate: or_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]         delegate: and_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]           delegate: compare_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]             delegate: add_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]               delegate: mult_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]                 delegate: unary_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]                   delegate: indexed_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]                     root: primary_expr
B: [ 919,  968] PS: [ 69,  0] PE: [ 69, 49]                       call
B: [ 919,  924] PS: [ 69,  0] PE: [ 69,  5]                         func: identifier `print`
B: [ 924,  925] PS: [ 69,  5] PE: [ 69,  6]                         ( `(`
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                         arg: expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                           ternary_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                             delegate: or_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                               delegate: and_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                                 delegate: compare_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                                   delegate: add_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                                     delegate: mult_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                                       delegate: unary_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                                         delegate: indexed_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                                           root: primary_expr
B: [ 925,  967] PS: [ 69,  6] PE: [ 69, 48]                                             call
B: [ 925,  929] PS: [ 69,  6] PE: [ 69, 10]                                               func: identifier `join`
B: [ 929,  930] PS: [ 69, 10] PE: [ 69, 11]                                               ( `(`
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                               arg: expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                 ternary_expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                   delegate: or_expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                     delegate: and_expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                       delegate: compare_expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                         delegate: add_expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                           delegate: mult_expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                             delegate: unary_expr
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                               delegate: var_path
B: [ 930,  937] PS: [ 69, 11] PE: [ 69, 18]                                                                 root: identifier `numbers`
B: [ 937,  938] PS: [ 69, 18] PE: [ 69, 19]                                               , `,`
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                               arg: expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                 ternary_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                   delegate: or_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                     delegate: and_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                       delegate: compare_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                         delegate: add_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                           delegate: mult_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                             delegate: unary_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                               delegate: indexed_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                                 root: primary_expr
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                                   literal
B: [ 939,  945] PS: [ 69, 20] PE: [ 69, 26]                                                                     string
B: [ 939,  940] PS: [ 69, 20] PE: [ 69, 21]                                                                       start: string_start `"`
B: [ 940,  944] PS: [ 69, 21] PE: [ 69, 25]                                                                       contents: string_contents
B: [ 940,  944] PS: [ 69, 21] PE: [ 69, 25]                                                                         content: string_content `... `
B: [ 944,  945] PS: [ 69, 25] PE: [ 69, 26]                                                                       end: string_end `"`
B: [ 945,  946] PS: [ 69, 26] PE: [ 69, 27]                                               , `,`
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                               arg: expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                 ternary_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                   delegate: or_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                     delegate: and_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                       delegate: compare_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                         delegate: add_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                           delegate: mult_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                             delegate: unary_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                               delegate: indexed_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                                 root: primary_expr
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                                   literal
B: [ 947,  966] PS: [ 69, 28] PE: [ 69, 47]                                                                     string
B: [ 947,  948] PS: [ 69, 28] PE: [ 69, 29]                                                                       start: string_start `"`
B: [ 948,  965] PS: [ 69, 29] PE: [ 69, 46]                                                                       contents: string_contents
B: [ 948,  965] PS: [ 69, 29] PE: [ 69, 46]                                                                         content: string_content `Okay I'll count. `
B: [ 965,  966] PS: [ 69, 46] PE: [ 69, 47]                                                                       end: string_end `"`
B: [ 966,  967] PS: [ 69, 47] PE: [ 69, 48]                                               ) `)`
B: [ 967,  968] PS: [ 69, 48] PE: [ 69, 49]                         ) `)`
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]   expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]     ternary_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]       delegate: or_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]         delegate: and_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]           delegate: compare_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]             delegate: add_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]               delegate: mult_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]                 delegate: unary_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]                   delegate: indexed_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]                     root: primary_expr
B: [ 969, 1023] PS: [ 70,  0] PE: [ 70, 54]                       call
B: [ 969,  974] PS: [ 70,  0] PE: [ 70,  5]                         func: identifier `print`
B: [ 974,  975] PS: [ 70,  5] PE: [ 70,  6]                         ( `(`
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                         arg: expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                           ternary_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                             delegate: or_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                               delegate: and_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                                 delegate: compare_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                                   delegate: add_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                                     delegate: mult_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                                       delegate: unary_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                                         delegate: indexed_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                                           root: primary_expr
B: [ 975, 1022] PS: [ 70,  6] PE: [ 70, 53]                                             call
B: [ 975,  979] PS: [ 70,  6] PE: [ 70, 10]                                               func: identifier `join`
B: [ 979,  980] PS: [ 70, 10] PE: [ 70, 11]                                               ( `(`
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                               arg: expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                 ternary_expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                   delegate: or_expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                     delegate: and_expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                       delegate: compare_expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                         delegate: add_expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                           delegate: mult_expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                             delegate: unary_expr
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                               delegate: var_path
B: [ 980,  987] PS: [ 70, 11] PE: [ 70, 18]                                                                 root: identifier `numbers`
B: [ 987,  988] PS: [ 70, 18] PE: [ 70, 19]                                               , `,`
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                               arg: expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                 ternary_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                   delegate: or_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                     delegate: and_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                       delegate: compare_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                         delegate: add_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                           delegate: mult_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                             delegate: unary_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                               delegate: indexed_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                                 root: primary_expr
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                                   literal
B: [ 989,  995] PS: [ 70, 20] PE: [ 70, 26]                                                                     string
B: [ 989,  990] PS: [ 70, 20] PE: [ 70, 21]                                                                       start: string_start `"`
B: [ 990,  994] PS: [ 70, 21] PE: [ 70, 25]                                                                       contents: string_contents
B: [ 990,  994] PS: [ 70, 21] PE: [ 70, 25]                                                                         content: string_content `... `
B: [ 994,  995] PS: [ 70, 25] PE: [ 70, 26]                                                                       end: string_end `"`
B: [ 995,  996] PS: [ 70, 26] PE: [ 70, 27]                                               , `,`
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                               arg: expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                 ternary_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                   delegate: or_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                     delegate: and_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                       delegate: compare_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                         delegate: add_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                           delegate: mult_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                             delegate: unary_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                               delegate: indexed_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                                 root: primary_expr
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                                   literal
B: [ 997, 1016] PS: [ 70, 28] PE: [ 70, 47]                                                                     string
B: [ 997,  998] PS: [ 70, 28] PE: [ 70, 29]                                                                       start: string_start `"`
B: [ 998, 1015] PS: [ 70, 29] PE: [ 70, 46]                                                                       contents: string_contents
B: [ 998, 1015] PS: [ 70, 29] PE: [ 70, 46]                                                                         content: string_content `Okay I'll count. `
B: [1015, 1016] PS: [ 70, 46] PE: [ 70, 47]                                                                       end: string_end `"`
B: [1016, 1017] PS: [ 70, 47] PE: [ 70, 48]                                               , `,`
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                               arg: expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                 ternary_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                   delegate: or_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                     delegate: and_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                       delegate: compare_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                         delegate: add_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                           delegate: mult_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                             delegate: unary_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                               delegate: indexed_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                                 root: primary_expr
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                                   literal
B: [1018, 1021] PS: [ 70, 49] PE: [ 70, 52]                                                                     string
B: [1018, 1019] PS: [ 70, 49] PE: [ 70, 50]                                                                       start: string_start `"`
B: [1019, 1020] PS: [ 70, 50] PE: [ 70, 51]                                                                       contents: string_contents
B: [1019, 1020] PS: [ 70, 50] PE: [ 70, 51]                                                                         content: string_content `!`
B: [1020, 1021] PS: [ 70, 51] PE: [ 70, 52]                                                                       end: string_end `"`
B: [1021, 1022] PS: [ 70, 52] PE: [ 70, 53]                                               ) `)`
B: [1022, 1023] PS: [ 70, 53] PE: [ 70, 54]                         ) `)`
B: [1025, 1036] PS: [ 72,  0] PE: [ 72, 11]   assign
B: [1025, 1026] PS: [ 72,  0] PE: [ 72,  1]     left: var_path
B: [1025, 1026] PS: [ 72,  0] PE: [ 72,  1]       root: identifier `a`
B: [1027, 1028] PS: [ 72,  2] PE: [ 72,  3]     = `=`
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]     right: expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]       ternary_expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]         delegate: or_expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]           delegate: and_expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]             delegate: compare_expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]               delegate: add_expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]                 delegate: mult_expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]                   delegate: unary_expr
B: [1029, 1036] PS: [ 72,  4] PE: [ 72, 11]                     delegate: var_path
B: [1029, 1033] PS: [ 72,  4] PE: [ 72,  8]                       root: identifier `nums`
B: [1033, 1034] PS: [ 72,  8] PE: [ 72,  9]                       [ `[`
B: [1034, 1035] PS: [ 72,  9] PE: [ 72, 10]                       indexing: slice
B: [1034, 1035] PS: [ 72,  9] PE: [ 72, 10]                         : `:`
B: [1035, 1036] PS: [ 72, 10] PE: [ 72, 11]                       ] `]`
B: [1037, 1049] PS: [ 73,  0] PE: [ 73, 12]   assign
B: [1037, 1038] PS: [ 73,  0] PE: [ 73,  1]     left: var_path
B: [1037, 1038] PS: [ 73,  0] PE: [ 73,  1]       root: identifier `a`
B: [1039, 1040] PS: [ 73,  2] PE: [ 73,  3]     = `=`
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]     right: expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]       ternary_expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]         delegate: or_expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]           delegate: and_expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]             delegate: compare_expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]               delegate: add_expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]                 delegate: mult_expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]                   delegate: unary_expr
B: [1041, 1049] PS: [ 73,  4] PE: [ 73, 12]                     delegate: var_path
B: [1041, 1045] PS: [ 73,  4] PE: [ 73,  8]                       root: identifier `nums`
B: [1045, 1046] PS: [ 73,  8] PE: [ 73,  9]                       [ `[`
B: [1046, 1048] PS: [ 73,  9] PE: [ 73, 11]                       indexing: slice
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                         start: expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                           ternary_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                             delegate: or_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                               delegate: and_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                 delegate: compare_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                   delegate: add_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                     delegate: mult_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                       delegate: unary_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                         delegate: indexed_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                           root: primary_expr
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                             literal
B: [1046, 1047] PS: [ 73,  9] PE: [ 73, 10]                                               int `1`
B: [1047, 1048] PS: [ 73, 10] PE: [ 73, 11]                         : `:`
B: [1048, 1049] PS: [ 73, 11] PE: [ 73, 12]                       ] `]`
B: [1050, 1063] PS: [ 74,  0] PE: [ 74, 13]   assign
B: [1050, 1051] PS: [ 74,  0] PE: [ 74,  1]     left: var_path
B: [1050, 1051] PS: [ 74,  0] PE: [ 74,  1]       root: identifier `a`
B: [1052, 1053] PS: [ 74,  2] PE: [ 74,  3]     = `=`
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]     right: expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]       ternary_expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]         delegate: or_expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]           delegate: and_expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]             delegate: compare_expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]               delegate: add_expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]                 delegate: mult_expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]                   delegate: unary_expr
B: [1054, 1063] PS: [ 74,  4] PE: [ 74, 13]                     delegate: var_path
B: [1054, 1058] PS: [ 74,  4] PE: [ 74,  8]                       root: identifier `nums`
B: [1058, 1059] PS: [ 74,  8] PE: [ 74,  9]                       [ `[`
B: [1059, 1062] PS: [ 74,  9] PE: [ 74, 12]                       indexing: slice
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                         start: expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                           ternary_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                             delegate: or_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                               delegate: and_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                 delegate: compare_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                   delegate: add_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                     delegate: mult_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                       delegate: unary_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                         delegate: indexed_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                           root: primary_expr
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                             literal
B: [1059, 1060] PS: [ 74,  9] PE: [ 74, 10]                                               int `1`
B: [1060, 1061] PS: [ 74, 10] PE: [ 74, 11]                         : `:`
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                         end: expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                           ternary_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                             delegate: or_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                               delegate: and_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                 delegate: compare_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                   delegate: add_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                     delegate: mult_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                       delegate: unary_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                         delegate: indexed_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                           root: primary_expr
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                             literal
B: [1061, 1062] PS: [ 74, 11] PE: [ 74, 12]                                               int `2`
B: [1062, 1063] PS: [ 74, 12] PE: [ 74, 13]                       ] `]`
B: [1064, 1076] PS: [ 75,  0] PE: [ 75, 12]   assign
B: [1064, 1065] PS: [ 75,  0] PE: [ 75,  1]     left: var_path
B: [1064, 1065] PS: [ 75,  0] PE: [ 75,  1]       root: identifier `a`
B: [1066, 1067] PS: [ 75,  2] PE: [ 75,  3]     = `=`
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]     right: expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]       ternary_expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]         delegate: or_expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]           delegate: and_expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]             delegate: compare_expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]               delegate: add_expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]                 delegate: mult_expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]                   delegate: unary_expr
B: [1068, 1076] PS: [ 75,  4] PE: [ 75, 12]                     delegate: var_path
B: [1068, 1072] PS: [ 75,  4] PE: [ 75,  8]                       root: identifier `nums`
B: [1072, 1073] PS: [ 75,  8] PE: [ 75,  9]                       [ `[`
B: [1073, 1075] PS: [ 75,  9] PE: [ 75, 11]                       indexing: slice
B: [1073, 1074] PS: [ 75,  9] PE: [ 75, 10]                         : `:`
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                         end: expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                           ternary_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                             delegate: or_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                               delegate: and_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                 delegate: compare_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                   delegate: add_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                     delegate: mult_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                       delegate: unary_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                         delegate: indexed_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                           root: primary_expr
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                             literal
B: [1074, 1075] PS: [ 75, 10] PE: [ 75, 11]                                               int `2`
B: [1075, 1076] PS: [ 75, 11] PE: [ 75, 12]                       ] `]`
B: [1078, 1133] PS: [ 77,  0] PE: [ 79,  1]   assign
B: [1078, 1088] PS: [ 77,  0] PE: [ 77, 10]     left: var_path
B: [1078, 1088] PS: [ 77,  0] PE: [ 77, 10]       root: identifier `my_headers`
B: [1089, 1090] PS: [ 77, 11] PE: [ 77, 12]     = `=`
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]     right: expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]       ternary_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]         delegate: or_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]           delegate: and_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]             delegate: compare_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]               delegate: add_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]                 delegate: mult_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]                   delegate: unary_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]                     delegate: indexed_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]                       root: primary_expr
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]                         literal
B: [1091, 1133] PS: [ 77, 13] PE: [ 79,  1]                           map
B: [1091, 1092] PS: [ 77, 13] PE: [ 77, 14]                             { `{`
B: [1097, 1130] PS: [ 78,  4] PE: [ 78, 37]                             map_entry: map_entry
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                               key: expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                 ternary_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                   delegate: or_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                     delegate: and_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                       delegate: compare_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                         delegate: add_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                           delegate: mult_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                             delegate: unary_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                               delegate: indexed_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                                 root: primary_expr
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                                   literal
B: [1097, 1112] PS: [ 78,  4] PE: [ 78, 19]                                                     string
B: [1097, 1098] PS: [ 78,  4] PE: [ 78,  5]                                                       start: string_start `"`
B: [1098, 1111] PS: [ 78,  5] PE: [ 78, 18]                                                       contents: string_contents
B: [1098, 1111] PS: [ 78,  5] PE: [ 78, 18]                                                         content: string_content `Authorization`
B: [1111, 1112] PS: [ 78, 18] PE: [ 78, 19]                                                       end: string_end `"`
B: [1112, 1113] PS: [ 78, 19] PE: [ 78, 20]                               : `:`
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                               value: expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                 ternary_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                   delegate: or_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                     delegate: and_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                       delegate: compare_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                         delegate: add_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                           delegate: mult_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                             delegate: unary_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                               delegate: indexed_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                                 root: primary_expr
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                                   literal
B: [1114, 1130] PS: [ 78, 21] PE: [ 78, 37]                                                     string
B: [1114, 1115] PS: [ 78, 21] PE: [ 78, 22]                                                       start: string_start `"`
B: [1115, 1129] PS: [ 78, 22] PE: [ 78, 36]                                                       contents: string_contents
B: [1115, 1122] PS: [ 78, 22] PE: [ 78, 29]                                                         content: string_content `Bearer `
B: [1122, 1129] PS: [ 78, 29] PE: [ 78, 36]                                                         interpolation: interpolation
B: [1122, 1123] PS: [ 78, 29] PE: [ 78, 30]                                                           { `{`
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                           expr: expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                             ternary_expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                               delegate: or_expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                                 delegate: and_expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                                   delegate: compare_expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                                     delegate: add_expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                                       delegate: mult_expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                                         delegate: unary_expr
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                                           delegate: var_path
B: [1123, 1128] PS: [ 78, 30] PE: [ 78, 35]                                                                             root: identifier `token`
B: [1128, 1129] PS: [ 78, 35] PE: [ 78, 36]                                                           } `}`
B: [1129, 1130] PS: [ 78, 36] PE: [ 78, 37]                                                       end: string_end `"`
B: [1130, 1131] PS: [ 78, 37] PE: [ 78, 38]                             , `,`
B: [1132, 1133] PS: [ 79,  0] PE: [ 79,  1]                             } `}`
B: [1134, 1185] PS: [ 80,  0] PE: [ 80, 51]   assign
B: [1134, 1142] PS: [ 80,  0] PE: [ 80,  8]     left: var_path
B: [1134, 1142] PS: [ 80,  0] PE: [ 80,  8]       root: identifier `response`
B: [1143, 1144] PS: [ 80,  9] PE: [ 80, 10]     = `=`
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]     right: expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]       ternary_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]         delegate: or_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]           delegate: and_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]             delegate: compare_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]               delegate: add_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]                 delegate: mult_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]                   delegate: unary_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]                     delegate: indexed_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]                       root: primary_expr
B: [1145, 1185] PS: [ 80, 11] PE: [ 80, 51]                         call
B: [1145, 1154] PS: [ 80, 11] PE: [ 80, 20]                           func: identifier `http_post`
B: [1154, 1155] PS: [ 80, 20] PE: [ 80, 21]                           ( `(`
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                           arg: expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                             ternary_expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                               delegate: or_expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                                 delegate: and_expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                                   delegate: compare_expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                                     delegate: add_expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                                       delegate: mult_expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                                         delegate: unary_expr
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                                           delegate: var_path
B: [1155, 1158] PS: [ 80, 21] PE: [ 80, 24]                                             root: identifier `url`
B: [1158, 1159] PS: [ 80, 24] PE: [ 80, 25]                           , `,`
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                           arg: expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                             ternary_expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                               delegate: or_expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                                 delegate: and_expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                                   delegate: compare_expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                                     delegate: add_expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                                       delegate: mult_expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                                         delegate: unary_expr
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                                           delegate: var_path
B: [1160, 1164] PS: [ 80, 26] PE: [ 80, 30]                                             root: identifier `body`
B: [1164, 1165] PS: [ 80, 30] PE: [ 80, 31]                           , `,`
B: [1166, 1184] PS: [ 80, 32] PE: [ 80, 50]                           named_arg: call_named_arg
B: [1166, 1173] PS: [ 80, 32] PE: [ 80, 39]                             name: identifier `headers`
B: [1173, 1174] PS: [ 80, 39] PE: [ 80, 40]                             = `=`
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                             value: expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                               ternary_expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                 delegate: or_expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                   delegate: and_expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                     delegate: compare_expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                       delegate: add_expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                         delegate: mult_expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                           delegate: unary_expr
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                             delegate: var_path
B: [1174, 1184] PS: [ 80, 40] PE: [ 80, 50]                                               root: identifier `my_headers`
B: [1184, 1185] PS: [ 80, 50] PE: [ 80, 51]                           ) `)`
B: [1187, 1255] PS: [ 82,  0] PE: [ 86,  3]   assign
B: [1187, 1191] PS: [ 82,  0] PE: [ 82,  4]     left: var_path
B: [1187, 1191] PS: [ 82,  0] PE: [ 82,  4]       root: identifier `text`
B: [1192, 1193] PS: [ 82,  5] PE: [ 82,  6]     = `=`
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]     right: expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]       ternary_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]         delegate: or_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]           delegate: and_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]             delegate: compare_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]               delegate: add_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]                 delegate: mult_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]                   delegate: unary_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]                     delegate: indexed_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]                       root: primary_expr
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]                         literal
B: [1194, 1255] PS: [ 82,  7] PE: [ 86,  3]                           string
B: [1194, 1198] PS: [ 82,  7] PE: [ 83,  0]                             start: string_start `"""\n`
B: [1198, 1251] PS: [ 83,  0] PE: [ 85, 26]                             contents: string_contents
B: [1198, 1208] PS: [ 83,  0] PE: [ 83, 10]                               content: string_content `This is an`
B: [1208, 1209] PS: [ 83, 10] PE: [ 84,  0]                               content: string_content `\n`
B: [1209, 1224] PS: [ 84,  0] PE: [ 84, 15]                               content: string_content `example of text`
B: [1224, 1225] PS: [ 84, 15] PE: [ 85,  0]                               content: string_content `\n`
B: [1225, 1251] PS: [ 85,  0] PE: [ 85, 26]                               content: string_content `that "may contain quotes"!`
B: [1251, 1255] PS: [ 85, 26] PE: [ 86,  3]                             end: string_end `\n"""`
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]   expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]     ternary_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]       delegate: or_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]         delegate: and_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]           delegate: compare_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]             delegate: add_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]               delegate: mult_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]                 delegate: unary_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]                   delegate: indexed_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]                     root: primary_expr
B: [1256, 1267] PS: [ 87,  0] PE: [ 87, 11]                       call
B: [1256, 1261] PS: [ 87,  0] PE: [ 87,  5]                         func: identifier `print`
B: [1261, 1262] PS: [ 87,  5] PE: [ 87,  6]                         ( `(`
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                         arg: expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                           ternary_expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                             delegate: or_expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                               delegate: and_expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                                 delegate: compare_expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                                   delegate: add_expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                                     delegate: mult_expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                                       delegate: unary_expr
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                                         delegate: var_path
B: [1262, 1266] PS: [ 87,  6] PE: [ 87, 10]                                           root: identifier `text`
B: [1266, 1267] PS: [ 87, 10] PE: [ 87, 11]                         ) `)`
B: [1269, 1292] PS: [ 89,  0] PE: [ 89, 23]   assign
B: [1269, 1273] PS: [ 89,  0] PE: [ 89,  4]     left: var_path
B: [1269, 1273] PS: [ 89,  0] PE: [ 89,  4]       root: identifier `text`
B: [1274, 1275] PS: [ 89,  5] PE: [ 89,  6]     = `=`
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]     right: expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]       ternary_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]         delegate: or_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]           delegate: and_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]             delegate: compare_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]               delegate: add_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]                 delegate: mult_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]                   delegate: unary_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]                     delegate: indexed_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]                       root: primary_expr
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]                         literal
B: [1276, 1292] PS: [ 89,  7] PE: [ 89, 23]                           string
B: [1276, 1278] PS: [ 89,  7] PE: [ 89,  9]                             start: string_start `r"`
B: [1278, 1291] PS: [ 89,  9] PE: [ 89, 22]                             contents: string_contents
B: [1278, 1291] PS: [ 89,  9] PE: [ 89, 22]                               content: string_content `Hello\n{name}`
B: [1291, 1292] PS: [ 89, 22] PE: [ 89, 23]                             end: string_end `"`
B: [1293, 1316] PS: [ 90,  0] PE: [ 90, 23]   assign
B: [1293, 1297] PS: [ 90,  0] PE: [ 90,  4]     left: var_path
B: [1293, 1297] PS: [ 90,  0] PE: [ 90,  4]       root: identifier `text`
B: [1298, 1299] PS: [ 90,  5] PE: [ 90,  6]     = `=`
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]     right: expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]       ternary_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]         delegate: or_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]           delegate: and_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]             delegate: compare_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]               delegate: add_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]                 delegate: mult_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]                   delegate: unary_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]                     delegate: indexed_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]                       root: primary_expr
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]                         literal
B: [1300, 1316] PS: [ 90,  7] PE: [ 90, 23]                           string
B: [1300, 1302] PS: [ 90,  7] PE: [ 90,  9]                             start: string_start `r'`
B: [1302, 1315] PS: [ 90,  9] PE: [ 90, 22]                             contents: string_contents
B: [1302, 1315] PS: [ 90,  9] PE: [ 90, 22]                               content: string_content `Hello\n{name}`
B: [1315, 1316] PS: [ 90, 22] PE: [ 90, 23]                             end: string_end `'`
B: [1317, 1340] PS: [ 91,  0] PE: [ 91, 23]   assign
B: [1317, 1321] PS: [ 91,  0] PE: [ 91,  4]     left: var_path
B: [1317, 1321] PS: [ 91,  0] PE: [ 91,  4]       root: identifier `text`
B: [1322, 1323] PS: [ 91,  5] PE: [ 91,  6]     = `=`
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]     right: expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]       ternary_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]         delegate: or_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]           delegate: and_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]             delegate: compare_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]               delegate: add_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]                 delegate: mult_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]                   delegate: unary_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]                     delegate: indexed_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]                       root: primary_expr
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]                         literal
B: [1324, 1340] PS: [ 91,  7] PE: [ 91, 23]                           string
B: [1324, 1326] PS: [ 91,  7] PE: [ 91,  9]                             start: string_start `r``
B: [1326, 1339] PS: [ 91,  9] PE: [ 91, 22]                             contents: string_contents
B: [1326, 1339] PS: [ 91,  9] PE: [ 91, 22]                               content: string_content `Hello\n{name}`
B: [1339, 1340] PS: [ 91, 22] PE: [ 91, 23]                             end: string_end ```
B: [1342, 1410] PS: [ 93,  0] PE: [ 93, 68]   assign
B: [1342, 1345] PS: [ 93,  0] PE: [ 93,  3]     left: var_path
B: [1342, 1345] PS: [ 93,  0] PE: [ 93,  3]       root: identifier `url`
B: [1345, 1346] PS: [ 93,  3] PE: [ 93,  4]     , `,`
B: [1347, 1351] PS: [ 93,  5] PE: [ 93,  9]     left: var_path
B: [1347, 1351] PS: [ 93,  5] PE: [ 93,  9]       root: identifier `name`
B: [1352, 1353] PS: [ 93, 10] PE: [ 93, 11]     = `=`
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]     right: expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]       ternary_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]         delegate: or_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]           delegate: and_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]             delegate: compare_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]               delegate: add_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]                 delegate: mult_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]                   delegate: unary_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]                     delegate: indexed_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]                       root: primary_expr
B: [1354, 1410] PS: [ 93, 12] PE: [ 93, 68]                         call
B: [1354, 1372] PS: [ 93, 12] PE: [ 93, 30]                           func: identifier `pick_from_resource`
B: [1372, 1373] PS: [ 93, 30] PE: [ 93, 31]                           ( `(`
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                           arg: expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                             ternary_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                               delegate: or_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                 delegate: and_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                   delegate: compare_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                     delegate: add_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                       delegate: mult_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                         delegate: unary_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                           delegate: indexed_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                             root: primary_expr
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                               literal
B: [1373, 1400] PS: [ 93, 31] PE: [ 93, 58]                                                 string
B: [1373, 1374] PS: [ 93, 31] PE: [ 93, 32]                                                   start: string_start `"`
B: [1374, 1399] PS: [ 93, 32] PE: [ 93, 57]                                                   contents: string_contents
B: [1374, 1399] PS: [ 93, 32] PE: [ 93, 57]                                                     content: string_content `./resources/websites.json`
B: [1399, 1400] PS: [ 93, 57] PE: [ 93, 58]                                                   end: string_end `"`
B: [1400, 1401] PS: [ 93, 58] PE: [ 93, 59]                           , `,`
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                           arg: expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                             ternary_expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                               delegate: or_expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                                 delegate: and_expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                                   delegate: compare_expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                                     delegate: add_expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                                       delegate: mult_expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                                         delegate: unary_expr
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                                           delegate: var_path
B: [1402, 1409] PS: [ 93, 60] PE: [ 93, 67]                                             root: identifier `website`
B: [1409, 1410] PS: [ 93, 67] PE: [ 93, 68]                           ) `)`
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]   expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]     ternary_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]       delegate: or_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]         delegate: and_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]           delegate: compare_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]             delegate: add_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]               delegate: mult_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]                 delegate: unary_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]                   delegate: indexed_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]                     root: primary_expr
B: [1411, 1444] PS: [ 94,  0] PE: [ 94, 33]                       call
B: [1411, 1416] PS: [ 94,  0] PE: [ 94,  5]                         func: identifier `print`
B: [1416, 1417] PS: [ 94,  5] PE: [ 94,  6]                         ( `(`
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                         arg: expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                           ternary_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                             delegate: or_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                               delegate: and_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                 delegate: compare_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                   delegate: add_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                     delegate: mult_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                       delegate: unary_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                         delegate: indexed_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                           root: primary_expr
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                             literal
B: [1417, 1443] PS: [ 94,  6] PE: [ 94, 32]                                               string
B: [1417, 1418] PS: [ 94,  6] PE: [ 94,  7]                                                 start: string_start `"`
B: [1418, 1442] PS: [ 94,  7] PE: [ 94, 31]                                                 contents: string_contents
B: [1418, 1423] PS: [ 94,  7] PE: [ 94, 12]                                                   content: string_content `url: `
B: [1423, 1428] PS: [ 94, 12] PE: [ 94, 17]                                                   interpolation: interpolation
B: [1423, 1424] PS: [ 94, 12] PE: [ 94, 13]                                                     { `{`
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                     expr: expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                       ternary_expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                         delegate: or_expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                           delegate: and_expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                             delegate: compare_expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                               delegate: add_expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                                 delegate: mult_expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                                   delegate: unary_expr
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                                     delegate: var_path
B: [1424, 1427] PS: [ 94, 13] PE: [ 94, 16]                                                                       root: identifier `url`
B: [1427, 1428] PS: [ 94, 16] PE: [ 94, 17]                                                     } `}`
B: [1428, 1436] PS: [ 94, 17] PE: [ 94, 25]                                                   content: string_content `, name: `
B: [1436, 1442] PS: [ 94, 25] PE: [ 94, 31]                                                   interpolation: interpolation
B: [1436, 1437] PS: [ 94, 25] PE: [ 94, 26]                                                     { `{`
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                     expr: expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                       ternary_expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                         delegate: or_expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                           delegate: and_expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                             delegate: compare_expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                               delegate: add_expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                                 delegate: mult_expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                                   delegate: unary_expr
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                                     delegate: var_path
B: [1437, 1441] PS: [ 94, 26] PE: [ 94, 30]                                                                       root: identifier `name`
B: [1441, 1442] PS: [ 94, 30] PE: [ 94, 31]                                                     } `}`
B: [1442, 1443] PS: [ 94, 31] PE: [ 94, 32]                                                 end: string_end `"`
B: [1443, 1444] PS: [ 94, 32] PE: [ 94, 33]                         ) `)`
B: [1446, 1452] PS: [ 96,  0] PE: [ 96,  6]   shell_stmt
B: [1446, 1452] PS: [ 96,  0] PE: [ 96,  6]     shell_cmd: critical_shell_cmd
B: [1446, 1448] PS: [ 96,  0] PE: [ 96,  2]       $! `$!`
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]       command: expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]         ternary_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]           delegate: or_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]             delegate: and_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]               delegate: compare_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]                 delegate: add_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]                   delegate: mult_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]                     delegate: unary_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]                       delegate: indexed_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]                         root: primary_expr
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]                           literal
B: [1448, 1452] PS: [ 96,  2] PE: [ 96,  6]                             string
B: [1448, 1449] PS: [ 96,  2] PE: [ 96,  3]                               start: string_start ```
B: [1449, 1451] PS: [ 96,  3] PE: [ 96,  5]                               contents: string_contents
B: [1449, 1451] PS: [ 96,  3] PE: [ 96,  5]                                 content: string_content `ls`
B: [1451, 1452] PS: [ 96,  5] PE: [ 96,  6]                               end: string_end ```
B: [1454, 1472] PS: [ 98,  0] PE: [ 98, 18]   assign
B: [1454, 1457] PS: [ 98,  0] PE: [ 98,  3]     left: var_path
B: [1454, 1457] PS: [ 98,  0] PE: [ 98,  3]       root: identifier `cmd`
B: [1458, 1459] PS: [ 98,  4] PE: [ 98,  5]     = `=`
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]     right: expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]       ternary_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]         delegate: or_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]           delegate: and_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]             delegate: compare_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]               delegate: add_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]                 delegate: mult_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]                   delegate: unary_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]                     delegate: indexed_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]                       root: primary_expr
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]                         literal
B: [1460, 1472] PS: [ 98,  6] PE: [ 98, 18]                           string
B: [1460, 1461] PS: [ 98,  6] PE: [ 98,  7]                             start: string_start ```
B: [1461, 1471] PS: [ 98,  7] PE: [ 98, 17]                             contents: string_contents
B: [1461, 1466] PS: [ 98,  7] PE: [ 98, 12]                               content: string_content `curl `
B: [1466, 1471] PS: [ 98, 12] PE: [ 98, 17]                               interpolation: interpolation
B: [1466, 1467] PS: [ 98, 12] PE: [ 98, 13]                                 { `{`
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                 expr: expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                   ternary_expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                     delegate: or_expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                       delegate: and_expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                         delegate: compare_expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                           delegate: add_expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                             delegate: mult_expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                               delegate: unary_expr
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                                 delegate: var_path
B: [1467, 1470] PS: [ 98, 13] PE: [ 98, 16]                                                   root: identifier `url`
B: [1470, 1471] PS: [ 98, 16] PE: [ 98, 17]                                 } `}`
B: [1471, 1472] PS: [ 98, 17] PE: [ 98, 18]                             end: string_end ```
B: [1473, 1516] PS: [ 99,  0] PE: [101, 32]   shell_stmt
B: [1473, 1516] PS: [ 99,  0] PE: [101, 32]     shell_cmd: checked_shell_cmd
B: [1473, 1474] PS: [ 99,  0] PE: [ 99,  1]       $ `$`
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]       command: expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]         ternary_expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]           delegate: or_expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]             delegate: and_expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]               delegate: compare_expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]                 delegate: add_expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]                   delegate: mult_expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]                     delegate: unary_expr
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]                       delegate: var_path
B: [1474, 1477] PS: [ 99,  1] PE: [ 99,  4]                         root: identifier `cmd`
B: [1478, 1482] PS: [100,  0] PE: [100,  4]       response: fail `fail`
B: [1482, 1483] PS: [100,  4] PE: [100,  5]       : `:`
B: [1488, 1516] PS: [101,  4] PE: [101, 32]       stmt: expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]         ternary_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]           delegate: or_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]             delegate: and_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]               delegate: compare_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]                 delegate: add_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]                   delegate: mult_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]                     delegate: unary_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]                       delegate: indexed_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]                         root: primary_expr
B: [1488, 1516] PS: [101,  4] PE: [101, 32]                           call
B: [1488, 1493] PS: [101,  4] PE: [101,  9]                             func: identifier `print`
B: [1493, 1494] PS: [101,  9] PE: [101, 10]                             ( `(`
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                             arg: expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                               ternary_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                 delegate: or_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                   delegate: and_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                     delegate: compare_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                       delegate: add_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                         delegate: mult_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                           delegate: unary_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                             delegate: indexed_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                               root: primary_expr
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                                 literal
B: [1494, 1515] PS: [101, 10] PE: [101, 31]                                                   string
B: [1494, 1495] PS: [101, 10] PE: [101, 11]                                                     start: string_start `"`
B: [1495, 1514] PS: [101, 11] PE: [101, 30]                                                     contents: string_contents
B: [1495, 1514] PS: [101, 11] PE: [101, 30]                                                       content: string_content `Oh no, curl failed!`
B: [1514, 1515] PS: [101, 30] PE: [101, 31]                                                     end: string_end `"`
B: [1515, 1516] PS: [101, 31] PE: [101, 32]                             ) `)`
B: [1518, 1564] PS: [103,  0] PE: [105, 32]   shell_stmt
B: [1518, 1564] PS: [103,  0] PE: [105, 32]     shell_cmd: checked_shell_cmd
B: [1518, 1519] PS: [103,  0] PE: [103,  1]       $ `$`
B: [1519, 1522] PS: [103,  1] PE: [103,  4]       command: expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]         ternary_expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]           delegate: or_expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]             delegate: and_expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]               delegate: compare_expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]                 delegate: add_expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]                   delegate: mult_expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]                     delegate: unary_expr
B: [1519, 1522] PS: [103,  1] PE: [103,  4]                       delegate: var_path
B: [1519, 1522] PS: [103,  1] PE: [103,  4]                         root: identifier `cmd`
B: [1523, 1530] PS: [104,  0] PE: [104,  7]       response: recover `recover`
B: [1530, 1531] PS: [104,  7] PE: [104,  8]       : `:`
B: [1536, 1564] PS: [105,  4] PE: [105, 32]       stmt: expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]         ternary_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]           delegate: or_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]             delegate: and_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]               delegate: compare_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]                 delegate: add_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]                   delegate: mult_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]                     delegate: unary_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]                       delegate: indexed_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]                         root: primary_expr
B: [1536, 1564] PS: [105,  4] PE: [105, 32]                           call
B: [1536, 1541] PS: [105,  4] PE: [105,  9]                             func: identifier `print`
B: [1541, 1542] PS: [105,  9] PE: [105, 10]                             ( `(`
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                             arg: expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                               ternary_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                 delegate: or_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                   delegate: and_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                     delegate: compare_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                       delegate: add_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                         delegate: mult_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                           delegate: unary_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                             delegate: indexed_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                               root: primary_expr
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                                 literal
B: [1542, 1563] PS: [105, 10] PE: [105, 31]                                                   string
B: [1542, 1543] PS: [105, 10] PE: [105, 11]                                                     start: string_start `"`
B: [1543, 1562] PS: [105, 11] PE: [105, 30]                                                     contents: string_contents
B: [1543, 1562] PS: [105, 11] PE: [105, 30]                                                       content: string_content `Oh no, curl failed!`
B: [1562, 1563] PS: [105, 30] PE: [105, 31]                                                     end: string_end `"`
B: [1563, 1564] PS: [105, 31] PE: [105, 32]                             ) `)`
B: [1566, 1578] PS: [107,  0] PE: [107, 12]   shell_stmt
B: [1566, 1578] PS: [107,  0] PE: [107, 12]     shell_cmd: unsafe_shell_cmd
B: [1566, 1572] PS: [107,  0] PE: [107,  6]       unsafe_mod: unsafe `unsafe`
B: [1573, 1574] PS: [107,  7] PE: [107,  8]       $ `$`
B: [1574, 1578] PS: [107,  8] PE: [107, 12]       command: expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]         ternary_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]           delegate: or_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]             delegate: and_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]               delegate: compare_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]                 delegate: add_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]                   delegate: mult_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]                     delegate: unary_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]                       delegate: indexed_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]                         root: primary_expr
B: [1574, 1578] PS: [107,  8] PE: [107, 12]                           literal
B: [1574, 1578] PS: [107,  8] PE: [107, 12]                             string
B: [1574, 1575] PS: [107,  8] PE: [107,  9]                               start: string_start ```
B: [1575, 1577] PS: [107,  9] PE: [107, 11]                               contents: string_contents
B: [1575, 1577] PS: [107,  9] PE: [107, 11]                                 content: string_content `ls`
B: [1577, 1578] PS: [107, 11] PE: [107, 12]                               end: string_end ```
B: [1580, 1592] PS: [109,  0] PE: [109, 12]   shell_stmt
B: [1580, 1584] PS: [109,  0] PE: [109,  4]     left: var_path
B: [1580, 1584] PS: [109,  0] PE: [109,  4]       root: identifier `code`
B: [1585, 1586] PS: [109,  5] PE: [109,  6]     = `=`
B: [1587, 1592] PS: [109,  7] PE: [109, 12]     shell_cmd: critical_shell_cmd
B: [1587, 1589] PS: [109,  7] PE: [109,  9]       $! `$!`
B: [1589, 1592] PS: [109,  9] PE: [109, 12]       command: expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]         ternary_expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]           delegate: or_expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]             delegate: and_expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]               delegate: compare_expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]                 delegate: add_expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]                   delegate: mult_expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]                     delegate: unary_expr
B: [1589, 1592] PS: [109,  9] PE: [109, 12]                       delegate: var_path
B: [1589, 1592] PS: [109,  9] PE: [109, 12]                         root: identifier `cmd`
B: [1594, 1614] PS: [111,  0] PE: [111, 20]   shell_stmt
B: [1594, 1598] PS: [111,  0] PE: [111,  4]     left: var_path
B: [1594, 1598] PS: [111,  0] PE: [111,  4]       root: identifier `code`
B: [1598, 1599] PS: [111,  4] PE: [111,  5]     , `,`
B: [1600, 1606] PS: [111,  6] PE: [111, 12]     left: var_path
B: [1600, 1606] PS: [111,  6] PE: [111, 12]       root: identifier `stdout`
B: [1607, 1608] PS: [111, 13] PE: [111, 14]     = `=`
B: [1609, 1614] PS: [111, 15] PE: [111, 20]     shell_cmd: critical_shell_cmd
B: [1609, 1611] PS: [111, 15] PE: [111, 17]       $! `$!`
B: [1611, 1614] PS: [111, 17] PE: [111, 20]       command: expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]         ternary_expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]           delegate: or_expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]             delegate: and_expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]               delegate: compare_expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]                 delegate: add_expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]                   delegate: mult_expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]                     delegate: unary_expr
B: [1611, 1614] PS: [111, 17] PE: [111, 20]                       delegate: var_path
B: [1611, 1614] PS: [111, 17] PE: [111, 20]                         root: identifier `cmd`
B: [1616, 1644] PS: [113,  0] PE: [113, 28]   shell_stmt
B: [1616, 1620] PS: [113,  0] PE: [113,  4]     left: var_path
B: [1616, 1620] PS: [113,  0] PE: [113,  4]       root: identifier `code`
B: [1620, 1621] PS: [113,  4] PE: [113,  5]     , `,`
B: [1622, 1628] PS: [113,  6] PE: [113, 12]     left: var_path
B: [1622, 1628] PS: [113,  6] PE: [113, 12]       root: identifier `stdout`
B: [1628, 1629] PS: [113, 12] PE: [113, 13]     , `,`
B: [1630, 1636] PS: [113, 14] PE: [113, 20]     left: var_path
B: [1630, 1636] PS: [113, 14] PE: [113, 20]       root: identifier `stderr`
B: [1637, 1638] PS: [113, 21] PE: [113, 22]     = `=`
B: [1639, 1644] PS: [113, 23] PE: [113, 28]     shell_cmd: critical_shell_cmd
B: [1639, 1641] PS: [113, 23] PE: [113, 25]       $! `$!`
B: [1641, 1644] PS: [113, 25] PE: [113, 28]       command: expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]         ternary_expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]           delegate: or_expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]             delegate: and_expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]               delegate: compare_expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]                 delegate: add_expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]                   delegate: mult_expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]                     delegate: unary_expr
B: [1641, 1644] PS: [113, 25] PE: [113, 28]                       delegate: var_path
B: [1641, 1644] PS: [113, 25] PE: [113, 28]                         root: identifier `cmd`
B: [1646, 1666] PS: [115,  0] PE: [115, 20]   shell_stmt
B: [1646, 1647] PS: [115,  0] PE: [115,  1]     left: var_path
B: [1646, 1647] PS: [115,  0] PE: [115,  1]       root: identifier `_`
B: [1647, 1648] PS: [115,  1] PE: [115,  2]     , `,`
B: [1649, 1650] PS: [115,  3] PE: [115,  4]     left: var_path
B: [1649, 1650] PS: [115,  3] PE: [115,  4]       root: identifier `_`
B: [1650, 1651] PS: [115,  4] PE: [115,  5]     , `,`
B: [1652, 1658] PS: [115,  6] PE: [115, 12]     left: var_path
B: [1652, 1658] PS: [115,  6] PE: [115, 12]       root: identifier `stderr`
B: [1659, 1660] PS: [115, 13] PE: [115, 14]     = `=`
B: [1661, 1666] PS: [115, 15] PE: [115, 20]     shell_cmd: critical_shell_cmd
B: [1661, 1663] PS: [115, 15] PE: [115, 17]       $! `$!`
B: [1663, 1666] PS: [115, 17] PE: [115, 20]       command: expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]         ternary_expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]           delegate: or_expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]             delegate: and_expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]               delegate: compare_expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]                 delegate: add_expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]                   delegate: mult_expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]                     delegate: unary_expr
B: [1663, 1666] PS: [115, 17] PE: [115, 20]                       delegate: var_path
B: [1663, 1666] PS: [115, 17] PE: [115, 20]                         root: identifier `cmd`
B: [1668, 1698] PS: [117,  0] PE: [117, 30]   shell_stmt
B: [1668, 1698] PS: [117,  0] PE: [117, 30]     shell_cmd: critical_shell_cmd
B: [1668, 1673] PS: [117,  0] PE: [117,  5]       quiet_mod: quiet `quiet`
B: [1674, 1676] PS: [117,  6] PE: [117,  8]       $! `$!`
B: [1676, 1698] PS: [117,  8] PE: [117, 30]       command: expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]         ternary_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]           delegate: or_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]             delegate: and_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]               delegate: compare_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]                 delegate: add_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]                   delegate: mult_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]                     delegate: unary_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]                       delegate: indexed_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]                         root: primary_expr
B: [1676, 1698] PS: [117,  8] PE: [117, 30]                           literal
B: [1676, 1698] PS: [117,  8] PE: [117, 30]                             string
B: [1676, 1677] PS: [117,  8] PE: [117,  9]                               start: string_start ```
B: [1677, 1697] PS: [117,  9] PE: [117, 29]                               contents: string_contents
B: [1677, 1683] PS: [117,  9] PE: [117, 15]                                 content: string_content `touch `
B: [1683, 1693] PS: [117, 15] PE: [117, 25]                                 interpolation: interpolation
B: [1683, 1684] PS: [117, 15] PE: [117, 16]                                   { `{`
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                   expr: expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                     ternary_expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                       delegate: or_expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                         delegate: and_expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                           delegate: compare_expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                             delegate: add_expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                               delegate: mult_expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                                 delegate: unary_expr
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                                   delegate: var_path
B: [1684, 1692] PS: [117, 16] PE: [117, 24]                                                     root: identifier `filename`
B: [1692, 1693] PS: [117, 24] PE: [117, 25]                                   } `}`
B: [1693, 1697] PS: [117, 25] PE: [117, 29]                                 content: string_content `.txt`
B: [1697, 1698] PS: [117, 29] PE: [117, 30]                               end: string_end ```
B: [1700, 1736] PS: [119,  0] PE: [119, 36]   shell_stmt
B: [1700, 1736] PS: [119,  0] PE: [119, 36]     shell_cmd: unsafe_shell_cmd
B: [1700, 1706] PS: [119,  0] PE: [119,  6]       unsafe_mod: unsafe `unsafe`
B: [1707, 1712] PS: [119,  7] PE: [119, 12]       quiet_mod: quiet `quiet`
B: [1713, 1714] PS: [119, 13] PE: [119, 14]       $ `$`
B: [1714, 1736] PS: [119, 14] PE: [119, 36]       command: expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]         ternary_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]           delegate: or_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]             delegate: and_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]               delegate: compare_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]                 delegate: add_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]                   delegate: mult_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]                     delegate: unary_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]                       delegate: indexed_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]                         root: primary_expr
B: [1714, 1736] PS: [119, 14] PE: [119, 36]                           literal
B: [1714, 1736] PS: [119, 14] PE: [119, 36]                             string
B: [1714, 1715] PS: [119, 14] PE: [119, 15]                               start: string_start ```
B: [1715, 1735] PS: [119, 15] PE: [119, 35]                               contents: string_contents
B: [1715, 1721] PS: [119, 15] PE: [119, 21]                                 content: string_content `touch `
B: [1721, 1731] PS: [119, 21] PE: [119, 31]                                 interpolation: interpolation
B: [1721, 1722] PS: [119, 21] PE: [119, 22]                                   { `{`
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                   expr: expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                     ternary_expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                       delegate: or_expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                         delegate: and_expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                           delegate: compare_expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                             delegate: add_expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                               delegate: mult_expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                                 delegate: unary_expr
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                                   delegate: var_path
B: [1722, 1730] PS: [119, 22] PE: [119, 30]                                                     root: identifier `filename`
B: [1730, 1731] PS: [119, 30] PE: [119, 31]                                   } `}`
B: [1731, 1735] PS: [119, 31] PE: [119, 35]                                 content: string_content `.txt`
B: [1735, 1736] PS: [119, 35] PE: [119, 36]                               end: string_end ```
B: [1737, 1773] PS: [120,  0] PE: [120, 36]   shell_stmt
B: [1737, 1773] PS: [120,  0] PE: [120, 36]     shell_cmd: unsafe_shell_cmd
B: [1737, 1742] PS: [120,  0] PE: [120,  5]       quiet_mod: quiet `quiet`
B: [1743, 1749] PS: [120,  6] PE: [120, 12]       unsafe_mod: unsafe `unsafe`
B: [1750, 1751] PS: [120, 13] PE: [120, 14]       $ `$`
B: [1751, 1773] PS: [120, 14] PE: [120, 36]       command: expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]         ternary_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]           delegate: or_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]             delegate: and_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]               delegate: compare_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]                 delegate: add_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]                   delegate: mult_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]                     delegate: unary_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]                       delegate: indexed_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]                         root: primary_expr
B: [1751, 1773] PS: [120, 14] PE: [120, 36]                           literal
B: [1751, 1773] PS: [120, 14] PE: [120, 36]                             string
B: [1751, 1752] PS: [120, 14] PE: [120, 15]                               start: string_start ```
B: [1752, 1772] PS: [120, 15] PE: [120, 35]                               contents: string_contents
B: [1752, 1758] PS: [120, 15] PE: [120, 21]                                 content: string_content `touch `
B: [1758, 1768] PS: [120, 21] PE: [120, 31]                                 interpolation: interpolation
B: [1758, 1759] PS: [120, 21] PE: [120, 22]                                   { `{`
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                   expr: expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                     ternary_expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                       delegate: or_expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                         delegate: and_expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                           delegate: compare_expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                             delegate: add_expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                               delegate: mult_expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                                 delegate: unary_expr
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                                   delegate: var_path
B: [1759, 1767] PS: [120, 22] PE: [120, 30]                                                     root: identifier `filename`
B: [1767, 1768] PS: [120, 30] PE: [120, 31]                                   } `}`
B: [1768, 1772] PS: [120, 31] PE: [120, 35]                                 content: string_content `.txt`
B: [1772, 1773] PS: [120, 35] PE: [120, 36]                               end: string_end ```
B: [1775, 1841] PS: [122,  0] PE: [124, 24]   defer_block
B: [1775, 1780] PS: [122,  0] PE: [122,  5]     keyword: defer `defer`
B: [1780, 1781] PS: [122,  5] PE: [122,  6]     : `:`
B: [1786, 1816] PS: [123,  4] PE: [123, 34]     stmt: shell_stmt
B: [1786, 1816] PS: [123,  4] PE: [123, 34]       shell_cmd: critical_shell_cmd
B: [1786, 1788] PS: [123,  4] PE: [123,  6]         $! `$!`
B: [1788, 1816] PS: [123,  6] PE: [123, 34]         command: expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]           ternary_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]             delegate: or_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]               delegate: and_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                 delegate: compare_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                   delegate: add_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                     delegate: mult_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                       delegate: unary_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                         delegate: indexed_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                           root: primary_expr
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                             literal
B: [1788, 1816] PS: [123,  6] PE: [123, 34]                               string
B: [1788, 1789] PS: [123,  6] PE: [123,  7]                                 start: string_start ```
B: [1789, 1815] PS: [123,  7] PE: [123, 33]                                 contents: string_contents
B: [1789, 1815] PS: [123,  7] PE: [123, 33]                                   content: string_content `mv notes-tmp.txt notes.txt`
B: [1815, 1816] PS: [123, 33] PE: [123, 34]                                 end: string_end ```
B: [1821, 1841] PS: [124,  4] PE: [124, 24]     stmt: expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]       ternary_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]         delegate: or_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]           delegate: and_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]             delegate: compare_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]               delegate: add_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]                 delegate: mult_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]                   delegate: unary_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]                     delegate: indexed_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]                       root: primary_expr
B: [1821, 1841] PS: [124,  4] PE: [124, 24]                         call
B: [1821, 1826] PS: [124,  4] PE: [124,  9]                           func: identifier `print`
B: [1826, 1827] PS: [124,  9] PE: [124, 10]                           ( `(`
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                           arg: expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                             ternary_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                               delegate: or_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                 delegate: and_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                   delegate: compare_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                     delegate: add_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                       delegate: mult_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                         delegate: unary_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                           delegate: indexed_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                             root: primary_expr
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                               literal
B: [1827, 1840] PS: [124, 10] PE: [124, 23]                                                 string
B: [1827, 1828] PS: [124, 10] PE: [124, 11]                                                   start: string_start `"`
B: [1828, 1839] PS: [124, 11] PE: [124, 22]                                                   contents: string_contents
B: [1828, 1839] PS: [124, 11] PE: [124, 22]                                                     content: string_content `Moved back!`
B: [1839, 1840] PS: [124, 22] PE: [124, 23]                                                   end: string_end `"`
B: [1840, 1841] PS: [124, 23] PE: [124, 24]                           ) `)`
B: [1843, 1901] PS: [126,  0] PE: [126, 58]   shell_stmt
B: [1843, 1901] PS: [126,  0] PE: [126, 58]     shell_cmd: critical_shell_cmd
B: [1843, 1845] PS: [126,  0] PE: [126,  2]       $! `$!`
B: [1845, 1901] PS: [126,  2] PE: [126, 58]       command: expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]         ternary_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]           delegate: or_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]             delegate: and_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]               delegate: compare_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]                 delegate: add_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]                   delegate: mult_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]                     delegate: unary_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]                       delegate: indexed_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]                         root: primary_expr
B: [1845, 1901] PS: [126,  2] PE: [126, 58]                           literal
B: [1845, 1901] PS: [126,  2] PE: [126, 58]                             string
B: [1845, 1846] PS: [126,  2] PE: [126,  3]                               start: string_start ```
B: [1846, 1900] PS: [126,  3] PE: [126, 57]                               contents: string_contents
B: [1846, 1882] PS: [126,  3] PE: [126, 39]                                 content: string_content `sed -i '' "s/Version = .*/Version = `
B: [1882, 1891] PS: [126, 39] PE: [126, 48]                                 interpolation: interpolation
B: [1882, 1883] PS: [126, 39] PE: [126, 40]                                   { `{`
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                   expr: expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                     ternary_expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                       delegate: or_expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                         delegate: and_expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                           delegate: compare_expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                             delegate: add_expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                               delegate: mult_expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                                 delegate: unary_expr
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                                   delegate: var_path
B: [1883, 1890] PS: [126, 40] PE: [126, 47]                                                     root: identifier `version`
B: [1890, 1891] PS: [126, 47] PE: [126, 48]                                   } `}`
B: [1891, 1894] PS: [126, 48] PE: [126, 51]                                 content: string_content `/" `
B: [1894, 1900] PS: [126, 51] PE: [126, 57]                                 interpolation: interpolation
B: [1894, 1895] PS: [126, 51] PE: [126, 52]                                   { `{`
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                   expr: expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                     ternary_expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                       delegate: or_expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                         delegate: and_expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                           delegate: compare_expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                             delegate: add_expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                               delegate: mult_expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                                 delegate: unary_expr
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                                   delegate: var_path
B: [1895, 1899] PS: [126, 52] PE: [126, 56]                                                     root: identifier `path`
B: [1899, 1900] PS: [126, 56] PE: [126, 57]                                   } `}`
B: [1900, 1901] PS: [126, 57] PE: [126, 58]                               end: string_end ```
B: [1902, 1971] PS: [127,  0] PE: [129, 30]   defer_block
B: [1902, 1910] PS: [127,  0] PE: [127,  8]     keyword: errdefer `errdefer`
B: [1910, 1911] PS: [127,  8] PE: [127,  9]     : `:`
B: [1916, 1940] PS: [128,  4] PE: [128, 28]     stmt: expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]       ternary_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]         delegate: or_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]           delegate: and_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]             delegate: compare_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]               delegate: add_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]                 delegate: mult_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]                   delegate: unary_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]                     delegate: indexed_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]                       root: primary_expr
B: [1916, 1940] PS: [128,  4] PE: [128, 28]                         call
B: [1916, 1921] PS: [128,  4] PE: [128,  9]                           func: identifier `print`
B: [1921, 1922] PS: [128,  9] PE: [128, 10]                           ( `(`
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                           arg: expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                             ternary_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                               delegate: or_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                 delegate: and_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                   delegate: compare_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                     delegate: add_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                       delegate: mult_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                         delegate: unary_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                           delegate: indexed_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                             root: primary_expr
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                               literal
B: [1922, 1939] PS: [128, 10] PE: [128, 27]                                                 string
B: [1922, 1923] PS: [128, 10] PE: [128, 11]                                                   start: string_start `"`
B: [1923, 1938] PS: [128, 11] PE: [128, 26]                                                   contents: string_contents
B: [1923, 1938] PS: [128, 11] PE: [128, 26]                                                     content: string_content `Undoing bump...`
B: [1938, 1939] PS: [128, 26] PE: [128, 27]                                                   end: string_end `"`
B: [1939, 1940] PS: [128, 27] PE: [128, 28]                           ) `)`
B: [1945, 1971] PS: [129,  4] PE: [129, 30]     stmt: shell_stmt
B: [1945, 1971] PS: [129,  4] PE: [129, 30]       shell_cmd: critical_shell_cmd
B: [1945, 1947] PS: [129,  4] PE: [129,  6]         $! `$!`
B: [1947, 1971] PS: [129,  6] PE: [129, 30]         command: expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]           ternary_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]             delegate: or_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]               delegate: and_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                 delegate: compare_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                   delegate: add_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                     delegate: mult_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                       delegate: unary_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                         delegate: indexed_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                           root: primary_expr
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                             literal
B: [1947, 1971] PS: [129,  6] PE: [129, 30]                               string
B: [1947, 1948] PS: [129,  6] PE: [129,  7]                                 start: string_start ```
B: [1948, 1970] PS: [129,  7] PE: [129, 29]                                 contents: string_contents
B: [1948, 1964] PS: [129,  7] PE: [129, 23]                                   content: string_content `git checkout -- `
B: [1964, 1970] PS: [129, 23] PE: [129, 29]                                   interpolation: interpolation
B: [1964, 1965] PS: [129, 23] PE: [129, 24]                                     { `{`
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                     expr: expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                       ternary_expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                         delegate: or_expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                           delegate: and_expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                             delegate: compare_expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                               delegate: add_expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                                 delegate: mult_expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                                   delegate: unary_expr
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                                     delegate: var_path
B: [1965, 1969] PS: [129, 24] PE: [129, 28]                                                       root: identifier `path`
B: [1969, 1970] PS: [129, 28] PE: [129, 29]                                     } `}`
B: [1970, 1971] PS: [129, 29] PE: [129, 30]                                 end: string_end ```
B: [1973, 2050] PS: [131,  0] PE: [133, 11]   if_stmt
B: [1973, 2050] PS: [131,  0] PE: [133, 11]     alt: if_alt
B: [1973, 1975] PS: [131,  0] PE: [131,  2]       if `if`
B: [1976, 1981] PS: [131,  3] PE: [131,  8]       condition: expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]         ternary_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]           delegate: or_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]             delegate: and_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]               delegate: compare_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                 delegate: add_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                   delegate: mult_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                     delegate: unary_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                       delegate: indexed_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                         root: primary_expr
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                           literal
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                             bool
B: [1976, 1981] PS: [131,  3] PE: [131,  8]                               false `false`
B: [1981, 1982] PS: [131,  8] PE: [131,  9]       : `:`
B: [1984, 2013] PS: [131, 11] PE: [131, 40]       comment `// failure simulation point 1`
B: [2018, 2038] PS: [132,  4] PE: [132, 24]       stmt: expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]         ternary_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]           delegate: or_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]             delegate: and_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]               delegate: compare_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]                 delegate: add_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]                   delegate: mult_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]                     delegate: unary_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]                       delegate: indexed_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]                         root: primary_expr
B: [2018, 2038] PS: [132,  4] PE: [132, 24]                           call
B: [2018, 2023] PS: [132,  4] PE: [132,  9]                             func: identifier `print`
B: [2023, 2024] PS: [132,  9] PE: [132, 10]                             ( `(`
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                             arg: expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                               ternary_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                 delegate: or_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                   delegate: and_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                     delegate: compare_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                       delegate: add_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                         delegate: mult_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                           delegate: unary_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                             delegate: indexed_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                               root: primary_expr
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                                 literal
B: [2024, 2037] PS: [132, 10] PE: [132, 23]                                                   string
B: [2024, 2025] PS: [132, 10] PE: [132, 11]                                                     start: string_start `"`
B: [2025, 2036] PS: [132, 11] PE: [132, 22]                                                     contents: string_contents
B: [2025, 2036] PS: [132, 11] PE: [132, 22]                                                       content: string_content `Oh no! BAD!`
B: [2036, 2037] PS: [132, 22] PE: [132, 23]                                                     end: string_end `"`
B: [2037, 2038] PS: [132, 23] PE: [132, 24]                             ) `)`
B: [2043, 2050] PS: [133,  4] PE: [133, 11]       stmt: expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]         ternary_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]           delegate: or_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]             delegate: and_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]               delegate: compare_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]                 delegate: add_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]                   delegate: mult_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]                     delegate: unary_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]                       delegate: indexed_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]                         root: primary_expr
B: [2043, 2050] PS: [133,  4] PE: [133, 11]                           call
B: [2043, 2047] PS: [133,  4] PE: [133,  8]                             func: identifier `exit`
B: [2047, 2048] PS: [133,  8] PE: [133,  9]                             ( `(`
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                             arg: expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                               ternary_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                 delegate: or_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                   delegate: and_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                     delegate: compare_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                       delegate: add_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                         delegate: mult_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                           delegate: unary_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                             delegate: indexed_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                               root: primary_expr
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                                 literal
B: [2048, 2049] PS: [133,  9] PE: [133, 10]                                                   int `1`
B: [2049, 2050] PS: [133, 10] PE: [133, 11]                             ) `)`
B: [2052, 2070] PS: [135,  0] PE: [135, 18]   shell_stmt
B: [2052, 2070] PS: [135,  0] PE: [135, 18]     shell_cmd: critical_shell_cmd
B: [2052, 2054] PS: [135,  0] PE: [135,  2]       $! `$!`
B: [2054, 2070] PS: [135,  2] PE: [135, 18]       command: expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]         ternary_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]           delegate: or_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]             delegate: and_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]               delegate: compare_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]                 delegate: add_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]                   delegate: mult_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]                     delegate: unary_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]                       delegate: indexed_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]                         root: primary_expr
B: [2054, 2070] PS: [135,  2] PE: [135, 18]                           literal
B: [2054, 2070] PS: [135,  2] PE: [135, 18]                             string
B: [2054, 2055] PS: [135,  2] PE: [135,  3]                               start: string_start ```
B: [2055, 2069] PS: [135,  3] PE: [135, 17]                               contents: string_contents
B: [2055, 2063] PS: [135,  3] PE: [135, 11]                                 content: string_content `git add `
B: [2063, 2069] PS: [135, 11] PE: [135, 17]                                 interpolation: interpolation
B: [2063, 2064] PS: [135, 11] PE: [135, 12]                                   { `{`
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                   expr: expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                     ternary_expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                       delegate: or_expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                         delegate: and_expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                           delegate: compare_expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                             delegate: add_expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                               delegate: mult_expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                                 delegate: unary_expr
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                                   delegate: var_path
B: [2064, 2068] PS: [135, 12] PE: [135, 16]                                                     root: identifier `path`
B: [2068, 2069] PS: [135, 16] PE: [135, 17]                                   } `}`
B: [2069, 2070] PS: [135, 17] PE: [135, 18]                               end: string_end ```
B: [2071, 2145] PS: [136,  0] PE: [138, 31]   defer_block
B: [2071, 2079] PS: [136,  0] PE: [136,  8]     keyword: errdefer `errdefer`
B: [2079, 2080] PS: [136,  8] PE: [136,  9]     : `:`
B: [2085, 2113] PS: [137,  4] PE: [137, 32]     stmt: expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]       ternary_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]         delegate: or_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]           delegate: and_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]             delegate: compare_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]               delegate: add_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]                 delegate: mult_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]                   delegate: unary_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]                     delegate: indexed_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]                       root: primary_expr
B: [2085, 2113] PS: [137,  4] PE: [137, 32]                         call
B: [2085, 2090] PS: [137,  4] PE: [137,  9]                           func: identifier `print`
B: [2090, 2091] PS: [137,  9] PE: [137, 10]                           ( `(`
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                           arg: expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                             ternary_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                               delegate: or_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                 delegate: and_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                   delegate: compare_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                     delegate: add_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                       delegate: mult_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                         delegate: unary_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                           delegate: indexed_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                             root: primary_expr
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                               literal
B: [2091, 2112] PS: [137, 10] PE: [137, 31]                                                 string
B: [2091, 2092] PS: [137, 10] PE: [137, 11]                                                   start: string_start `"`
B: [2092, 2111] PS: [137, 11] PE: [137, 30]                                                   contents: string_contents
B: [2092, 2102] PS: [137, 11] PE: [137, 21]                                                     content: string_content `Resetting `
B: [2102, 2108] PS: [137, 21] PE: [137, 27]                                                     interpolation: interpolation
B: [2102, 2103] PS: [137, 21] PE: [137, 22]                                                       { `{`
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                       expr: expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                         ternary_expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                           delegate: or_expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                             delegate: and_expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                               delegate: compare_expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                                 delegate: add_expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                                   delegate: mult_expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                                     delegate: unary_expr
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                                       delegate: var_path
B: [2103, 2107] PS: [137, 22] PE: [137, 26]                                                                         root: identifier `path`
B: [2107, 2108] PS: [137, 26] PE: [137, 27]                                                       } `}`
B: [2108, 2111] PS: [137, 27] PE: [137, 30]                                                     content: string_content `...`
B: [2111, 2112] PS: [137, 30] PE: [137, 31]                                                   end: string_end `"`
B: [2112, 2113] PS: [137, 31] PE: [137, 32]                           ) `)`
B: [2118, 2145] PS: [138,  4] PE: [138, 31]     stmt: shell_stmt
B: [2118, 2119] PS: [138,  4] PE: [138,  5]       left: var_path
B: [2118, 2119] PS: [138,  4] PE: [138,  5]         root: identifier `_`
B: [2119, 2120] PS: [138,  5] PE: [138,  6]       , `,`
B: [2121, 2122] PS: [138,  7] PE: [138,  8]       left: var_path
B: [2121, 2122] PS: [138,  7] PE: [138,  8]         root: identifier `_`
B: [2123, 2124] PS: [138,  9] PE: [138, 10]       = `=`
B: [2125, 2145] PS: [138, 11] PE: [138, 31]       shell_cmd: critical_shell_cmd
B: [2125, 2127] PS: [138, 11] PE: [138, 13]         $! `$!`
B: [2127, 2145] PS: [138, 13] PE: [138, 31]         command: expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]           ternary_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]             delegate: or_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]               delegate: and_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                 delegate: compare_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                   delegate: add_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                     delegate: mult_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                       delegate: unary_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                         delegate: indexed_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                           root: primary_expr
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                             literal
B: [2127, 2145] PS: [138, 13] PE: [138, 31]                               string
B: [2127, 2128] PS: [138, 13] PE: [138, 14]                                 start: string_start ```
B: [2128, 2144] PS: [138, 14] PE: [138, 30]                                 contents: string_contents
B: [2128, 2138] PS: [138, 14] PE: [138, 24]                                   content: string_content `git reset `
B: [2138, 2144] PS: [138, 24] PE: [138, 30]                                   interpolation: interpolation
B: [2138, 2139] PS: [138, 24] PE: [138, 25]                                     { `{`
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                     expr: expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                       ternary_expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                         delegate: or_expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                           delegate: and_expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                             delegate: compare_expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                               delegate: add_expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                                 delegate: mult_expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                                   delegate: unary_expr
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                                     delegate: var_path
B: [2139, 2143] PS: [138, 25] PE: [138, 29]                                                       root: identifier `path`
B: [2143, 2144] PS: [138, 29] PE: [138, 30]                                     } `}`
B: [2144, 2145] PS: [138, 30] PE: [138, 31]                                 end: string_end ```
B: [2147, 2222] PS: [140,  0] PE: [142, 11]   if_stmt
B: [2147, 2222] PS: [140,  0] PE: [142, 11]     alt: if_alt
B: [2147, 2149] PS: [140,  0] PE: [140,  2]       if `if`
B: [2150, 2155] PS: [140,  3] PE: [140,  8]       condition: expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]         ternary_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]           delegate: or_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]             delegate: and_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]               delegate: compare_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                 delegate: add_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                   delegate: mult_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                     delegate: unary_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                       delegate: indexed_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                         root: primary_expr
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                           literal
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                             bool
B: [2150, 2155] PS: [140,  3] PE: [140,  8]                               false `false`
B: [2155, 2156] PS: [140,  8] PE: [140,  9]       : `:`
B: [2158, 2187] PS: [140, 11] PE: [140, 40]       comment `// failure simulation point 2`
B: [2192, 2210] PS: [141,  4] PE: [141, 22]       stmt: expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]         ternary_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]           delegate: or_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]             delegate: and_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]               delegate: compare_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]                 delegate: add_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]                   delegate: mult_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]                     delegate: unary_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]                       delegate: indexed_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]                         root: primary_expr
B: [2192, 2210] PS: [141,  4] PE: [141, 22]                           call
B: [2192, 2197] PS: [141,  4] PE: [141,  9]                             func: identifier `print`
B: [2197, 2198] PS: [141,  9] PE: [141, 10]                             ( `(`
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                             arg: expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                               ternary_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                 delegate: or_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                   delegate: and_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                     delegate: compare_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                       delegate: add_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                         delegate: mult_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                           delegate: unary_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                             delegate: indexed_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                               root: primary_expr
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                                 literal
B: [2198, 2209] PS: [141, 10] PE: [141, 21]                                                   string
B: [2198, 2199] PS: [141, 10] PE: [141, 11]                                                     start: string_start `"`
B: [2199, 2208] PS: [141, 11] PE: [141, 20]                                                     contents: string_contents
B: [2199, 2208] PS: [141, 11] PE: [141, 20]                                                       content: string_content `Bah! BAD!`
B: [2208, 2209] PS: [141, 20] PE: [141, 21]                                                     end: string_end `"`
B: [2209, 2210] PS: [141, 21] PE: [141, 22]                             ) `)`
B: [2215, 2222] PS: [142,  4] PE: [142, 11]       stmt: expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]         ternary_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]           delegate: or_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]             delegate: and_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]               delegate: compare_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]                 delegate: add_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]                   delegate: mult_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]                     delegate: unary_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]                       delegate: indexed_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]                         root: primary_expr
B: [2215, 2222] PS: [142,  4] PE: [142, 11]                           call
B: [2215, 2219] PS: [142,  4] PE: [142,  8]                             func: identifier `exit`
B: [2219, 2220] PS: [142,  8] PE: [142,  9]                             ( `(`
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                             arg: expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                               ternary_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                 delegate: or_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                   delegate: and_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                     delegate: compare_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                       delegate: add_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                         delegate: mult_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                           delegate: unary_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                             delegate: indexed_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                               root: primary_expr
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                                 literal
B: [2220, 2221] PS: [142,  9] PE: [142, 10]                                                   int `1`
B: [2221, 2222] PS: [142, 10] PE: [142, 11]                             ) `)`
B: [2224, 2269] PS: [144,  0] PE: [144, 45]   shell_stmt
B: [2224, 2269] PS: [144,  0] PE: [144, 45]     shell_cmd: critical_shell_cmd
B: [2224, 2226] PS: [144,  0] PE: [144,  2]       $! `$!`
B: [2226, 2269] PS: [144,  2] PE: [144, 45]       command: expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]         ternary_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]           delegate: or_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]             delegate: and_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]               delegate: compare_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]                 delegate: add_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]                   delegate: mult_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]                     delegate: unary_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]                       delegate: indexed_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]                         root: primary_expr
B: [2226, 2269] PS: [144,  2] PE: [144, 45]                           literal
B: [2226, 2269] PS: [144,  2] PE: [144, 45]                             string
B: [2226, 2227] PS: [144,  2] PE: [144,  3]                               start: string_start ```
B: [2227, 2268] PS: [144,  3] PE: [144, 44]                               contents: string_contents
B: [2227, 2258] PS: [144,  3] PE: [144, 34]                                 content: string_content `git commit -m "Bump version to `
B: [2258, 2267] PS: [144, 34] PE: [144, 43]                                 interpolation: interpolation
B: [2258, 2259] PS: [144, 34] PE: [144, 35]                                   { `{`
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                   expr: expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                     ternary_expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                       delegate: or_expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                         delegate: and_expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                           delegate: compare_expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                             delegate: add_expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                               delegate: mult_expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                                 delegate: unary_expr
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                                   delegate: var_path
B: [2259, 2266] PS: [144, 35] PE: [144, 42]                                                     root: identifier `version`
B: [2266, 2267] PS: [144, 42] PE: [144, 43]                                   } `}`
B: [2267, 2268] PS: [144, 43] PE: [144, 44]                                 content: string_content `"`
B: [2268, 2269] PS: [144, 44] PE: [144, 45]                               end: string_end ```
