=====
For loop
=====
a = [20, 30, 40]

for item in a:
    b = 2
    print(item)

for idx, item in a:
    print(idx, item)

for item in a:
    if item >= 2:
        print("big enough!")
        break
    else:
        print("too small!")

for item in a:
    continue
    print("never printed")

print("done")

=====
B: [  0, 288] PS: [ 0,  0], PE: [22,  0] source_file
B: [  0,  16] PS: [ 0,  0], PE: [ 0, 16]   assign
B: [  0,   1] PS: [ 0,  0], PE: [ 0,  1]     left: var_path
B: [  0,   1] PS: [ 0,  0], PE: [ 0,  1]       root: identifier `a`
B: [  2,   3] PS: [ 0,  2], PE: [ 0,  3]     = `=`
B: [  4,  16] PS: [ 0,  4], PE: [ 0, 16]     right: expr
B: [  4,  16] PS: [ 0,  4], PE: [ 0, 16]       primary_expr
B: [  4,  16] PS: [ 0,  4], PE: [ 0, 16]         literal
B: [  4,  16] PS: [ 0,  4], PE: [ 0, 16]           list
B: [  4,   5] PS: [ 0,  4], PE: [ 0,  5]             [ `[`
B: [  5,   7] PS: [ 0,  5], PE: [ 0,  7]             list_entry: expr
B: [  5,   7] PS: [ 0,  5], PE: [ 0,  7]               primary_expr
B: [  5,   7] PS: [ 0,  5], PE: [ 0,  7]                 literal
B: [  5,   7] PS: [ 0,  5], PE: [ 0,  7]                   int `20`
B: [  7,   8] PS: [ 0,  7], PE: [ 0,  8]             , `,`
B: [  9,  11] PS: [ 0,  9], PE: [ 0, 11]             list_entry: expr
B: [  9,  11] PS: [ 0,  9], PE: [ 0, 11]               primary_expr
B: [  9,  11] PS: [ 0,  9], PE: [ 0, 11]                 literal
B: [  9,  11] PS: [ 0,  9], PE: [ 0, 11]                   int `30`
B: [ 11,  12] PS: [ 0, 11], PE: [ 0, 12]             , `,`
B: [ 13,  15] PS: [ 0, 13], PE: [ 0, 15]             list_entry: expr
B: [ 13,  15] PS: [ 0, 13], PE: [ 0, 15]               primary_expr
B: [ 13,  15] PS: [ 0, 13], PE: [ 0, 15]                 literal
B: [ 13,  15] PS: [ 0, 13], PE: [ 0, 15]                   int `40`
B: [ 15,  16] PS: [ 0, 15], PE: [ 0, 16]             ] `]`
B: [ 18,  58] PS: [ 2,  0], PE: [ 4, 15]   for_loop
B: [ 18,  21] PS: [ 2,  0], PE: [ 2,  3]     for `for`
B: [ 22,  26] PS: [ 2,  4], PE: [ 2,  8]     lefts: for_lefts
B: [ 22,  26] PS: [ 2,  4], PE: [ 2,  8]       left: identifier `item`
B: [ 27,  29] PS: [ 2,  9], PE: [ 2, 11]     in `in`
B: [ 30,  31] PS: [ 2, 12], PE: [ 2, 13]     right: expr
B: [ 30,  31] PS: [ 2, 12], PE: [ 2, 13]       primary_expr
B: [ 30,  31] PS: [ 2, 12], PE: [ 2, 13]         var_path
B: [ 30,  31] PS: [ 2, 12], PE: [ 2, 13]           root: identifier `a`
B: [ 31,  32] PS: [ 2, 13], PE: [ 2, 14]     : `:`
B: [ 37,  42] PS: [ 3,  4], PE: [ 3,  9]     stmt: assign
B: [ 37,  38] PS: [ 3,  4], PE: [ 3,  5]       left: var_path
B: [ 37,  38] PS: [ 3,  4], PE: [ 3,  5]         root: identifier `b`
B: [ 39,  40] PS: [ 3,  6], PE: [ 3,  7]       = `=`
B: [ 41,  42] PS: [ 3,  8], PE: [ 3,  9]       right: expr
B: [ 41,  42] PS: [ 3,  8], PE: [ 3,  9]         primary_expr
B: [ 41,  42] PS: [ 3,  8], PE: [ 3,  9]           literal
B: [ 41,  42] PS: [ 3,  8], PE: [ 3,  9]             int `2`
B: [ 47,  58] PS: [ 4,  4], PE: [ 4, 15]     stmt: expr_stmt
B: [ 47,  58] PS: [ 4,  4], PE: [ 4, 15]       expr
B: [ 47,  58] PS: [ 4,  4], PE: [ 4, 15]         primary_expr
B: [ 47,  58] PS: [ 4,  4], PE: [ 4, 15]           call
B: [ 47,  52] PS: [ 4,  4], PE: [ 4,  9]             func: identifier `print`
B: [ 52,  53] PS: [ 4,  9], PE: [ 4, 10]             ( `(`
B: [ 53,  57] PS: [ 4, 10], PE: [ 4, 14]             arg: expr
B: [ 53,  57] PS: [ 4, 10], PE: [ 4, 14]               primary_expr
B: [ 53,  57] PS: [ 4, 10], PE: [ 4, 14]                 var_path
B: [ 53,  57] PS: [ 4, 10], PE: [ 4, 14]                   root: identifier `item`
B: [ 57,  58] PS: [ 4, 14], PE: [ 4, 15]             ) `)`
B: [ 60, 100] PS: [ 6,  0], PE: [ 7, 20]   for_loop
B: [ 60,  63] PS: [ 6,  0], PE: [ 6,  3]     for `for`
B: [ 64,  73] PS: [ 6,  4], PE: [ 6, 13]     lefts: for_lefts
B: [ 64,  67] PS: [ 6,  4], PE: [ 6,  7]       left: identifier `idx`
B: [ 67,  68] PS: [ 6,  7], PE: [ 6,  8]       , `,`
B: [ 69,  73] PS: [ 6,  9], PE: [ 6, 13]       left: identifier `item`
B: [ 74,  76] PS: [ 6, 14], PE: [ 6, 16]     in `in`
B: [ 77,  78] PS: [ 6, 17], PE: [ 6, 18]     right: expr
B: [ 77,  78] PS: [ 6, 17], PE: [ 6, 18]       primary_expr
B: [ 77,  78] PS: [ 6, 17], PE: [ 6, 18]         var_path
B: [ 77,  78] PS: [ 6, 17], PE: [ 6, 18]           root: identifier `a`
B: [ 78,  79] PS: [ 6, 18], PE: [ 6, 19]     : `:`
B: [ 84, 100] PS: [ 7,  4], PE: [ 7, 20]     stmt: expr_stmt
B: [ 84, 100] PS: [ 7,  4], PE: [ 7, 20]       expr
B: [ 84, 100] PS: [ 7,  4], PE: [ 7, 20]         primary_expr
B: [ 84, 100] PS: [ 7,  4], PE: [ 7, 20]           call
B: [ 84,  89] PS: [ 7,  4], PE: [ 7,  9]             func: identifier `print`
B: [ 89,  90] PS: [ 7,  9], PE: [ 7, 10]             ( `(`
B: [ 90,  93] PS: [ 7, 10], PE: [ 7, 13]             arg: expr
B: [ 90,  93] PS: [ 7, 10], PE: [ 7, 13]               primary_expr
B: [ 90,  93] PS: [ 7, 10], PE: [ 7, 13]                 var_path
B: [ 90,  93] PS: [ 7, 10], PE: [ 7, 13]                   root: identifier `idx`
B: [ 93,  94] PS: [ 7, 13], PE: [ 7, 14]             , `,`
B: [ 95,  99] PS: [ 7, 15], PE: [ 7, 19]             arg: expr
B: [ 95,  99] PS: [ 7, 15], PE: [ 7, 19]               primary_expr
B: [ 95,  99] PS: [ 7, 15], PE: [ 7, 19]                 var_path
B: [ 95,  99] PS: [ 7, 15], PE: [ 7, 19]                   root: identifier `item`
B: [ 99, 100] PS: [ 7, 19], PE: [ 7, 20]             ) `)`
B: [102, 215] PS: [ 9,  0], PE: [14, 27]   for_loop
B: [102, 105] PS: [ 9,  0], PE: [ 9,  3]     for `for`
B: [106, 110] PS: [ 9,  4], PE: [ 9,  8]     lefts: for_lefts
B: [106, 110] PS: [ 9,  4], PE: [ 9,  8]       left: identifier `item`
B: [111, 113] PS: [ 9,  9], PE: [ 9, 11]     in `in`
B: [114, 115] PS: [ 9, 12], PE: [ 9, 13]     right: expr
B: [114, 115] PS: [ 9, 12], PE: [ 9, 13]       primary_expr
B: [114, 115] PS: [ 9, 12], PE: [ 9, 13]         var_path
B: [114, 115] PS: [ 9, 12], PE: [ 9, 13]           root: identifier `a`
B: [115, 116] PS: [ 9, 13], PE: [ 9, 14]     : `:`
B: [121, 215] PS: [10,  4], PE: [14, 27]     stmt: if_stmt
B: [121, 177] PS: [10,  4], PE: [12, 13]       alt: if_alt
B: [121, 123] PS: [10,  4], PE: [10,  6]         if `if`
B: [124, 133] PS: [10,  7], PE: [10, 16]         condition: expr
B: [124, 133] PS: [10,  7], PE: [10, 16]           comparison_op
B: [124, 128] PS: [10,  7], PE: [10, 11]             left: primary_expr
B: [124, 128] PS: [10,  7], PE: [10, 11]               var_path
B: [124, 128] PS: [10,  7], PE: [10, 11]                 root: identifier `item`
B: [129, 131] PS: [10, 12], PE: [10, 14]             op: >= `>=`
B: [132, 133] PS: [10, 15], PE: [10, 16]             right: primary_expr
B: [132, 133] PS: [10, 15], PE: [10, 16]               literal
B: [132, 133] PS: [10, 15], PE: [10, 16]                 int `2`
B: [133, 134] PS: [10, 16], PE: [10, 17]         : `:`
B: [143, 163] PS: [11,  8], PE: [11, 28]         stmt: expr_stmt
B: [143, 163] PS: [11,  8], PE: [11, 28]           expr
B: [143, 163] PS: [11,  8], PE: [11, 28]             primary_expr
B: [143, 163] PS: [11,  8], PE: [11, 28]               call
B: [143, 148] PS: [11,  8], PE: [11, 13]                 func: identifier `print`
B: [148, 149] PS: [11, 13], PE: [11, 14]                 ( `(`
B: [149, 162] PS: [11, 14], PE: [11, 27]                 arg: expr
B: [149, 162] PS: [11, 14], PE: [11, 27]                   primary_expr
B: [149, 162] PS: [11, 14], PE: [11, 27]                     literal
B: [149, 162] PS: [11, 14], PE: [11, 27]                       string
B: [149, 150] PS: [11, 14], PE: [11, 15]                         start: string_start `"`
B: [150, 161] PS: [11, 15], PE: [11, 26]                         contents: string_contents
B: [150, 161] PS: [11, 15], PE: [11, 26]                           content: string_content `big enough!`
B: [161, 162] PS: [11, 26], PE: [11, 27]                         end: string_end `"`
B: [162, 163] PS: [11, 27], PE: [11, 28]                 ) `)`
B: [172, 177] PS: [12,  8], PE: [12, 13]         stmt: break_stmt
B: [172, 177] PS: [12,  8], PE: [12, 13]           break `break`
B: [182, 186] PS: [13,  4], PE: [13,  8]       else `else`
B: [186, 215] PS: [13,  8], PE: [14, 27]       alt: else_alt
B: [186, 187] PS: [13,  8], PE: [13,  9]         : `:`
B: [196, 215] PS: [14,  8], PE: [14, 27]         stmt: expr_stmt
B: [196, 215] PS: [14,  8], PE: [14, 27]           expr
B: [196, 215] PS: [14,  8], PE: [14, 27]             primary_expr
B: [196, 215] PS: [14,  8], PE: [14, 27]               call
B: [196, 201] PS: [14,  8], PE: [14, 13]                 func: identifier `print`
B: [201, 202] PS: [14, 13], PE: [14, 14]                 ( `(`
B: [202, 214] PS: [14, 14], PE: [14, 26]                 arg: expr
B: [202, 214] PS: [14, 14], PE: [14, 26]                   primary_expr
B: [202, 214] PS: [14, 14], PE: [14, 26]                     literal
B: [202, 214] PS: [14, 14], PE: [14, 26]                       string
B: [202, 203] PS: [14, 14], PE: [14, 15]                         start: string_start `"`
B: [203, 213] PS: [14, 15], PE: [14, 25]                         contents: string_contents
B: [203, 213] PS: [14, 15], PE: [14, 25]                           content: string_content `too small!`
B: [213, 214] PS: [14, 25], PE: [14, 26]                         end: string_end `"`
B: [214, 215] PS: [14, 26], PE: [14, 27]                 ) `)`
B: [217, 271] PS: [16,  0], PE: [18, 26]   for_loop
B: [217, 220] PS: [16,  0], PE: [16,  3]     for `for`
B: [221, 225] PS: [16,  4], PE: [16,  8]     lefts: for_lefts
B: [221, 225] PS: [16,  4], PE: [16,  8]       left: identifier `item`
B: [226, 228] PS: [16,  9], PE: [16, 11]     in `in`
B: [229, 230] PS: [16, 12], PE: [16, 13]     right: expr
B: [229, 230] PS: [16, 12], PE: [16, 13]       primary_expr
B: [229, 230] PS: [16, 12], PE: [16, 13]         var_path
B: [229, 230] PS: [16, 12], PE: [16, 13]           root: identifier `a`
B: [230, 231] PS: [16, 13], PE: [16, 14]     : `:`
B: [236, 244] PS: [17,  4], PE: [17, 12]     stmt: continue_stmt
B: [236, 244] PS: [17,  4], PE: [17, 12]       continue `continue`
B: [249, 271] PS: [18,  4], PE: [18, 26]     stmt: expr_stmt
B: [249, 271] PS: [18,  4], PE: [18, 26]       expr
B: [249, 271] PS: [18,  4], PE: [18, 26]         primary_expr
B: [249, 271] PS: [18,  4], PE: [18, 26]           call
B: [249, 254] PS: [18,  4], PE: [18,  9]             func: identifier `print`
B: [254, 255] PS: [18,  9], PE: [18, 10]             ( `(`
B: [255, 270] PS: [18, 10], PE: [18, 25]             arg: expr
B: [255, 270] PS: [18, 10], PE: [18, 25]               primary_expr
B: [255, 270] PS: [18, 10], PE: [18, 25]                 literal
B: [255, 270] PS: [18, 10], PE: [18, 25]                   string
B: [255, 256] PS: [18, 10], PE: [18, 11]                     start: string_start `"`
B: [256, 269] PS: [18, 11], PE: [18, 24]                     contents: string_contents
B: [256, 269] PS: [18, 11], PE: [18, 24]                       content: string_content `never printed`
B: [269, 270] PS: [18, 24], PE: [18, 25]                     end: string_end `"`
B: [270, 271] PS: [18, 25], PE: [18, 26]             ) `)`
B: [273, 286] PS: [20,  0], PE: [20, 13]   expr_stmt
B: [273, 286] PS: [20,  0], PE: [20, 13]     expr
B: [273, 286] PS: [20,  0], PE: [20, 13]       primary_expr
B: [273, 286] PS: [20,  0], PE: [20, 13]         call
B: [273, 278] PS: [20,  0], PE: [20,  5]           func: identifier `print`
B: [278, 279] PS: [20,  5], PE: [20,  6]           ( `(`
B: [279, 285] PS: [20,  6], PE: [20, 12]           arg: expr
B: [279, 285] PS: [20,  6], PE: [20, 12]             primary_expr
B: [279, 285] PS: [20,  6], PE: [20, 12]               literal
B: [279, 285] PS: [20,  6], PE: [20, 12]                 string
B: [279, 280] PS: [20,  6], PE: [20,  7]                   start: string_start `"`
B: [280, 284] PS: [20,  7], PE: [20, 11]                   contents: string_contents
B: [280, 284] PS: [20,  7], PE: [20, 11]                     content: string_content `done`
B: [284, 285] PS: [20, 11], PE: [20, 12]                   end: string_end `"`
B: [285, 286] PS: [20, 12], PE: [20, 13]           ) `)`
