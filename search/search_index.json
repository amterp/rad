{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Rad","text":""},{"location":"#new","title":"New?","text":"<p>Check out the Getting Started guide!</p>"},{"location":"#reference","title":"Reference","text":"<p>See 'Reference' in the side panel.</p>"},{"location":"#doc-todo","title":"Doc Todo","text":"<ul> <li>getting started</li> <li>basics</li> <li>args</li> <li>rad blocks</li> <li>functions</li> <li>string interpolation &amp; formatting</li> <li>shell cmds</li> <li>colors</li> <li>global flags</li> <li>defer/errdefer</li> <li> <p>misc advanced</p> <ul> <li>varpath assignment?</li> </ul> </li> <li> <p>style guide? tips?</p> </li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>Bash scripts are great! They make our lives easier by allowing us to automate common workflows, saving valuable time.</p> <p>However, writing Bash scripts is not great, and it can be time-consuming to get them right. One of the main reasons is the syntax - compared to today's popular languages, Bash's syntax is unusual and downright arcane in some places.</p> <p>Wouldn't it be nice if we had an alternative with far more familiar and intuitive syntax, but still as powerful in what it can achieve?</p>"},{"location":"introduction/#rad","title":"Rad","text":"<p>Rad is a tool for running scripts written in RSL - Rad Scripting Language. RSL is designed to </p>"},{"location":"guide/basics/","title":"Basics","text":"<p>This section of the guide will rapidly cover the basics of RSL. RSL shares a lot of conventions and syntax with popular languages like Python, so if you're familiar with programming, this will be quick &amp; easy.</p>"},{"location":"guide/basics/#variables-assignment","title":"Variables &amp; Assignment","text":"<p>To create a variable, you can do it through assignment. Let's use a string example:</p> <pre><code>name = \"Alice\"\n</code></pre> <p>You can re-assign variables at any time:</p> <pre><code>name = \"bob\"\n</code></pre> <p>You cannot create multiple variables this way on one line.</p> <p>The following is illegal syntax</p> <pre><code>a, b = \"one\", \"two\"\n</code></pre> <p>instead, declare each variable on one line.</p> <pre><code>a = \"one\"\nb = \"two\"\n</code></pre>"},{"location":"guide/basics/#data-types","title":"Data Types","text":""},{"location":"guide/basics/#strings","title":"Strings","text":"<p>Strings can be delimited in three ways. The most standard are double quotes (<code>\"text\"</code>) or single quotes(<code>'text'</code>). The third is backticks (<code>`text`</code>).</p> <p>Single and double quotes behave the same way. For example:</p> <pre><code>greeting = 'Hello\\nWorld!'\nprint(greeting)\n</code></pre> <pre><code>Hello\nWorld!\n</code></pre> <pre><code>greeting = \"Hello\\nWorld!\"\nprint(greeting)\n</code></pre> <pre><code>Hello\nWorld!\n</code></pre> <p>Backtick-delimited strings behave a little differently. Characters like <code>\\n</code> don't get escaped and so print as-is.</p> <pre><code>greeting = `Hello\\nWorld!`\nprint(greeting)\n</code></pre> <pre><code>Hello\\nWorld!\n</code></pre> <p>Use backtick strings when you want the contents to remain closer to their 'raw' form.</p>"},{"location":"guide/basics/#int","title":"int","text":""},{"location":"guide/basics/#float","title":"float","text":""},{"location":"guide/basics/#bool","title":"bool","text":""},{"location":"guide/basics/#list","title":"list","text":""},{"location":"guide/basics/#map","title":"map","text":"<ul> <li>TBC<ul> <li>incl dot.syntax </li> </ul> </li> </ul>"},{"location":"guide/basics/#operators","title":"Operators","text":"<ul> <li>TBC<ul> <li>arithmetic</li> <li>comparison</li> <li>logical</li> <li>concat</li> <li>ternary</li> </ul> </li> </ul>"},{"location":"guide/basics/#control-flow","title":"Control Flow","text":"<ul> <li>TBC<ul> <li>if<ul> <li>truthy/falsy </li> </ul> </li> <li>for</li> <li>switch</li> </ul> </li> </ul>"},{"location":"guide/getting_started/","title":"Getting Started","text":""},{"location":"guide/getting_started/#installation","title":"Installation","text":""},{"location":"guide/getting_started/#macos","title":"macOS","text":"<pre><code>brew tap amterp/rad\nbrew install rad\n</code></pre> <p>Other than building from source, Rad is not available for other platforms/package managers (yet).</p>"},{"location":"guide/getting_started/#checking-installation","title":"Checking Installation","text":"<p>After you've installed rad, you can check your installation:</p> <pre><code>rad -V\n</code></pre> <p>If this prints rad's version, you're set!</p>"},{"location":"guide/getting_started/#your-first-rsl-script-hello-world","title":"Your First RSL Script - Hello World","text":"<ul> <li>TBC<ul> <li>creating rsl file</li> <li>adding print stmt</li> <li>running with <code>rad hello.rsl</code></li> </ul> </li> </ul>"},{"location":"guide/getting_started/#adding-args-hello-you","title":"Adding Args - Hello You","text":"<ul> <li>TBC<ul> <li>adding name arg</li> <li>using arg in 'hello'<ul> <li>use concat? or print comma? or interpolation?</li> </ul> </li> <li>running from cli with a name</li> <li><code>-h</code> to see help</li> <li>adding an arg comment</li> <li>add a file header</li> <li><code>-h</code> again</li> </ul> </li> </ul>"},{"location":"guide/getting_started/#shebang","title":"Shebang","text":"<ul> <li>TBC</li> <li>adding shebang</li> <li>chmod +x</li> <li>run <code>hello.rsl bob</code></li> <li>removing <code>.rsl</code></li> <li>running as just <code>./hello bob</code></li> </ul>"},{"location":"guide/getting_started/#next","title":"Next","text":"<p>TBC</p>"},{"location":"reference/args/","title":"Args","text":""},{"location":"reference/args/#basics","title":"Basics","text":"<pre><code>args:\n    argVar \"alias\"? shorthand? type = default? # Description?\n</code></pre> <pre><code>args:\n    name n string # A required arg 'name' which can be specified positionally or also with -n.\n    is_employee \"is-employee\" bool # Variable for script is is_employee, but users will see it as is-employee.\n\nif is_employee:\n    print(\"{name} is an employee.\")\nelse:\n    print(\"{name} is not an employee.\") \n</code></pre> <pre><code>args:\n    name string\n    age_years \"age-years\" int\n    height float # Height in meters\n    is_employee \"is-employee\" e bool\n    friends string[] # Specified as e.g. Alice,Bob\n    nationality n string = \"Australian\" # Defaults to this if not specified.\n</code></pre> <p>Example usage:</p> <pre><code>script Charlie 30 -e --friends David,Eve -h 1.86\n</code></pre>"},{"location":"reference/args/#constraint-statements","title":"Constraint Statements","text":"<pre><code>args:\n    name string\n    enum name [\"alice\", \"bob\", \"charlie\"]\n</code></pre> <pre><code>// valid!\nmyscript alice\n\n// invalid, will print error\nmyscript david\n</code></pre>"},{"location":"reference/assignment/","title":"Assignment","text":"<p>Generally speaking, multi-assignments are only legal for switch expressions, or single operations (e.g. functions) that return multiple values.</p>"},{"location":"reference/assignment/#legal-assignments","title":"Legal Assignments","text":"<pre><code>a = 1\na, b = pick_from_resoure(...)\na, b = switch ...\na, b = parse_int(text)\n\nmyMap[\"key\"] = 2\nmyList[1] = 3\n</code></pre>"},{"location":"reference/assignment/#illegal-assignments","title":"Illegal Assignments","text":"<pre><code>a, b = 1, 2\nmyMap[\"key\"], myMap[\"key2\"] = 2, 3\nmyList[1], myList[2] = 3, 4\n</code></pre>"},{"location":"reference/defer/","title":"Defer & Errdefer","text":"<ul> <li><code>defer</code> and <code>errdefer</code> run in LIFO order, each kind being part of the same one queue.</li> <li>If there are several defer statements, and one fails, further defer statements will still attempt to run.</li> <li>Rad's error code will become an error if the main script succeeded but a defer statement failed.</li> <li>errdefers will not get triggered if the main script succeeded but a <code>defer</code> or <code>errdefer</code> statement failed.</li> </ul>"},{"location":"reference/defer/#defer","title":"<code>defer</code>","text":"defer Example<pre><code>defer:\n    print(1)\n    print(2)\ndefer:\n    print(3)\n    print(4)\nprint(\"Hello!\")\n</code></pre> defer Example Output<pre><code>Hello!\n3\n4\n1\n2\n</code></pre>"},{"location":"reference/defer/#errdefer","title":"<code>errdefer</code>","text":"errdefer Example 1<pre><code>defer:\n    print(1)\n    print(2)\nerrdefer:\n    print(3)\n    print(4)\ndefer:\n    print(5)\n    print(6)\nerrdefer:\n    print(7)\n    print(8)\nprint(\"Hello!\")\nexit(0)  // successful script run\n</code></pre> errdefer Example 1 Output<pre><code>Hello!\n5\n6\n1\n2\n</code></pre> errdefer Example 2<pre><code>defer:\n    print(1)\n    print(2)\nerrdefer:\n    print(3)\n    print(4)\ndefer:\n    print(5)\n    print(6)\nerrdefer:\n    print(7)\n    print(8)\nprint(\"Hello!\")\nexit(1)  // perceived as error!\n</code></pre> errdefer Example 2 Output<pre><code>Hello!\n7\n8\n5\n6\n3\n4\n1\n2\n</code></pre>"},{"location":"reference/functions/","title":"Functions","text":""},{"location":"reference/functions/#output","title":"Output","text":""},{"location":"reference/functions/#print","title":"print","text":"<p>Description:</p> <p>Prints the given input. Includes a newline after. Stringifies whatever is given to it.</p> <pre><code>print(items ...any?)\n</code></pre> <p>Parameters:</p> <ul> <li><code>items: ...any?</code>: Zero or more items to print. If several are given, they get printed separated by spaces.</li> </ul> <p>Examples:</p> <pre><code>print(\"Hello!\")\n</code></pre> <pre><code>name = \"Alice\"\nprint(\"Hello\", name)  // prints \"Hello Alice\"\n</code></pre> <pre><code>print()  // prints a newline\n</code></pre> <pre><code>numbers = [1, 20, 300]\nprint(numbers)  // prints \"[1, 20, 300]\"\n</code></pre>"},{"location":"reference/functions/#pprint","title":"pprint","text":"<p>Description:</p> <p>Pretty prints the given input. Mainly useful for maps so they get printed in a json-style.</p> <pre><code>pprint(item any?)\n</code></pre> <p>Parameters:</p> <ul> <li><code>input: any?</code>: Zero or one item to pretty print. If zero, just prints a newline.</li> </ul> <p>Examples:</p> Example 1<pre><code>item = { \"name\": \"Alice\", age: 30 }\npprint(item)\n</code></pre> Example 1 Output<pre><code>{\n  \"name\": \"Alice\",\n  \"age\": 30\n}\n</code></pre>"},{"location":"reference/functions/#debug","title":"debug","text":"<p>Behaves like <code>print</code> but only prints if debug is enabled via the <code>--DEBUG</code> flag.</p> <pre><code>debug(items ...any?)\n</code></pre>"},{"location":"reference/functions/#misc","title":"Misc","text":""},{"location":"reference/functions/#exit","title":"exit","text":"<pre><code>exit(code int = 0)\n</code></pre>"},{"location":"reference/functions/#sleep","title":"sleep","text":"<pre><code>sleep(seconds int)\nsleep(seconds float)\nsleep(duration string)\n</code></pre>"},{"location":"reference/functions/#len","title":"len","text":"<pre><code>len(input string) -&gt; int\nlen(input any[]) -&gt; int\nlen(input map) -&gt; int\n</code></pre>"},{"location":"reference/functions/#range","title":"range","text":"<pre><code>range(end int|float) -&gt; int|float[]\nrange(start int|float, end int|float) -&gt; int|float[]\nrange(start int|float, end int|float, step int|float) -&gt; int|float[]\n</code></pre> <pre><code>range(5)         -&gt; [0, 1, 2, 3, 4]\nrange(5.5)       -&gt; [0, 1, 2, 3, 4, 5]\nrange(0.5, 5)    -&gt; [0.5, 1.5, 2.5, 3.5, 4.5]\nrange(10, 5, -2) -&gt; [10, 8, 6]\n</code></pre>"},{"location":"reference/functions/#confirm","title":"confirm","text":"<pre><code>confirm() -&gt; bool\nconfirm(prompt string) -&gt; bool\n</code></pre> Example 1<pre><code>if confirm():\n    print(\"Confirmed!\")\nelse:\n    print(\"Not confirmed!\")\n</code></pre> Example 1 Output<pre><code>Confirm? [y/n] y\nConfirmed!\n</code></pre> Example 2<pre><code>if confirm(\"Are you sure? &gt; \"):\n    print(\"You're sure!\")\nelse:\n    print(\"Unsure!\")\n</code></pre> Example 2 Output<pre><code>Are you sure? &gt; n\nUnsure!\n</code></pre>"},{"location":"reference/functions/#join","title":"join","text":"<pre><code>join(input any[], joiner string, prefix string|int|float|bool?, suffix string|int|float|bool?) -&gt; string\n</code></pre>"},{"location":"reference/functions/#unique","title":"unique","text":"<pre><code>unique(input any[]) -&gt; any[]\n</code></pre> <pre><code>unique([2, 1, 2, 3, 1, 3, 4])  // [2, 1, 3, 4]\n</code></pre>"},{"location":"reference/functions/#sort","title":"sort","text":"<pre><code>sort(input any[], reverse=bool?)\n</code></pre> <pre><code>sort([3, 4, 2, 1])                 // [1, 2, 3, 4]\nsort([3, 4, 2, 1], reversed=true)  // [4, 3, 2, 1]\nsort([3, 4, \"2\", 1, true])         // [true, 1, 3, 4, \"2\"]\n</code></pre>"},{"location":"reference/functions/#parsing","title":"Parsing","text":""},{"location":"reference/functions/#parse_int","title":"parse_int","text":"<pre><code>parse_int(input str) -&gt; int, err\n</code></pre>"},{"location":"reference/functions/#parse_float","title":"parse_float","text":"<pre><code>parse_float(input str) -&gt; float, err\n</code></pre>"},{"location":"reference/functions/#parse_json","title":"parse_json","text":"<pre><code>parse_json(input string) -&gt; any\n</code></pre>"},{"location":"reference/functions/#time","title":"Time","text":""},{"location":"reference/functions/#now_date","title":"now_date","text":"<pre><code>now_date() -&gt; string  // e.g. \"2006-11-25\"\n</code></pre>"},{"location":"reference/functions/#now_year","title":"now_year","text":"<pre><code>now_year() -&gt; int  // e.g. 2006\n</code></pre>"},{"location":"reference/functions/#now_month","title":"now_month","text":"<pre><code>now_month() -&gt; int  // e.g. 11\n</code></pre>"},{"location":"reference/functions/#now_day","title":"now_day","text":"<pre><code>now_day() -&gt; int  // e.g. 25\n</code></pre>"},{"location":"reference/functions/#now_hour","title":"now_hour","text":"<pre><code>now_hour() -&gt; int  // e.g. 14\n</code></pre>"},{"location":"reference/functions/#now_minute","title":"now_minute","text":"<pre><code>now_minute() -&gt; int  // e.g. 31\n</code></pre>"},{"location":"reference/functions/#now_second","title":"now_second","text":"<pre><code>now_second() -&gt; int  // e.g. 35\n</code></pre>"},{"location":"reference/functions/#epoch_seconds","title":"epoch_seconds","text":"<pre><code>epoch_seconds() -&gt; int  // e.g. 1731063226\n</code></pre>"},{"location":"reference/functions/#epoch_millis","title":"epoch_millis","text":"<pre><code>epoch_millis() -&gt; int  // e.g. 1731063226123\n</code></pre>"},{"location":"reference/functions/#epoch_nanos","title":"epoch_nanos","text":"<pre><code>epoch_nanos() -&gt; int  // e.g. 1731063226123456789\n</code></pre>"},{"location":"reference/functions/#text","title":"Text","text":""},{"location":"reference/functions/#upper","title":"upper","text":"<ul> <li>Preserves string color attributes.</li> </ul> <pre><code>upper(input any) -&gt; string\n</code></pre>"},{"location":"reference/functions/#lower","title":"lower","text":"<ul> <li>Preserves string color attributes.</li> </ul> <pre><code>lower(input any) -&gt; string\n</code></pre>"},{"location":"reference/functions/#replace","title":"replace","text":"<ul> <li>Does not preserve string color attributes.</li> </ul> <p>Parameters:</p> <ul> <li><code>input: string</code></li> <li><code>old: string</code>: Regex pattern of what text to replace.</li> <li><code>new: string</code>: Regex pattern of what to replace matches with.</li> </ul> <pre><code>replace(input string, old string, new string) -&gt; string\n</code></pre> <p>Examples:</p> Example 1<pre><code>input = \"Name: Charlie Brown\"\nreplace(input, \"Charlie (.*)\", \"Alice $1\") \n</code></pre> Example 1 Output<pre><code>\"Alice Brown\" \n</code></pre>"},{"location":"reference/functions/#starts_with","title":"starts_with","text":"<pre><code>starts_with(input string, substring string) -&gt; bool\n</code></pre>"},{"location":"reference/functions/#ends_with","title":"ends_with","text":"<pre><code>ends_with(input string, substring string) -&gt; bool\n</code></pre>"},{"location":"reference/functions/#truncate","title":"truncate","text":"<pre><code>truncate(input string, length int) -&gt; string\n</code></pre>"},{"location":"reference/functions/#split","title":"split","text":"<ul> <li>Does not preserve string color attributes.</li> </ul> <pre><code>split(input string, delimiter_regex string) -&gt; string[]\n</code></pre>"},{"location":"reference/functions/#maps","title":"Maps","text":""},{"location":"reference/functions/#keys","title":"keys","text":"<pre><code>keys(input map) -&gt; any[]\n</code></pre>"},{"location":"reference/functions/#values","title":"values","text":"<pre><code>values(input map) -&gt; any[]\n</code></pre>"},{"location":"reference/functions/#random","title":"Random","text":""},{"location":"reference/functions/#rand","title":"rand","text":"<pre><code>rand() -&gt; float\n</code></pre>"},{"location":"reference/functions/#rand_int","title":"rand_int","text":"<pre><code>rand_int(max int) -&gt; int\nrand_int(min int, max int) -&gt; int\n</code></pre>"},{"location":"reference/functions/#seed_random","title":"seed_random","text":"<pre><code>seed_random(seed int)\n</code></pre>"},{"location":"reference/functions/#picking","title":"Picking","text":""},{"location":"reference/functions/#pick","title":"pick","text":"<pre><code>pick(options string[], filter string?) -&gt; string\n</code></pre> <p>Named args: - <code>prompt</code></p>"},{"location":"reference/functions/#pick_kv","title":"pick_kv","text":"<pre><code>pick_kv(keys string[], values string[], filter string?) -&gt; string\n</code></pre> <p>Named args: - <code>prompt</code></p>"},{"location":"reference/functions/#pick_from_resource","title":"pick_from_resource","text":"<pre><code>pick_from_resource(resource_path string, filter string?) -&gt; any...\n</code></pre>"},{"location":"reference/functions/#http","title":"HTTP","text":"<p>Map outputs contain the following keys: - <code>status_code</code> - <code>body</code></p> <p>Failed queries (e.g. invalid url, no response) will result in an error and script exit.</p>"},{"location":"reference/functions/#http_get","title":"http_get","text":"<pre><code>http_get(url string, headers map?) -&gt; map\n</code></pre>"},{"location":"reference/functions/#http_post","title":"http_post","text":"<pre><code>http_post(url string, body any?, headers map?) -&gt; map\n</code></pre>"},{"location":"reference/functions/#math","title":"Math","text":""},{"location":"reference/functions/#abs","title":"abs","text":"<pre><code>abs(int) -&gt; int\nabs(float) -&gt; float\n</code></pre>"},{"location":"reference/logic/","title":"Boolean Logic","text":""},{"location":"reference/logic/#truthy-falsy","title":"Truthy / Falsy","text":"<p>RSL supports truthy/falsy logic.</p> <p>For those unfamiliar, this means that, instead of writing the following (as an example):</p> <pre><code>if len(myList) &gt; 0:\n    print(\"My list has elements!\")\n</code></pre> <p>you can write</p> <pre><code>if myList:\n    print(\"My list has elements!\")\n</code></pre> <p>Essentially, you can use any type as a condition, and it will resolve to true or false depending on the value.</p> <p>See below for which values for each type will resolve to false. All other values will resolve to true.</p> Type Falsy string <code>\"\"</code> int <code>0</code> float <code>0.0</code> list <code>[]</code> map <code>{}</code> <p>Note that a string which is all whitespace e.g. <code>\" \"</code> is truthy.</p>"},{"location":"reference/rad-blocks/","title":"Rad Blocks","text":""},{"location":"reference/rad-blocks/#rad-block","title":"<code>rad</code> block","text":"<pre><code>rad url:\n    fields Name, Birthdate, Height\n    Name:\n        map n -&gt; truncate(n, 20)\n    if sort_by_height:\n        sort Height, Name, Birthdate\n    else:\n        sort\n</code></pre>"},{"location":"reference/rad-blocks/#request-block","title":"<code>request</code> block","text":"<pre><code>request url:\n    fields Name, Birthdate, Height\n</code></pre>"},{"location":"reference/rad-blocks/#display-block","title":"<code>display</code> block","text":"<pre><code>display:\n    fields Name, Birthdate, Height\n</code></pre>"},{"location":"reference/shell-commands/","title":"Shell Commands","text":""},{"location":"reference/shell-commands/#basic-shell-commands","title":"Basic Shell Commands","text":"<pre><code>$`ls -l`\nfail:\n    print(\"Command failed! Exiting script!\")\n</code></pre> <pre><code>$`ls -l`\nrecover:\n    print(\"Command failed! Continuing script...\")\n</code></pre>"},{"location":"reference/shell-commands/#critical-shell-commands","title":"Critical Shell Commands","text":"<pre><code>$!`ls -l`\n</code></pre>"},{"location":"reference/shell-commands/#unsafe-shell-commands","title":"Unsafe Shell Commands","text":"<pre><code>unsafe $`ls -l`\n</code></pre>"},{"location":"reference/shell-commands/#output-capture","title":"Output Capture","text":"<pre><code>err_code = $!`ls -l`\nerr_code, stdout = $!`ls -l`\nerr_code, stdout, stderr = $!`ls -l`\n</code></pre>"},{"location":"reference/shell-commands/#suppress-announcements","title":"Suppress Announcements","text":"<p>By default, Rad will 'announce' (i.e. print) commands as they're executed. Example:</p> Without quiet<pre><code>$!`ls`\n$!`echo hello`\n</code></pre> Without quiet output<pre><code>\u26a1\ufe0f Running: ls\npick.rsl  simple.rsl  sorting.rsl\n\u26a1\ufe0f Running: echo hello\nhello\n</code></pre> <p>These announcements can be suppressed with the <code>quiet</code> keyword. It does not impact stdout/stderr output for the command.</p> With quiet<pre><code>quiet $!`ls`\nquiet $!`echo hello`\n</code></pre> With quiet output<pre><code>pick.rsl  simple.rsl  sorting.rsl\nhello\n</code></pre>"},{"location":"reference/strings/","title":"Strings","text":""},{"location":"reference/strings/#escaping","title":"Escaping","text":"<ul> <li><code>\"double quote strings\"</code> and <code>'single quote strings'</code> have the same rules around escaping.</li> <li><code>`backtick strings`</code> have slightly different rules (less escaping).</li> </ul>"},{"location":"reference/strings/#double-single-quotes","title":"Double &amp; Single Quotes","text":"<ul> <li><code>\\</code> will escape:<ul> <li><code>{</code> (to prevent string interpolation)</li> <li><code>\\n</code> new line</li> <li><code>\\t</code> tab</li> <li><code>\\</code> i.e. itself, so you can write backslashes</li> <li>The respective quote char itself, so <code>\"\\\"\"</code> and <code>'\\''</code><ul> <li>However, it's advised to instead mix string delimiters instead, especially with backticks. So respectively: <code>`\"`</code>, <code>`'`</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/strings/#backticks","title":"Backticks","text":"<ul> <li><code>\\</code> will escape:<ul> <li><code>{</code> (to prevent string interpolation)</li> <li><code>`</code> to allow backticks in the string</li> </ul> </li> </ul>"},{"location":"reference/strings/#string-attributes","title":"String Attributes","text":"<ul> <li>Not all strings are just plain text. They may have attributes such as color.</li> <li>This means that RSL contains logic on how to handle attributes when strings are combined or operated on<ul> <li>e.g. concatenation, slicing, replace functions, etc</li> </ul> </li> <li>The following operations maintain color attributes:<ul> <li>concatenation</li> <li>index lookup</li> </ul> </li> <li>The following do not, and just return a plain string:<ul> <li>slicing (to be added)</li> <li>functions: <code>replace</code>, <code>split</code></li> </ul> </li> <li>Attributes do not impact things like equality or comparing strings.<ul> <li>A green string \"Alice\" and a yellow string \"Alice\" will be considered 'equal'.</li> </ul> </li> </ul>"},{"location":"reference/strings/#formatting","title":"Formatting","text":"<ul> <li>Float formatting does not require a <code>f</code> at the end.<ul> <li>Correct: <code>{myFloat:.2}</code></li> <li>Incorrect: <code>{myFloat:.2f}</code></li> </ul> </li> </ul> <p>Examples:</p> <pre><code>\"{myString:20}\"\n\"{myString:&lt;20}\"\n\"{myString:&gt;20}\"\n\"{myFloat:.2}\"\n</code></pre>"}]}