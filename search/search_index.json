{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"functions/","title":"Functions","text":"<p>RSL has functions.</p> <p>Reference</p>"},{"location":"rad-blocks/","title":"Rad Blocks","text":""},{"location":"rad-blocks/#rad-block","title":"<code>rad</code> block","text":"<pre><code>rad url:\n    fields Name, Birthdate, Height\n    Name:\n        map n -&gt; truncate(n, 20)\n    if sort_by_height:\n        sort Height, Name, Birthdate\n    else:\n        sort\n</code></pre>"},{"location":"rad-blocks/#request-block","title":"<code>request</code> block","text":"<pre><code>request url:\n    fields Name, Birthdate, Height\n</code></pre>"},{"location":"rad-blocks/#display-block","title":"<code>display</code> block","text":"<pre><code>display:\n    fields Name, Birthdate, Height\n</code></pre>"},{"location":"shell-commands/","title":"Shell Commands","text":""},{"location":"shell-commands/#basic-shell-commands","title":"Basic Shell Commands","text":"<pre><code>$`ls -l`\nfail:\n    print(\"Command failed! Exiting script!\")\n</code></pre> <pre><code>$`ls -l`\nrecover:\n    print(\"Command failed! Continuing script...\")\n</code></pre>"},{"location":"shell-commands/#critical-shell-commands","title":"Critical Shell Commands","text":"<pre><code>$!`ls -l`\n</code></pre>"},{"location":"shell-commands/#unsafe-shell-commands","title":"Unsafe Shell Commands","text":"<pre><code>unsafe $`ls -l`\n</code></pre>"},{"location":"shell-commands/#output-capture","title":"Output Capture","text":"<pre><code>err_code = $!`ls -l`\nerr_code, stdout = $!`ls -l`\nerr_code, stdout, stderr = $!`ls -l`\n</code></pre>"},{"location":"reference/ref-functions/","title":"Functions","text":""},{"location":"reference/ref-functions/#output","title":"Output","text":""},{"location":"reference/ref-functions/#print","title":"print","text":"<p>Description:</p> <p>Prints the given input. Includes a newline after. Stringifies whatever is given to it.</p> <pre><code>print(items ...any?)\n</code></pre> <p>Parameters:</p> <ul> <li><code>items: ...any?</code>: Zero or more items to print. If several are given, they get printed separated by spaces.</li> </ul> <p>Examples:</p> <pre><code>print(\"Hello!\")\n</code></pre> <pre><code>name = \"Alice\"\nprint(\"Hello\", name)  // prints \"Hello Alice\"\n</code></pre> <pre><code>print()  // prints a newline\n</code></pre> <pre><code>numbers = [1, 20, 300]\nprint(numbers)  // prints \"[1, 20, 300]\"\n</code></pre>"},{"location":"reference/ref-functions/#pprint","title":"pprint","text":"<p>Description:</p> <p>Pretty prints the given input. Mainly useful for maps so they get printed in a json-style.</p> <pre><code>pprint(item any?)\n</code></pre> <p>Parameters:</p> <ul> <li><code>input: any?</code>: Zero or one item to pretty print. If zero, just prints a newline.</li> </ul> <p>Examples:</p> Example 1<pre><code>item = { \"name\": \"Alice\", age: 30 }\npprint(item)\n</code></pre> Example 1 Output<pre><code>{\n  \"name\": \"Alice\",\n  \"age\": 30\n}\n</code></pre>"},{"location":"reference/ref-functions/#debug","title":"debug","text":"<p>Behaves like <code>print</code> but only prints if debug is enabled via the <code>--DEBUG</code> flag.</p> <pre><code>debug(items ...any?)\n</code></pre>"},{"location":"reference/ref-functions/#misc","title":"Misc","text":""},{"location":"reference/ref-functions/#exit","title":"exit","text":"<pre><code>exit(code int = 0)\n</code></pre>"},{"location":"reference/ref-functions/#sleep","title":"sleep","text":"<pre><code>sleep(seconds int)\nsleep(seconds float)\nsleep(duration string)\n</code></pre>"},{"location":"reference/ref-functions/#len","title":"len","text":"<pre><code>len(input string) -&gt; int\nlen(input any[]) -&gt; int\nlen(input map) -&gt; int\n</code></pre>"},{"location":"reference/ref-functions/#range","title":"range","text":"<pre><code>range(end int|float) -&gt; int|float[]\nrange(start int|float, end int|float) -&gt; int|float[]\nrange(start int|float, end int|float, step int|float) -&gt; int|float[]\n</code></pre> <pre><code>range(5)         -&gt; [0, 1, 2, 3, 4]\nrange(5.5)       -&gt; [0, 1, 2, 3, 4, 5]\nrange(0.5, 5)    -&gt; [0.5, 1.5, 2.5, 3.5, 4.5]\nrange(10, 5, -2) -&gt; [10, 8, 6]\n</code></pre>"},{"location":"reference/ref-functions/#confirm","title":"confirm","text":"<pre><code>confirm() -&gt; bool\nconfirm(prompt string) -&gt; bool\n</code></pre> Example 1<pre><code>if confirm():\n    print(\"Confirmed!\")\nelse:\n    print(\"Not confirmed!\")\n</code></pre> Example 1 Output<pre><code>Confirm? [y/n] y\nConfirmed!\n</code></pre> Example 2<pre><code>if confirm(\"Are you sure? &gt; \"):\n    print(\"You're sure!\")\nelse:\n    print(\"Unsure!\")\n</code></pre> Example 2 Output<pre><code>Are you sure? &gt; n\nUnsure!\n</code></pre>"},{"location":"reference/ref-functions/#join","title":"join","text":"<pre><code>join(input any[], prefix string|int|float|bool?, suffix string|int|float|bool?) -&gt; string\n</code></pre>"},{"location":"reference/ref-functions/#unique","title":"unique","text":"<pre><code>unique(input any[]) -&gt; any[]\n</code></pre> <pre><code>unique([2, 1, 2, 3, 1, 3, 4])  // [2, 1, 3, 4]\n</code></pre>"},{"location":"reference/ref-functions/#time","title":"Time","text":""},{"location":"reference/ref-functions/#now_date","title":"now_date","text":"<pre><code>now_date() -&gt; string  // e.g. \"2006-11-25\"\n</code></pre>"},{"location":"reference/ref-functions/#now_year","title":"now_year","text":"<pre><code>now_year() -&gt; int  // e.g. 2006\n</code></pre>"},{"location":"reference/ref-functions/#now_month","title":"now_month","text":"<pre><code>now_month() -&gt; int  // e.g. 11\n</code></pre>"},{"location":"reference/ref-functions/#now_day","title":"now_day","text":"<pre><code>now_day() -&gt; int  // e.g. 25\n</code></pre>"},{"location":"reference/ref-functions/#now_hour","title":"now_hour","text":"<pre><code>now_hour() -&gt; int  // e.g. 14\n</code></pre>"},{"location":"reference/ref-functions/#now_minute","title":"now_minute","text":"<pre><code>now_minute() -&gt; int  // e.g. 31\n</code></pre>"},{"location":"reference/ref-functions/#now_second","title":"now_second","text":"<pre><code>now_second() -&gt; int  // e.g. 35\n</code></pre>"},{"location":"reference/ref-functions/#epoch_seconds","title":"epoch_seconds","text":"<pre><code>epoch_seconds() -&gt; int  // e.g. 1731063226\n</code></pre>"},{"location":"reference/ref-functions/#epoch_millis","title":"epoch_millis","text":"<pre><code>epoch_millis() -&gt; int  // e.g. 1731063226123\n</code></pre>"},{"location":"reference/ref-functions/#epoch_nanos","title":"epoch_nanos","text":"<pre><code>epoch_nanos() -&gt; int  // e.g. 1731063226123456789\n</code></pre>"},{"location":"reference/ref-functions/#text","title":"Text","text":""},{"location":"reference/ref-functions/#upper","title":"upper","text":"<pre><code>upper(input any) -&gt; string\n</code></pre>"},{"location":"reference/ref-functions/#lower","title":"lower","text":"<pre><code>lower(input any) -&gt; string\n</code></pre>"},{"location":"reference/ref-functions/#replace","title":"replace","text":"<p>Parameters:</p> <ul> <li><code>input: string</code></li> <li><code>old: string</code>: Regex pattern of what text to replace.</li> <li><code>new: string</code>: Regex pattern of what to replace matches with.</li> </ul> <pre><code>replace(input string, old string, new string) -&gt; string\n</code></pre> <p>Examples:</p> Example 1<pre><code>input = \"Name: Charlie Brown\"\nreplace(input, \"Charlie (.*)\", \"Alice $1\") \n</code></pre> Example 1 Output<pre><code>\"Alice Brown\" \n</code></pre>"},{"location":"reference/ref-functions/#starts_with","title":"starts_with","text":"<pre><code>starts_with(input string, substring string) -&gt; bool\n</code></pre>"},{"location":"reference/ref-functions/#ends_with","title":"ends_with","text":"<pre><code>ends_with(input string, substring string) -&gt; bool\n</code></pre>"},{"location":"reference/ref-functions/#truncate","title":"truncate","text":"<pre><code>truncate(input string, length int) -&gt; string\n</code></pre>"},{"location":"reference/ref-functions/#split","title":"split","text":"<pre><code>split(input string, delimiter_regex string) -&gt; string[]\n</code></pre>"},{"location":"reference/ref-functions/#maps","title":"Maps","text":""},{"location":"reference/ref-functions/#keys","title":"keys","text":"<pre><code>keys(input map) -&gt; any[]\n</code></pre>"},{"location":"reference/ref-functions/#values","title":"values","text":"<pre><code>values(input map) -&gt; any[]\n</code></pre>"},{"location":"reference/ref-functions/#random","title":"Random","text":""},{"location":"reference/ref-functions/#rand","title":"rand","text":"<pre><code>rand() -&gt; float\n</code></pre>"},{"location":"reference/ref-functions/#rand_int","title":"rand_int","text":"<pre><code>rand_int(max int) -&gt; int\nrand_int(min int, max int) -&gt; int\n</code></pre>"},{"location":"reference/ref-functions/#seed_random","title":"seed_random","text":"<pre><code>seed_random(seed int)\n</code></pre>"},{"location":"reference/ref-functions/#picking","title":"Picking","text":""},{"location":"reference/ref-functions/#pick","title":"pick","text":"<pre><code>pick(options string[], filter string?)\n</code></pre>"},{"location":"reference/ref-functions/#pick_kv","title":"pick_kv","text":"<pre><code>pick_kv(keys string[], values string[], filter string?)\n</code></pre>"},{"location":"reference/ref-functions/#pick_from_resource","title":"pick_from_resource","text":"<pre><code>pick_from_resource(resource_path string, filter string?)\n</code></pre>"}]}