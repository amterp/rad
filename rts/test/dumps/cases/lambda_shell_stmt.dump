=====
Lambda shell stmt
=====
fn() $`echo hi`
fn() ($`echo hi`)
=====
B: [ 0, 34] PS: [0,  0] PE: [2,  0] source_file
B: [ 0, 15] PS: [0,  0] PE: [0, 15]   expr_stmt
B: [ 0, 15] PS: [0,  0] PE: [0, 15]     expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]       delegate: ternary_expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]         delegate: or_expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]           delegate: and_expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]             delegate: compare_expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]               delegate: add_expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]                 delegate: mult_expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]                   delegate: unary_expr
B: [ 0, 15] PS: [0,  0] PE: [0, 15]                     delegate: fn_lambda
B: [ 0,  2] PS: [0,  0] PE: [0,  2]                       keyword: fn `fn`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                       ( `(`
B: [ 3,  4] PS: [0,  3] PE: [0,  4]                       ) `)`
B: [ 5, 15] PS: [0,  5] PE: [0, 15]                       stmt: shell_stmt
B: [ 5, 15] PS: [0,  5] PE: [0, 15]                         shell_cmd: shell_cmd
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                           $ `$`
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                           command: expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                             delegate: ternary_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                               delegate: or_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                 delegate: and_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                   delegate: compare_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                     delegate: add_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                       delegate: mult_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                         delegate: unary_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                           delegate: fallback_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                             delegate: indexed_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                               root: primary_expr
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                                 literal
B: [ 6, 15] PS: [0,  6] PE: [0, 15]                                                   string
B: [ 6,  7] PS: [0,  6] PE: [0,  7]                                                     start: string_start ```
B: [ 7, 14] PS: [0,  7] PE: [0, 14]                                                     contents: string_contents
B: [ 7, 14] PS: [0,  7] PE: [0, 14]                                                       content: string_content `echo hi`
B: [14, 15] PS: [0, 14] PE: [0, 15]                                                     end: string_end ```
B: [16, 33] PS: [1,  0] PE: [1, 17]   expr_stmt
B: [16, 33] PS: [1,  0] PE: [1, 17]     expr
B: [16, 33] PS: [1,  0] PE: [1, 17]       delegate: ternary_expr
B: [16, 33] PS: [1,  0] PE: [1, 17]         delegate: or_expr
B: [16, 33] PS: [1,  0] PE: [1, 17]           delegate: and_expr
B: [16, 33] PS: [1,  0] PE: [1, 17]             delegate: compare_expr
B: [16, 33] PS: [1,  0] PE: [1, 17]               delegate: add_expr
B: [16, 33] PS: [1,  0] PE: [1, 17]                 delegate: mult_expr
B: [16, 33] PS: [1,  0] PE: [1, 17]                   delegate: unary_expr
B: [16, 33] PS: [1,  0] PE: [1, 17]                     delegate: fn_lambda
B: [16, 18] PS: [1,  0] PE: [1,  2]                       keyword: fn `fn`
B: [18, 19] PS: [1,  2] PE: [1,  3]                       ( `(`
B: [19, 20] PS: [1,  3] PE: [1,  4]                       ) `)`
B: [21, 22] PS: [1,  5] PE: [1,  6]                       ( `(`
B: [22, 32] PS: [1,  6] PE: [1, 16]                       stmt: shell_stmt
B: [22, 32] PS: [1,  6] PE: [1, 16]                         shell_cmd: shell_cmd
B: [22, 23] PS: [1,  6] PE: [1,  7]                           $ `$`
B: [23, 32] PS: [1,  7] PE: [1, 16]                           command: expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                             delegate: ternary_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                               delegate: or_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                 delegate: and_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                   delegate: compare_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                     delegate: add_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                       delegate: mult_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                         delegate: unary_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                           delegate: fallback_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                             delegate: indexed_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                               root: primary_expr
B: [23, 32] PS: [1,  7] PE: [1, 16]                                                 literal
B: [23, 32] PS: [1,  7] PE: [1, 16]                                                   string
B: [23, 24] PS: [1,  7] PE: [1,  8]                                                     start: string_start ```
B: [24, 31] PS: [1,  8] PE: [1, 15]                                                     contents: string_contents
B: [24, 31] PS: [1,  8] PE: [1, 15]                                                       content: string_content `echo hi`
B: [31, 32] PS: [1, 15] PE: [1, 16]                                                     end: string_end ```
B: [32, 33] PS: [1, 16] PE: [1, 17]                       ) `)`
