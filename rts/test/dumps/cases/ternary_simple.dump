=====
Ternary simple
=====
c = a < 10 ? "smaller!" : "bigger!"
=====
B: [ 0, 36] PS: [0,  0] PE: [1,  0] source_file
B: [ 0, 35] PS: [0,  0] PE: [0, 35]   assign
B: [ 0,  1] PS: [0,  0] PE: [0,  1]     left: var_path
B: [ 0,  1] PS: [0,  0] PE: [0,  1]       root: identifier `c`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]     = `=`
B: [ 4, 35] PS: [0,  4] PE: [0, 35]     right: expr
B: [ 4, 35] PS: [0,  4] PE: [0, 35]       delegate: ternary_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]         condition: or_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]           delegate: and_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]             delegate: compare_expr
B: [ 4,  5] PS: [0,  4] PE: [0,  5]               left: compare_expr
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                 delegate: add_expr
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                   delegate: mult_expr
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                     delegate: unary_expr
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                       delegate: var_path
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                         root: identifier `a`
B: [ 6,  7] PS: [0,  6] PE: [0,  7]               op: < `<`
B: [ 8, 10] PS: [0,  8] PE: [0, 10]               right: add_expr
B: [ 8, 10] PS: [0,  8] PE: [0, 10]                 delegate: mult_expr
B: [ 8, 10] PS: [0,  8] PE: [0, 10]                   delegate: unary_expr
B: [ 8, 10] PS: [0,  8] PE: [0, 10]                     delegate: indexed_expr
B: [ 8, 10] PS: [0,  8] PE: [0, 10]                       root: primary_expr
B: [ 8, 10] PS: [0,  8] PE: [0, 10]                         literal
B: [ 8, 10] PS: [0,  8] PE: [0, 10]                           int `10`
B: [11, 12] PS: [0, 11] PE: [0, 12]         ? `?`
B: [13, 23] PS: [0, 13] PE: [0, 23]         true_branch: expr
B: [13, 23] PS: [0, 13] PE: [0, 23]           delegate: ternary_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]             delegate: or_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]               delegate: and_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]                 delegate: compare_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]                   delegate: add_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]                     delegate: mult_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]                       delegate: unary_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]                         delegate: indexed_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]                           root: primary_expr
B: [13, 23] PS: [0, 13] PE: [0, 23]                             literal
B: [13, 23] PS: [0, 13] PE: [0, 23]                               string
B: [13, 14] PS: [0, 13] PE: [0, 14]                                 start: string_start `"`
B: [14, 22] PS: [0, 14] PE: [0, 22]                                 contents: string_contents
B: [14, 22] PS: [0, 14] PE: [0, 22]                                   content: string_content `smaller!`
B: [22, 23] PS: [0, 22] PE: [0, 23]                                 end: string_end `"`
B: [24, 25] PS: [0, 24] PE: [0, 25]         : `:`
B: [26, 35] PS: [0, 26] PE: [0, 35]         false_branch: ternary_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]           delegate: or_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]             delegate: and_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]               delegate: compare_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]                 delegate: add_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]                   delegate: mult_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]                     delegate: unary_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]                       delegate: indexed_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]                         root: primary_expr
B: [26, 35] PS: [0, 26] PE: [0, 35]                           literal
B: [26, 35] PS: [0, 26] PE: [0, 35]                             string
B: [26, 27] PS: [0, 26] PE: [0, 27]                               start: string_start `"`
B: [27, 34] PS: [0, 27] PE: [0, 34]                               contents: string_contents
B: [27, 34] PS: [0, 27] PE: [0, 34]                                 content: string_content `bigger!`
B: [34, 35] PS: [0, 34] PE: [0, 35]                               end: string_end `"`
