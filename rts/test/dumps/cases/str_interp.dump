=====
Str interp
=====
a = "hello"
b = "there {1 + 1}"
if true:
	c = "world!"
=====
B: [ 0, 55] PS: [0,  0] PE: [4,  0] source_file
B: [ 0, 11] PS: [0,  0] PE: [0, 11]   assign
B: [ 0,  1] PS: [0,  0] PE: [0,  1]     left: var_path
B: [ 0,  1] PS: [0,  0] PE: [0,  1]       root: identifier `a`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]     = `=`
B: [ 4, 11] PS: [0,  4] PE: [0, 11]     right: expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]       ternary_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]         delegate: or_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]           delegate: and_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]             delegate: compare_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]               delegate: add_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]                 delegate: mult_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]                   delegate: unary_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]                     delegate: indexed_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]                       root: primary_expr
B: [ 4, 11] PS: [0,  4] PE: [0, 11]                         literal
B: [ 4, 11] PS: [0,  4] PE: [0, 11]                           string
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                             start: string_start `"`
B: [ 5, 10] PS: [0,  5] PE: [0, 10]                             contents: string_contents
B: [ 5, 10] PS: [0,  5] PE: [0, 10]                               content: string_content `hello`
B: [10, 11] PS: [0, 10] PE: [0, 11]                             end: string_end `"`
B: [12, 31] PS: [1,  0] PE: [1, 19]   assign
B: [12, 13] PS: [1,  0] PE: [1,  1]     left: var_path
B: [12, 13] PS: [1,  0] PE: [1,  1]       root: identifier `b`
B: [14, 15] PS: [1,  2] PE: [1,  3]     = `=`
B: [16, 31] PS: [1,  4] PE: [1, 19]     right: expr
B: [16, 31] PS: [1,  4] PE: [1, 19]       ternary_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]         delegate: or_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]           delegate: and_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]             delegate: compare_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]               delegate: add_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]                 delegate: mult_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]                   delegate: unary_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]                     delegate: indexed_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]                       root: primary_expr
B: [16, 31] PS: [1,  4] PE: [1, 19]                         literal
B: [16, 31] PS: [1,  4] PE: [1, 19]                           string
B: [16, 17] PS: [1,  4] PE: [1,  5]                             start: string_start `"`
B: [17, 30] PS: [1,  5] PE: [1, 18]                             contents: string_contents
B: [17, 23] PS: [1,  5] PE: [1, 11]                               content: string_content `there `
B: [23, 30] PS: [1, 11] PE: [1, 18]                               interpolation: interpolation
B: [23, 24] PS: [1, 11] PE: [1, 12]                                 { `{`
B: [24, 29] PS: [1, 12] PE: [1, 17]                                 expr: expr
B: [24, 29] PS: [1, 12] PE: [1, 17]                                   ternary_expr
B: [24, 29] PS: [1, 12] PE: [1, 17]                                     delegate: or_expr
B: [24, 29] PS: [1, 12] PE: [1, 17]                                       delegate: and_expr
B: [24, 29] PS: [1, 12] PE: [1, 17]                                         delegate: compare_expr
B: [24, 29] PS: [1, 12] PE: [1, 17]                                           delegate: add_expr
B: [24, 25] PS: [1, 12] PE: [1, 13]                                             left: add_expr
B: [24, 25] PS: [1, 12] PE: [1, 13]                                               delegate: mult_expr
B: [24, 25] PS: [1, 12] PE: [1, 13]                                                 delegate: unary_expr
B: [24, 25] PS: [1, 12] PE: [1, 13]                                                   delegate: indexed_expr
B: [24, 25] PS: [1, 12] PE: [1, 13]                                                     root: primary_expr
B: [24, 25] PS: [1, 12] PE: [1, 13]                                                       literal
B: [24, 25] PS: [1, 12] PE: [1, 13]                                                         int `1`
B: [26, 27] PS: [1, 14] PE: [1, 15]                                             op: + `+`
B: [28, 29] PS: [1, 16] PE: [1, 17]                                             right: mult_expr
B: [28, 29] PS: [1, 16] PE: [1, 17]                                               delegate: unary_expr
B: [28, 29] PS: [1, 16] PE: [1, 17]                                                 delegate: indexed_expr
B: [28, 29] PS: [1, 16] PE: [1, 17]                                                   root: primary_expr
B: [28, 29] PS: [1, 16] PE: [1, 17]                                                     literal
B: [28, 29] PS: [1, 16] PE: [1, 17]                                                       int `1`
B: [29, 30] PS: [1, 17] PE: [1, 18]                                 } `}`
B: [30, 31] PS: [1, 18] PE: [1, 19]                             end: string_end `"`
B: [32, 54] PS: [2,  0] PE: [3, 13]   if_stmt
B: [32, 54] PS: [2,  0] PE: [3, 13]     alt: if_alt
B: [32, 34] PS: [2,  0] PE: [2,  2]       if `if`
B: [35, 39] PS: [2,  3] PE: [2,  7]       condition: expr
B: [35, 39] PS: [2,  3] PE: [2,  7]         ternary_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]           delegate: or_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]             delegate: and_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]               delegate: compare_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]                 delegate: add_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]                   delegate: mult_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]                     delegate: unary_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]                       delegate: indexed_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]                         root: primary_expr
B: [35, 39] PS: [2,  3] PE: [2,  7]                           literal
B: [35, 39] PS: [2,  3] PE: [2,  7]                             bool
B: [35, 39] PS: [2,  3] PE: [2,  7]                               true `true`
B: [39, 40] PS: [2,  7] PE: [2,  8]       : `:`
B: [42, 54] PS: [3,  1] PE: [3, 13]       stmt: assign
B: [42, 43] PS: [3,  1] PE: [3,  2]         left: var_path
B: [42, 43] PS: [3,  1] PE: [3,  2]           root: identifier `c`
B: [44, 45] PS: [3,  3] PE: [3,  4]         = `=`
B: [46, 54] PS: [3,  5] PE: [3, 13]         right: expr
B: [46, 54] PS: [3,  5] PE: [3, 13]           ternary_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]             delegate: or_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]               delegate: and_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]                 delegate: compare_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]                   delegate: add_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]                     delegate: mult_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]                       delegate: unary_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]                         delegate: indexed_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]                           root: primary_expr
B: [46, 54] PS: [3,  5] PE: [3, 13]                             literal
B: [46, 54] PS: [3,  5] PE: [3, 13]                               string
B: [46, 47] PS: [3,  5] PE: [3,  6]                                 start: string_start `"`
B: [47, 53] PS: [3,  6] PE: [3, 12]                                 contents: string_contents
B: [47, 53] PS: [3,  6] PE: [3, 12]                                   content: string_content `world!`
B: [53, 54] PS: [3, 12] PE: [3, 13]                                 end: string_end `"`
