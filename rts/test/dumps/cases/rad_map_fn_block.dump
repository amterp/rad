=====
Lambda block in rad map
=====
rad url:
    fields Name, Age
    Age:
        map fn(n):
            out = n * 2
            return out
=====
B: [  0, 105] PS: [0,  0] PE: [6,  0] source_file
B: [  0, 104] PS: [0,  0] PE: [5, 22]   rad_block
B: [  0,   3] PS: [0,  0] PE: [0,  3]     rad_type: rad_keyword `rad`
B: [  4,   7] PS: [0,  4] PE: [0,  7]     source: expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]       ternary_expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]         delegate: or_expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]           delegate: and_expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]             delegate: compare_expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]               delegate: add_expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]                 delegate: mult_expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]                   delegate: unary_expr
B: [  4,   7] PS: [0,  4] PE: [0,  7]                     delegate: var_path
B: [  4,   7] PS: [0,  4] PE: [0,  7]                       root: identifier `url`
B: [  7,   8] PS: [0,  7] PE: [0,  8]     : `:`
B: [ 13,  29] PS: [1,  4] PE: [1, 20]     stmt: rad_field_stmt
B: [ 13,  19] PS: [1,  4] PE: [1, 10]       fields `fields`
B: [ 20,  24] PS: [1, 11] PE: [1, 15]       identifier: identifier `Name`
B: [ 24,  25] PS: [1, 15] PE: [1, 16]       , `,`
B: [ 26,  29] PS: [1, 17] PE: [1, 20]       identifier: identifier `Age`
B: [ 34, 104] PS: [2,  4] PE: [5, 22]     stmt: rad_field_modifier_stmt
B: [ 34,  37] PS: [2,  4] PE: [2,  7]       identifier: identifier `Age`
B: [ 37,  38] PS: [2,  7] PE: [2,  8]       : `:`
B: [ 47, 104] PS: [3,  8] PE: [5, 22]       mod_stmt: rad_field_mod_map
B: [ 47,  50] PS: [3,  8] PE: [3, 11]         map `map`
B: [ 51, 104] PS: [3, 12] PE: [5, 22]         lambda: fn_block
B: [ 51,  53] PS: [3, 12] PE: [3, 14]           keyword: fn `fn`
B: [ 53,  54] PS: [3, 14] PE: [3, 15]           ( `(`
B: [ 54,  55] PS: [3, 15] PE: [3, 16]           param: identifier `n`
B: [ 55,  56] PS: [3, 16] PE: [3, 17]           ) `)`
B: [ 56,  57] PS: [3, 17] PE: [3, 18]           : `:`
B: [ 70,  81] PS: [4, 12] PE: [4, 23]           stmt: assign
B: [ 70,  73] PS: [4, 12] PE: [4, 15]             left: var_path
B: [ 70,  73] PS: [4, 12] PE: [4, 15]               root: identifier `out`
B: [ 74,  75] PS: [4, 16] PE: [4, 17]             = `=`
B: [ 76,  81] PS: [4, 18] PE: [4, 23]             right: expr
B: [ 76,  81] PS: [4, 18] PE: [4, 23]               ternary_expr
B: [ 76,  81] PS: [4, 18] PE: [4, 23]                 delegate: or_expr
B: [ 76,  81] PS: [4, 18] PE: [4, 23]                   delegate: and_expr
B: [ 76,  81] PS: [4, 18] PE: [4, 23]                     delegate: compare_expr
B: [ 76,  81] PS: [4, 18] PE: [4, 23]                       delegate: add_expr
B: [ 76,  81] PS: [4, 18] PE: [4, 23]                         delegate: mult_expr
B: [ 76,  77] PS: [4, 18] PE: [4, 19]                           left: mult_expr
B: [ 76,  77] PS: [4, 18] PE: [4, 19]                             delegate: unary_expr
B: [ 76,  77] PS: [4, 18] PE: [4, 19]                               delegate: var_path
B: [ 76,  77] PS: [4, 18] PE: [4, 19]                                 root: identifier `n`
B: [ 78,  79] PS: [4, 20] PE: [4, 21]                           op: * `*`
B: [ 80,  81] PS: [4, 22] PE: [4, 23]                           right: unary_expr
B: [ 80,  81] PS: [4, 22] PE: [4, 23]                             delegate: indexed_expr
B: [ 80,  81] PS: [4, 22] PE: [4, 23]                               root: primary_expr
B: [ 80,  81] PS: [4, 22] PE: [4, 23]                                 literal
B: [ 80,  81] PS: [4, 22] PE: [4, 23]                                   int `2`
B: [ 94, 104] PS: [5, 12] PE: [5, 22]           return_stmt: return_stmt
B: [ 94, 100] PS: [5, 12] PE: [5, 18]             return `return`
B: [101, 104] PS: [5, 19] PE: [5, 22]             value: expr
B: [101, 104] PS: [5, 19] PE: [5, 22]               ternary_expr
B: [101, 104] PS: [5, 19] PE: [5, 22]                 delegate: or_expr
B: [101, 104] PS: [5, 19] PE: [5, 22]                   delegate: and_expr
B: [101, 104] PS: [5, 19] PE: [5, 22]                     delegate: compare_expr
B: [101, 104] PS: [5, 19] PE: [5, 22]                       delegate: add_expr
B: [101, 104] PS: [5, 19] PE: [5, 22]                         delegate: mult_expr
B: [101, 104] PS: [5, 19] PE: [5, 22]                           delegate: unary_expr
B: [101, 104] PS: [5, 19] PE: [5, 22]                             delegate: var_path
B: [101, 104] PS: [5, 19] PE: [5, 22]                               root: identifier `out`
