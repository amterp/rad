=====
Var path slice
=====
a[:10]
a[5:]
a[5:10]
a[:-1]
=====
B: [ 0, 28] PS: [0, 0] PE: [4, 0] source_file
B: [ 0,  6] PS: [0, 0] PE: [0, 6]   expr_stmt
B: [ 0,  6] PS: [0, 0] PE: [0, 6]     expr: expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]       delegate: ternary_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]         delegate: or_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]           delegate: and_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]             delegate: compare_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]               delegate: add_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]                 delegate: mult_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]                   delegate: unary_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]                     delegate: fallback_expr
B: [ 0,  6] PS: [0, 0] PE: [0, 6]                       delegate: var_path
B: [ 0,  1] PS: [0, 0] PE: [0, 1]                         root: identifier `a`
B: [ 1,  2] PS: [0, 1] PE: [0, 2]                         [ `[`
B: [ 2,  5] PS: [0, 2] PE: [0, 5]                         indexing: slice
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                           : `:`
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                           end: expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                             delegate: ternary_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                               delegate: or_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                 delegate: and_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                   delegate: compare_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                     delegate: add_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                       delegate: mult_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                         delegate: unary_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                           delegate: fallback_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                             delegate: indexed_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                               root: primary_expr
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                                 literal
B: [ 3,  5] PS: [0, 3] PE: [0, 5]                                                   int `10`
B: [ 5,  6] PS: [0, 5] PE: [0, 6]                         ] `]`
B: [ 7, 12] PS: [1, 0] PE: [1, 5]   expr_stmt
B: [ 7, 12] PS: [1, 0] PE: [1, 5]     expr: expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]       delegate: ternary_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]         delegate: or_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]           delegate: and_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]             delegate: compare_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]               delegate: add_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]                 delegate: mult_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]                   delegate: unary_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]                     delegate: fallback_expr
B: [ 7, 12] PS: [1, 0] PE: [1, 5]                       delegate: var_path
B: [ 7,  8] PS: [1, 0] PE: [1, 1]                         root: identifier `a`
B: [ 8,  9] PS: [1, 1] PE: [1, 2]                         [ `[`
B: [ 9, 11] PS: [1, 2] PE: [1, 4]                         indexing: slice
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                           start: expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                             delegate: ternary_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                               delegate: or_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                 delegate: and_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                   delegate: compare_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                     delegate: add_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                       delegate: mult_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                         delegate: unary_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                           delegate: fallback_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                             delegate: indexed_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                               root: primary_expr
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                                 literal
B: [ 9, 10] PS: [1, 2] PE: [1, 3]                                                   int `5`
B: [10, 11] PS: [1, 3] PE: [1, 4]                           : `:`
B: [11, 12] PS: [1, 4] PE: [1, 5]                         ] `]`
B: [13, 20] PS: [2, 0] PE: [2, 7]   expr_stmt
B: [13, 20] PS: [2, 0] PE: [2, 7]     expr: expr
B: [13, 20] PS: [2, 0] PE: [2, 7]       delegate: ternary_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]         delegate: or_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]           delegate: and_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]             delegate: compare_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]               delegate: add_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]                 delegate: mult_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]                   delegate: unary_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]                     delegate: fallback_expr
B: [13, 20] PS: [2, 0] PE: [2, 7]                       delegate: var_path
B: [13, 14] PS: [2, 0] PE: [2, 1]                         root: identifier `a`
B: [14, 15] PS: [2, 1] PE: [2, 2]                         [ `[`
B: [15, 19] PS: [2, 2] PE: [2, 6]                         indexing: slice
B: [15, 16] PS: [2, 2] PE: [2, 3]                           start: expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                             delegate: ternary_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                               delegate: or_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                 delegate: and_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                   delegate: compare_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                     delegate: add_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                       delegate: mult_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                         delegate: unary_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                           delegate: fallback_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                             delegate: indexed_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                               root: primary_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                                 literal
B: [15, 16] PS: [2, 2] PE: [2, 3]                                                   int `5`
B: [16, 17] PS: [2, 3] PE: [2, 4]                           : `:`
B: [17, 19] PS: [2, 4] PE: [2, 6]                           end: expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                             delegate: ternary_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                               delegate: or_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                 delegate: and_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                   delegate: compare_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                     delegate: add_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                       delegate: mult_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                         delegate: unary_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                           delegate: fallback_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                             delegate: indexed_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                               root: primary_expr
B: [17, 19] PS: [2, 4] PE: [2, 6]                                                 literal
B: [17, 19] PS: [2, 4] PE: [2, 6]                                                   int `10`
B: [19, 20] PS: [2, 6] PE: [2, 7]                         ] `]`
B: [21, 27] PS: [3, 0] PE: [3, 6]   expr_stmt
B: [21, 27] PS: [3, 0] PE: [3, 6]     expr: expr
B: [21, 27] PS: [3, 0] PE: [3, 6]       delegate: ternary_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]         delegate: or_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]           delegate: and_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]             delegate: compare_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]               delegate: add_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]                 delegate: mult_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]                   delegate: unary_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]                     delegate: fallback_expr
B: [21, 27] PS: [3, 0] PE: [3, 6]                       delegate: var_path
B: [21, 22] PS: [3, 0] PE: [3, 1]                         root: identifier `a`
B: [22, 23] PS: [3, 1] PE: [3, 2]                         [ `[`
B: [23, 26] PS: [3, 2] PE: [3, 5]                         indexing: slice
B: [23, 24] PS: [3, 2] PE: [3, 3]                           : `:`
B: [24, 26] PS: [3, 3] PE: [3, 5]                           end: expr
B: [24, 26] PS: [3, 3] PE: [3, 5]                             delegate: ternary_expr
B: [24, 26] PS: [3, 3] PE: [3, 5]                               delegate: or_expr
B: [24, 26] PS: [3, 3] PE: [3, 5]                                 delegate: and_expr
B: [24, 26] PS: [3, 3] PE: [3, 5]                                   delegate: compare_expr
B: [24, 26] PS: [3, 3] PE: [3, 5]                                     delegate: add_expr
B: [24, 26] PS: [3, 3] PE: [3, 5]                                       delegate: mult_expr
B: [24, 26] PS: [3, 3] PE: [3, 5]                                         delegate: unary_expr
B: [24, 25] PS: [3, 3] PE: [3, 4]                                           op: - `-`
B: [25, 26] PS: [3, 4] PE: [3, 5]                                           arg: unary_expr
B: [25, 26] PS: [3, 4] PE: [3, 5]                                             delegate: fallback_expr
B: [25, 26] PS: [3, 4] PE: [3, 5]                                               delegate: indexed_expr
B: [25, 26] PS: [3, 4] PE: [3, 5]                                                 root: primary_expr
B: [25, 26] PS: [3, 4] PE: [3, 5]                                                   literal
B: [25, 26] PS: [3, 4] PE: [3, 5]                                                     int `1`
B: [26, 27] PS: [3, 5] PE: [3, 6]                         ] `]`
