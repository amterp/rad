=====
Catch expr
=====
a = catch myfoo()
a = catch x + y
a = (catch x) + y
a = catch x + catch y
a = catch catch x + catch y
=====
B: [  0, 102] PS: [0,  0] PE: [5,  0] source_file
B: [  0,  17] PS: [0,  0] PE: [0, 17]   assign
B: [  0,   1] PS: [0,  0] PE: [0,  1]     left: var_path
B: [  0,   1] PS: [0,  0] PE: [0,  1]       root: identifier `a`
B: [  2,   3] PS: [0,  2] PE: [0,  3]     = `=`
B: [  4,  17] PS: [0,  4] PE: [0, 17]     right: expr
B: [  4,   9] PS: [0,  4] PE: [0,  9]       catch: catch `catch`
B: [ 10,  17] PS: [0, 10] PE: [0, 17]       ternary_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]         delegate: or_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]           delegate: and_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]             delegate: compare_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]               delegate: add_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]                 delegate: mult_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]                   delegate: unary_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]                     delegate: indexed_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]                       root: primary_expr
B: [ 10,  17] PS: [0, 10] PE: [0, 17]                         call
B: [ 10,  15] PS: [0, 10] PE: [0, 15]                           func: identifier `myfoo`
B: [ 15,  17] PS: [0, 15] PE: [0, 17]                           () `()`
B: [ 18,  33] PS: [1,  0] PE: [1, 15]   assign
B: [ 18,  19] PS: [1,  0] PE: [1,  1]     left: var_path
B: [ 18,  19] PS: [1,  0] PE: [1,  1]       root: identifier `a`
B: [ 20,  21] PS: [1,  2] PE: [1,  3]     = `=`
B: [ 22,  33] PS: [1,  4] PE: [1, 15]     right: expr
B: [ 22,  27] PS: [1,  4] PE: [1,  9]       catch: catch `catch`
B: [ 28,  33] PS: [1, 10] PE: [1, 15]       ternary_expr
B: [ 28,  33] PS: [1, 10] PE: [1, 15]         delegate: or_expr
B: [ 28,  33] PS: [1, 10] PE: [1, 15]           delegate: and_expr
B: [ 28,  33] PS: [1, 10] PE: [1, 15]             delegate: compare_expr
B: [ 28,  33] PS: [1, 10] PE: [1, 15]               delegate: add_expr
B: [ 28,  29] PS: [1, 10] PE: [1, 11]                 left: add_expr
B: [ 28,  29] PS: [1, 10] PE: [1, 11]                   delegate: mult_expr
B: [ 28,  29] PS: [1, 10] PE: [1, 11]                     delegate: unary_expr
B: [ 28,  29] PS: [1, 10] PE: [1, 11]                       delegate: var_path
B: [ 28,  29] PS: [1, 10] PE: [1, 11]                         root: identifier `x`
B: [ 30,  31] PS: [1, 12] PE: [1, 13]                 op: + `+`
B: [ 32,  33] PS: [1, 14] PE: [1, 15]                 right: mult_expr
B: [ 32,  33] PS: [1, 14] PE: [1, 15]                   delegate: unary_expr
B: [ 32,  33] PS: [1, 14] PE: [1, 15]                     delegate: var_path
B: [ 32,  33] PS: [1, 14] PE: [1, 15]                       root: identifier `y`
B: [ 34,  51] PS: [2,  0] PE: [2, 17]   assign
B: [ 34,  35] PS: [2,  0] PE: [2,  1]     left: var_path
B: [ 34,  35] PS: [2,  0] PE: [2,  1]       root: identifier `a`
B: [ 36,  37] PS: [2,  2] PE: [2,  3]     = `=`
B: [ 38,  51] PS: [2,  4] PE: [2, 17]     right: expr
B: [ 38,  51] PS: [2,  4] PE: [2, 17]       ternary_expr
B: [ 38,  51] PS: [2,  4] PE: [2, 17]         delegate: or_expr
B: [ 38,  51] PS: [2,  4] PE: [2, 17]           delegate: and_expr
B: [ 38,  51] PS: [2,  4] PE: [2, 17]             delegate: compare_expr
B: [ 38,  51] PS: [2,  4] PE: [2, 17]               delegate: add_expr
B: [ 38,  47] PS: [2,  4] PE: [2, 13]                 left: add_expr
B: [ 38,  47] PS: [2,  4] PE: [2, 13]                   delegate: mult_expr
B: [ 38,  47] PS: [2,  4] PE: [2, 13]                     delegate: unary_expr
B: [ 38,  47] PS: [2,  4] PE: [2, 13]                       delegate: indexed_expr
B: [ 38,  47] PS: [2,  4] PE: [2, 13]                         root: primary_expr
B: [ 38,  47] PS: [2,  4] PE: [2, 13]                           parenthesized_expr
B: [ 38,  39] PS: [2,  4] PE: [2,  5]                             ( `(`
B: [ 39,  46] PS: [2,  5] PE: [2, 12]                             expr: expr
B: [ 39,  44] PS: [2,  5] PE: [2, 10]                               catch: catch `catch`
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                               ternary_expr
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                 delegate: or_expr
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                   delegate: and_expr
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                     delegate: compare_expr
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                       delegate: add_expr
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                         delegate: mult_expr
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                           delegate: unary_expr
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                             delegate: var_path
B: [ 45,  46] PS: [2, 11] PE: [2, 12]                                               root: identifier `x`
B: [ 46,  47] PS: [2, 12] PE: [2, 13]                             ) `)`
B: [ 48,  49] PS: [2, 14] PE: [2, 15]                 op: + `+`
B: [ 50,  51] PS: [2, 16] PE: [2, 17]                 right: mult_expr
B: [ 50,  51] PS: [2, 16] PE: [2, 17]                   delegate: unary_expr
B: [ 50,  51] PS: [2, 16] PE: [2, 17]                     delegate: var_path
B: [ 50,  51] PS: [2, 16] PE: [2, 17]                       root: identifier `y`
B: [ 52,  73] PS: [3,  0] PE: [3, 21]   assign
B: [ 52,  53] PS: [3,  0] PE: [3,  1]     left: var_path
B: [ 52,  53] PS: [3,  0] PE: [3,  1]       root: identifier `a`
B: [ 54,  55] PS: [3,  2] PE: [3,  3]     = `=`
B: [ 56,  73] PS: [3,  4] PE: [3, 21]     right: expr
B: [ 56,  61] PS: [3,  4] PE: [3,  9]       catch: catch `catch`
B: [ 62,  73] PS: [3, 10] PE: [3, 21]       ternary_expr
B: [ 62,  73] PS: [3, 10] PE: [3, 21]         delegate: or_expr
B: [ 62,  73] PS: [3, 10] PE: [3, 21]           delegate: and_expr
B: [ 62,  73] PS: [3, 10] PE: [3, 21]             delegate: compare_expr
B: [ 62,  73] PS: [3, 10] PE: [3, 21]               delegate: add_expr
B: [ 62,  63] PS: [3, 10] PE: [3, 11]                 left: add_expr
B: [ 62,  63] PS: [3, 10] PE: [3, 11]                   delegate: mult_expr
B: [ 62,  63] PS: [3, 10] PE: [3, 11]                     delegate: unary_expr
B: [ 62,  63] PS: [3, 10] PE: [3, 11]                       delegate: var_path
B: [ 62,  63] PS: [3, 10] PE: [3, 11]                         root: identifier `x`
B: [ 64,  65] PS: [3, 12] PE: [3, 13]                 op: + `+`
B: [ 66,  71] PS: [3, 14] PE: [3, 19]                 ERROR
B: [ 66,  71] PS: [3, 14] PE: [3, 19]                   identifier `catch`
B: [ 72,  73] PS: [3, 20] PE: [3, 21]                 right: mult_expr
B: [ 72,  73] PS: [3, 20] PE: [3, 21]                   delegate: unary_expr
B: [ 72,  73] PS: [3, 20] PE: [3, 21]                     delegate: var_path
B: [ 72,  73] PS: [3, 20] PE: [3, 21]                       root: identifier `y`
B: [ 74, 101] PS: [4,  0] PE: [4, 27]   assign
B: [ 74,  75] PS: [4,  0] PE: [4,  1]     left: var_path
B: [ 74,  75] PS: [4,  0] PE: [4,  1]       root: identifier `a`
B: [ 76,  77] PS: [4,  2] PE: [4,  3]     = `=`
B: [ 78, 101] PS: [4,  4] PE: [4, 27]     right: expr
B: [ 78,  83] PS: [4,  4] PE: [4,  9]       catch: catch `catch`
B: [ 84, 101] PS: [4, 10] PE: [4, 27]       ternary_expr
B: [ 84, 101] PS: [4, 10] PE: [4, 27]         delegate: or_expr
B: [ 84, 101] PS: [4, 10] PE: [4, 27]           delegate: and_expr
B: [ 84, 101] PS: [4, 10] PE: [4, 27]             delegate: compare_expr
B: [ 84, 101] PS: [4, 10] PE: [4, 27]               delegate: add_expr
B: [ 84,  89] PS: [4, 10] PE: [4, 15]                 left: add_expr
B: [ 84,  89] PS: [4, 10] PE: [4, 15]                   delegate: mult_expr
B: [ 84,  89] PS: [4, 10] PE: [4, 15]                     delegate: unary_expr
B: [ 84,  89] PS: [4, 10] PE: [4, 15]                       delegate: var_path
B: [ 84,  89] PS: [4, 10] PE: [4, 15]                         root: identifier `catch`
B: [ 90,  91] PS: [4, 16] PE: [4, 17]                 ERROR
B: [ 90,  91] PS: [4, 16] PE: [4, 17]                   identifier `x`
B: [ 92,  93] PS: [4, 18] PE: [4, 19]                 op: + `+`
B: [ 94,  99] PS: [4, 20] PE: [4, 25]                 ERROR
B: [ 94,  99] PS: [4, 20] PE: [4, 25]                   identifier `catch`
B: [100, 101] PS: [4, 26] PE: [4, 27]                 right: mult_expr
B: [100, 101] PS: [4, 26] PE: [4, 27]                   delegate: unary_expr
B: [100, 101] PS: [4, 26] PE: [4, 27]                     delegate: var_path
B: [100, 101] PS: [4, 26] PE: [4, 27]                       root: identifier `y`
