=====
Catch expr
=====
foo() catch:
    print_err("Error")

a = myfoo() catch:
    pass

b = mybar() + 2 catch:
    pass

result = foo() ?? bar() catch:
    result = -1
=====
B: [  0, 146] PS: [ 0,  0] PE: [11,  0] source_file
B: [  0,  35] PS: [ 0,  0] PE: [ 1, 22]   expr_stmt
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]     expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]       delegate: ternary_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]         delegate: or_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]           delegate: and_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]             delegate: compare_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]               delegate: add_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]                 delegate: mult_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]                   delegate: unary_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]                     delegate: fallback_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]                       delegate: indexed_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]                         root: primary_expr
B: [  0,   5] PS: [ 0,  0] PE: [ 0,  5]                           call
B: [  0,   3] PS: [ 0,  0] PE: [ 0,  3]                             func: identifier `foo`
B: [  3,   4] PS: [ 0,  3] PE: [ 0,  4]                             ( `(`
B: [  4,   5] PS: [ 0,  4] PE: [ 0,  5]                             ) `)`
B: [  6,  35] PS: [ 0,  6] PE: [ 1, 22]     catch_block
B: [  6,  11] PS: [ 0,  6] PE: [ 0, 11]       catch `catch`
B: [ 11,  12] PS: [ 0, 11] PE: [ 0, 12]       : `:`
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]       stmt: expr_stmt
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]         expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]           delegate: ternary_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]             delegate: or_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]               delegate: and_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                 delegate: compare_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                   delegate: add_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                     delegate: mult_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                       delegate: unary_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                         delegate: fallback_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                           delegate: indexed_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                             root: primary_expr
B: [ 17,  35] PS: [ 1,  4] PE: [ 1, 22]                               call
B: [ 17,  26] PS: [ 1,  4] PE: [ 1, 13]                                 func: identifier `print_err`
B: [ 26,  27] PS: [ 1, 13] PE: [ 1, 14]                                 ( `(`
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                 arg: expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                   delegate: ternary_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                     delegate: or_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                       delegate: and_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                         delegate: compare_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                           delegate: add_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                             delegate: mult_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                               delegate: unary_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                                 delegate: fallback_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                                   delegate: indexed_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                                     root: primary_expr
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                                       literal
B: [ 27,  34] PS: [ 1, 14] PE: [ 1, 21]                                                         string
B: [ 27,  28] PS: [ 1, 14] PE: [ 1, 15]                                                           start: string_start `"`
B: [ 28,  33] PS: [ 1, 15] PE: [ 1, 20]                                                           contents: string_contents
B: [ 28,  33] PS: [ 1, 15] PE: [ 1, 20]                                                             content: string_content `Error`
B: [ 33,  34] PS: [ 1, 20] PE: [ 1, 21]                                                           end: string_end `"`
B: [ 34,  35] PS: [ 1, 21] PE: [ 1, 22]                                 ) `)`
B: [ 37,  64] PS: [ 3,  0] PE: [ 4,  8]   assign
B: [ 37,  38] PS: [ 3,  0] PE: [ 3,  1]     left: var_path
B: [ 37,  38] PS: [ 3,  0] PE: [ 3,  1]       root: identifier `a`
B: [ 39,  40] PS: [ 3,  2] PE: [ 3,  3]     = `=`
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]     right: expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]       delegate: ternary_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]         delegate: or_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]           delegate: and_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]             delegate: compare_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]               delegate: add_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]                 delegate: mult_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]                   delegate: unary_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]                     delegate: fallback_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]                       delegate: indexed_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]                         root: primary_expr
B: [ 41,  48] PS: [ 3,  4] PE: [ 3, 11]                           call
B: [ 41,  46] PS: [ 3,  4] PE: [ 3,  9]                             func: identifier `myfoo`
B: [ 46,  47] PS: [ 3,  9] PE: [ 3, 10]                             ( `(`
B: [ 47,  48] PS: [ 3, 10] PE: [ 3, 11]                             ) `)`
B: [ 49,  64] PS: [ 3, 12] PE: [ 4,  8]     catch_block
B: [ 49,  54] PS: [ 3, 12] PE: [ 3, 17]       catch `catch`
B: [ 54,  55] PS: [ 3, 17] PE: [ 3, 18]       : `:`
B: [ 60,  64] PS: [ 4,  4] PE: [ 4,  8]       stmt: pass_stmt `pass`
B: [ 66,  97] PS: [ 6,  0] PE: [ 7,  8]   assign
B: [ 66,  67] PS: [ 6,  0] PE: [ 6,  1]     left: var_path
B: [ 66,  67] PS: [ 6,  0] PE: [ 6,  1]       root: identifier `b`
B: [ 68,  69] PS: [ 6,  2] PE: [ 6,  3]     = `=`
B: [ 70,  81] PS: [ 6,  4] PE: [ 6, 15]     right: expr
B: [ 70,  81] PS: [ 6,  4] PE: [ 6, 15]       delegate: ternary_expr
B: [ 70,  81] PS: [ 6,  4] PE: [ 6, 15]         delegate: or_expr
B: [ 70,  81] PS: [ 6,  4] PE: [ 6, 15]           delegate: and_expr
B: [ 70,  81] PS: [ 6,  4] PE: [ 6, 15]             delegate: compare_expr
B: [ 70,  81] PS: [ 6,  4] PE: [ 6, 15]               delegate: add_expr
B: [ 70,  77] PS: [ 6,  4] PE: [ 6, 11]                 left: add_expr
B: [ 70,  77] PS: [ 6,  4] PE: [ 6, 11]                   delegate: mult_expr
B: [ 70,  77] PS: [ 6,  4] PE: [ 6, 11]                     delegate: unary_expr
B: [ 70,  77] PS: [ 6,  4] PE: [ 6, 11]                       delegate: fallback_expr
B: [ 70,  77] PS: [ 6,  4] PE: [ 6, 11]                         delegate: indexed_expr
B: [ 70,  77] PS: [ 6,  4] PE: [ 6, 11]                           root: primary_expr
B: [ 70,  77] PS: [ 6,  4] PE: [ 6, 11]                             call
B: [ 70,  75] PS: [ 6,  4] PE: [ 6,  9]                               func: identifier `mybar`
B: [ 75,  76] PS: [ 6,  9] PE: [ 6, 10]                               ( `(`
B: [ 76,  77] PS: [ 6, 10] PE: [ 6, 11]                               ) `)`
B: [ 78,  79] PS: [ 6, 12] PE: [ 6, 13]                 op: + `+`
B: [ 80,  81] PS: [ 6, 14] PE: [ 6, 15]                 right: mult_expr
B: [ 80,  81] PS: [ 6, 14] PE: [ 6, 15]                   delegate: unary_expr
B: [ 80,  81] PS: [ 6, 14] PE: [ 6, 15]                     delegate: fallback_expr
B: [ 80,  81] PS: [ 6, 14] PE: [ 6, 15]                       delegate: indexed_expr
B: [ 80,  81] PS: [ 6, 14] PE: [ 6, 15]                         root: primary_expr
B: [ 80,  81] PS: [ 6, 14] PE: [ 6, 15]                           literal
B: [ 80,  81] PS: [ 6, 14] PE: [ 6, 15]                             int `2`
B: [ 82,  97] PS: [ 6, 16] PE: [ 7,  8]     catch_block
B: [ 82,  87] PS: [ 6, 16] PE: [ 6, 21]       catch `catch`
B: [ 87,  88] PS: [ 6, 21] PE: [ 6, 22]       : `:`
B: [ 93,  97] PS: [ 7,  4] PE: [ 7,  8]       stmt: pass_stmt `pass`
B: [ 99, 145] PS: [ 9,  0] PE: [10, 15]   assign
B: [ 99, 105] PS: [ 9,  0] PE: [ 9,  6]     left: var_path
B: [ 99, 105] PS: [ 9,  0] PE: [ 9,  6]       root: identifier `result`
B: [106, 107] PS: [ 9,  7] PE: [ 9,  8]     = `=`
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]     right: expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]       delegate: ternary_expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]         delegate: or_expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]           delegate: and_expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]             delegate: compare_expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]               delegate: add_expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]                 delegate: mult_expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]                   delegate: unary_expr
B: [108, 122] PS: [ 9,  9] PE: [ 9, 23]                     delegate: fallback_expr
B: [108, 113] PS: [ 9,  9] PE: [ 9, 14]                       left: fallback_expr
B: [108, 113] PS: [ 9,  9] PE: [ 9, 14]                         delegate: indexed_expr
B: [108, 113] PS: [ 9,  9] PE: [ 9, 14]                           root: primary_expr
B: [108, 113] PS: [ 9,  9] PE: [ 9, 14]                             call
B: [108, 111] PS: [ 9,  9] PE: [ 9, 12]                               func: identifier `foo`
B: [111, 112] PS: [ 9, 12] PE: [ 9, 13]                               ( `(`
B: [112, 113] PS: [ 9, 13] PE: [ 9, 14]                               ) `)`
B: [114, 116] PS: [ 9, 15] PE: [ 9, 17]                       op: ?? `??`
B: [117, 122] PS: [ 9, 18] PE: [ 9, 23]                       right: indexed_expr
B: [117, 122] PS: [ 9, 18] PE: [ 9, 23]                         root: primary_expr
B: [117, 122] PS: [ 9, 18] PE: [ 9, 23]                           call
B: [117, 120] PS: [ 9, 18] PE: [ 9, 21]                             func: identifier `bar`
B: [120, 121] PS: [ 9, 21] PE: [ 9, 22]                             ( `(`
B: [121, 122] PS: [ 9, 22] PE: [ 9, 23]                             ) `)`
B: [123, 145] PS: [ 9, 24] PE: [10, 15]     catch_block
B: [123, 128] PS: [ 9, 24] PE: [ 9, 29]       catch `catch`
B: [128, 129] PS: [ 9, 29] PE: [ 9, 30]       : `:`
B: [134, 145] PS: [10,  4] PE: [10, 15]       stmt: assign
B: [134, 140] PS: [10,  4] PE: [10, 10]         left: var_path
B: [134, 140] PS: [10,  4] PE: [10, 10]           root: identifier `result`
B: [141, 142] PS: [10, 11] PE: [10, 12]         = `=`
B: [143, 145] PS: [10, 13] PE: [10, 15]         right: expr
B: [143, 145] PS: [10, 13] PE: [10, 15]           delegate: ternary_expr
B: [143, 145] PS: [10, 13] PE: [10, 15]             delegate: or_expr
B: [143, 145] PS: [10, 13] PE: [10, 15]               delegate: and_expr
B: [143, 145] PS: [10, 13] PE: [10, 15]                 delegate: compare_expr
B: [143, 145] PS: [10, 13] PE: [10, 15]                   delegate: add_expr
B: [143, 145] PS: [10, 13] PE: [10, 15]                     delegate: mult_expr
B: [143, 145] PS: [10, 13] PE: [10, 15]                       delegate: unary_expr
B: [143, 144] PS: [10, 13] PE: [10, 14]                         op: - `-`
B: [144, 145] PS: [10, 14] PE: [10, 15]                         arg: unary_expr
B: [144, 145] PS: [10, 14] PE: [10, 15]                           delegate: fallback_expr
B: [144, 145] PS: [10, 14] PE: [10, 15]                             delegate: indexed_expr
B: [144, 145] PS: [10, 14] PE: [10, 15]                               root: primary_expr
B: [144, 145] PS: [10, 14] PE: [10, 15]                                 literal
B: [144, 145] PS: [10, 14] PE: [10, 15]                                   int `1`
