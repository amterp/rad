=====
Parenthesized then indexed
=====
a = (b)[0]
=====
B: [ 0, 11] PS: [0,  0] PE: [1,  0] source_file
B: [ 0, 10] PS: [0,  0] PE: [0, 10]   assign
B: [ 0,  1] PS: [0,  0] PE: [0,  1]     left: var_path
B: [ 0,  1] PS: [0,  0] PE: [0,  1]       root: identifier `a`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]     = `=`
B: [ 4, 10] PS: [0,  4] PE: [0, 10]     right: expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]       ternary_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]         delegate: or_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]           delegate: and_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]             delegate: compare_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]               delegate: add_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]                 delegate: mult_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]                   delegate: unary_expr
B: [ 4, 10] PS: [0,  4] PE: [0, 10]                     delegate: indexed_expr
B: [ 4,  7] PS: [0,  4] PE: [0,  7]                       root: primary_expr
B: [ 4,  7] PS: [0,  4] PE: [0,  7]                         parenthesized_expr
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                           ( `(`
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                           expr: expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                             ternary_expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                               delegate: or_expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                                 delegate: and_expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                                   delegate: compare_expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                                     delegate: add_expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                                       delegate: mult_expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                                         delegate: unary_expr
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                                           delegate: var_path
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                                             root: identifier `b`
B: [ 6,  7] PS: [0,  6] PE: [0,  7]                           ) `)`
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                       [ `[`
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                       indexing: expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                         ternary_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                           delegate: or_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                             delegate: and_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                               delegate: compare_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                 delegate: add_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                   delegate: mult_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                     delegate: unary_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                       delegate: indexed_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                         root: primary_expr
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                           literal
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                             int `0`
B: [ 9, 10] PS: [0,  9] PE: [0, 10]                       ] `]`
