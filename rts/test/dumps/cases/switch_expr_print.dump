=====
Switch stmt
=====
name = "alice"
switch name:
	case "alice" -> print("ALICE"), print("ANOTHER")
	case "bob" -> print("BOB")
	case "charlie" -> print("CHARLIE")
a = 2
=====
B: [  0, 148] PS: [0,  0] PE: [6,  0] source_file
B: [  0,  14] PS: [0,  0] PE: [0, 14]   assign
B: [  0,   4] PS: [0,  0] PE: [0,  4]     left: var_path
B: [  0,   4] PS: [0,  0] PE: [0,  4]       root: identifier `name`
B: [  5,   6] PS: [0,  5] PE: [0,  6]     = `=`
B: [  7,  14] PS: [0,  7] PE: [0, 14]     right: expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]       delegate: ternary_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]         delegate: or_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]           delegate: and_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]             delegate: compare_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]               delegate: add_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]                 delegate: mult_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]                   delegate: unary_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]                     delegate: indexed_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]                       root: primary_expr
B: [  7,  14] PS: [0,  7] PE: [0, 14]                         literal
B: [  7,  14] PS: [0,  7] PE: [0, 14]                           string
B: [  7,   8] PS: [0,  7] PE: [0,  8]                             start: string_start `"`
B: [  8,  13] PS: [0,  8] PE: [0, 13]                             contents: string_contents
B: [  8,  13] PS: [0,  8] PE: [0, 13]                               content: string_content `alice`
B: [ 13,  14] PS: [0, 13] PE: [0, 14]                             end: string_end `"`
B: [ 15, 141] PS: [1,  0] PE: [4, 35]   switch_stmt
B: [ 15,  21] PS: [1,  0] PE: [1,  6]     switch `switch`
B: [ 22,  26] PS: [1,  7] PE: [1, 11]     discriminant: expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]       delegate: ternary_expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]         delegate: or_expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]           delegate: and_expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]             delegate: compare_expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]               delegate: add_expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]                 delegate: mult_expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]                   delegate: unary_expr
B: [ 22,  26] PS: [1,  7] PE: [1, 11]                     delegate: var_path
B: [ 22,  26] PS: [1,  7] PE: [1, 11]                       root: identifier `name`
B: [ 26,  27] PS: [1, 11] PE: [1, 12]     : `:`
B: [ 29,  77] PS: [2,  1] PE: [2, 49]     case: switch_case
B: [ 29,  33] PS: [2,  1] PE: [2,  5]       case `case`
B: [ 34,  41] PS: [2,  6] PE: [2, 13]       case_key: expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]         delegate: ternary_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]           delegate: or_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]             delegate: and_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]               delegate: compare_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]                 delegate: add_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]                   delegate: mult_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]                     delegate: unary_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]                       delegate: indexed_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]                         root: primary_expr
B: [ 34,  41] PS: [2,  6] PE: [2, 13]                           literal
B: [ 34,  41] PS: [2,  6] PE: [2, 13]                             string
B: [ 34,  35] PS: [2,  6] PE: [2,  7]                               start: string_start `"`
B: [ 35,  40] PS: [2,  7] PE: [2, 12]                               contents: string_contents
B: [ 35,  40] PS: [2,  7] PE: [2, 12]                                 content: string_content `alice`
B: [ 40,  41] PS: [2, 12] PE: [2, 13]                               end: string_end `"`
B: [ 42,  77] PS: [2, 14] PE: [2, 49]       alt: switch_case_expr
B: [ 42,  44] PS: [2, 14] PE: [2, 16]         -> `->`
B: [ 45,  59] PS: [2, 17] PE: [2, 31]         right: expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]           delegate: ternary_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]             delegate: or_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]               delegate: and_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]                 delegate: compare_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]                   delegate: add_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]                     delegate: mult_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]                       delegate: unary_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]                         delegate: indexed_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]                           root: primary_expr
B: [ 45,  59] PS: [2, 17] PE: [2, 31]                             call
B: [ 45,  50] PS: [2, 17] PE: [2, 22]                               func: identifier `print`
B: [ 50,  51] PS: [2, 22] PE: [2, 23]                               ( `(`
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                               arg: expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                 delegate: ternary_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                   delegate: or_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                     delegate: and_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                       delegate: compare_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                         delegate: add_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                           delegate: mult_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                             delegate: unary_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                               delegate: indexed_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                                 root: primary_expr
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                                   literal
B: [ 51,  58] PS: [2, 23] PE: [2, 30]                                                     string
B: [ 51,  52] PS: [2, 23] PE: [2, 24]                                                       start: string_start `"`
B: [ 52,  57] PS: [2, 24] PE: [2, 29]                                                       contents: string_contents
B: [ 52,  57] PS: [2, 24] PE: [2, 29]                                                         content: string_content `ALICE`
B: [ 57,  58] PS: [2, 29] PE: [2, 30]                                                       end: string_end `"`
B: [ 58,  59] PS: [2, 30] PE: [2, 31]                               ) `)`
B: [ 59,  60] PS: [2, 31] PE: [2, 32]         , `,`
B: [ 61,  77] PS: [2, 33] PE: [2, 49]         right: expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]           delegate: ternary_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]             delegate: or_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]               delegate: and_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]                 delegate: compare_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]                   delegate: add_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]                     delegate: mult_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]                       delegate: unary_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]                         delegate: indexed_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]                           root: primary_expr
B: [ 61,  77] PS: [2, 33] PE: [2, 49]                             call
B: [ 61,  66] PS: [2, 33] PE: [2, 38]                               func: identifier `print`
B: [ 66,  67] PS: [2, 38] PE: [2, 39]                               ( `(`
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                               arg: expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                 delegate: ternary_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                   delegate: or_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                     delegate: and_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                       delegate: compare_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                         delegate: add_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                           delegate: mult_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                             delegate: unary_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                               delegate: indexed_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                                 root: primary_expr
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                                   literal
B: [ 67,  76] PS: [2, 39] PE: [2, 48]                                                     string
B: [ 67,  68] PS: [2, 39] PE: [2, 40]                                                       start: string_start `"`
B: [ 68,  75] PS: [2, 40] PE: [2, 47]                                                       contents: string_contents
B: [ 68,  75] PS: [2, 40] PE: [2, 47]                                                         content: string_content `ANOTHER`
B: [ 75,  76] PS: [2, 47] PE: [2, 48]                                                       end: string_end `"`
B: [ 76,  77] PS: [2, 48] PE: [2, 49]                               ) `)`
B: [ 79, 105] PS: [3,  1] PE: [3, 27]     case: switch_case
B: [ 79,  83] PS: [3,  1] PE: [3,  5]       case `case`
B: [ 84,  89] PS: [3,  6] PE: [3, 11]       case_key: expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]         delegate: ternary_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]           delegate: or_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]             delegate: and_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]               delegate: compare_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]                 delegate: add_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]                   delegate: mult_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]                     delegate: unary_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]                       delegate: indexed_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]                         root: primary_expr
B: [ 84,  89] PS: [3,  6] PE: [3, 11]                           literal
B: [ 84,  89] PS: [3,  6] PE: [3, 11]                             string
B: [ 84,  85] PS: [3,  6] PE: [3,  7]                               start: string_start `"`
B: [ 85,  88] PS: [3,  7] PE: [3, 10]                               contents: string_contents
B: [ 85,  88] PS: [3,  7] PE: [3, 10]                                 content: string_content `bob`
B: [ 88,  89] PS: [3, 10] PE: [3, 11]                               end: string_end `"`
B: [ 90, 105] PS: [3, 12] PE: [3, 27]       alt: switch_case_expr
B: [ 90,  92] PS: [3, 12] PE: [3, 14]         -> `->`
B: [ 93, 105] PS: [3, 15] PE: [3, 27]         right: expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]           delegate: ternary_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]             delegate: or_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]               delegate: and_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]                 delegate: compare_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]                   delegate: add_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]                     delegate: mult_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]                       delegate: unary_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]                         delegate: indexed_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]                           root: primary_expr
B: [ 93, 105] PS: [3, 15] PE: [3, 27]                             call
B: [ 93,  98] PS: [3, 15] PE: [3, 20]                               func: identifier `print`
B: [ 98,  99] PS: [3, 20] PE: [3, 21]                               ( `(`
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                               arg: expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                 delegate: ternary_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                   delegate: or_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                     delegate: and_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                       delegate: compare_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                         delegate: add_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                           delegate: mult_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                             delegate: unary_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                               delegate: indexed_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                                 root: primary_expr
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                                   literal
B: [ 99, 104] PS: [3, 21] PE: [3, 26]                                                     string
B: [ 99, 100] PS: [3, 21] PE: [3, 22]                                                       start: string_start `"`
B: [100, 103] PS: [3, 22] PE: [3, 25]                                                       contents: string_contents
B: [100, 103] PS: [3, 22] PE: [3, 25]                                                         content: string_content `BOB`
B: [103, 104] PS: [3, 25] PE: [3, 26]                                                       end: string_end `"`
B: [104, 105] PS: [3, 26] PE: [3, 27]                               ) `)`
B: [107, 141] PS: [4,  1] PE: [4, 35]     case: switch_case
B: [107, 111] PS: [4,  1] PE: [4,  5]       case `case`
B: [112, 121] PS: [4,  6] PE: [4, 15]       case_key: expr
B: [112, 121] PS: [4,  6] PE: [4, 15]         delegate: ternary_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]           delegate: or_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]             delegate: and_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]               delegate: compare_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]                 delegate: add_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]                   delegate: mult_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]                     delegate: unary_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]                       delegate: indexed_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]                         root: primary_expr
B: [112, 121] PS: [4,  6] PE: [4, 15]                           literal
B: [112, 121] PS: [4,  6] PE: [4, 15]                             string
B: [112, 113] PS: [4,  6] PE: [4,  7]                               start: string_start `"`
B: [113, 120] PS: [4,  7] PE: [4, 14]                               contents: string_contents
B: [113, 120] PS: [4,  7] PE: [4, 14]                                 content: string_content `charlie`
B: [120, 121] PS: [4, 14] PE: [4, 15]                               end: string_end `"`
B: [122, 141] PS: [4, 16] PE: [4, 35]       alt: switch_case_expr
B: [122, 124] PS: [4, 16] PE: [4, 18]         -> `->`
B: [125, 141] PS: [4, 19] PE: [4, 35]         right: expr
B: [125, 141] PS: [4, 19] PE: [4, 35]           delegate: ternary_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]             delegate: or_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]               delegate: and_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]                 delegate: compare_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]                   delegate: add_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]                     delegate: mult_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]                       delegate: unary_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]                         delegate: indexed_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]                           root: primary_expr
B: [125, 141] PS: [4, 19] PE: [4, 35]                             call
B: [125, 130] PS: [4, 19] PE: [4, 24]                               func: identifier `print`
B: [130, 131] PS: [4, 24] PE: [4, 25]                               ( `(`
B: [131, 140] PS: [4, 25] PE: [4, 34]                               arg: expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                 delegate: ternary_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                   delegate: or_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                     delegate: and_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                       delegate: compare_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                         delegate: add_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                           delegate: mult_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                             delegate: unary_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                               delegate: indexed_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                                 root: primary_expr
B: [131, 140] PS: [4, 25] PE: [4, 34]                                                   literal
B: [131, 140] PS: [4, 25] PE: [4, 34]                                                     string
B: [131, 132] PS: [4, 25] PE: [4, 26]                                                       start: string_start `"`
B: [132, 139] PS: [4, 26] PE: [4, 33]                                                       contents: string_contents
B: [132, 139] PS: [4, 26] PE: [4, 33]                                                         content: string_content `CHARLIE`
B: [139, 140] PS: [4, 33] PE: [4, 34]                                                       end: string_end `"`
B: [140, 141] PS: [4, 34] PE: [4, 35]                               ) `)`
B: [142, 147] PS: [5,  0] PE: [5,  5]   assign
B: [142, 143] PS: [5,  0] PE: [5,  1]     left: var_path
B: [142, 143] PS: [5,  0] PE: [5,  1]       root: identifier `a`
B: [144, 145] PS: [5,  2] PE: [5,  3]     = `=`
B: [146, 147] PS: [5,  4] PE: [5,  5]     right: expr
B: [146, 147] PS: [5,  4] PE: [5,  5]       delegate: ternary_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]         delegate: or_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]           delegate: and_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]             delegate: compare_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]               delegate: add_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]                 delegate: mult_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]                   delegate: unary_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]                     delegate: indexed_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]                       root: primary_expr
B: [146, 147] PS: [5,  4] PE: [5,  5]                         literal
B: [146, 147] PS: [5,  4] PE: [5,  5]                           int `2`
