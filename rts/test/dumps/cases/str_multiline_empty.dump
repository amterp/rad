=====
Str multiline empty
=====
a = """
"""
=====
B: [ 0, 12] PS: [0, 0] PE: [2, 0] source_file
B: [ 0, 11] PS: [0, 0] PE: [1, 3]   assign
B: [ 0,  1] PS: [0, 0] PE: [0, 1]     left: var_path
B: [ 0,  1] PS: [0, 0] PE: [0, 1]       root: identifier `a`
B: [ 2,  3] PS: [0, 2] PE: [0, 3]     = `=`
B: [ 4, 11] PS: [0, 4] PE: [1, 3]     right: expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]       delegate: ternary_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]         delegate: or_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]           delegate: and_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]             delegate: compare_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]               delegate: add_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]                 delegate: mult_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]                   delegate: unary_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]                     delegate: fallback_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]                       delegate: indexed_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]                         root: primary_expr
B: [ 4, 11] PS: [0, 4] PE: [1, 3]                           literal
B: [ 4, 11] PS: [0, 4] PE: [1, 3]                             string
B: [ 4,  8] PS: [0, 4] PE: [1, 0]                               start: string_start `"""\n`
B: [ 8, 11] PS: [1, 0] PE: [1, 3]                               end: string_end `"""`
