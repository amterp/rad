=====
Parenthesized expr
=====
print((1 + 2) * 2)
=====
B: [ 0, 19] PS: [0,  0] PE: [1,  0] source_file
B: [ 0, 18] PS: [0,  0] PE: [0, 18]   expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]     delegate: ternary_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]       delegate: or_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]         delegate: and_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]           delegate: compare_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]             delegate: add_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]               delegate: mult_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]                 delegate: unary_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]                   delegate: indexed_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]                     root: primary_expr
B: [ 0, 18] PS: [0,  0] PE: [0, 18]                       call
B: [ 0,  5] PS: [0,  0] PE: [0,  5]                         func: identifier `print`
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                         ( `(`
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                         arg: expr
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                           delegate: ternary_expr
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                             delegate: or_expr
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                               delegate: and_expr
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                                 delegate: compare_expr
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                                   delegate: add_expr
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                                     delegate: mult_expr
B: [ 6, 13] PS: [0,  6] PE: [0, 13]                                       left: mult_expr
B: [ 6, 13] PS: [0,  6] PE: [0, 13]                                         delegate: unary_expr
B: [ 6, 13] PS: [0,  6] PE: [0, 13]                                           delegate: indexed_expr
B: [ 6, 13] PS: [0,  6] PE: [0, 13]                                             root: primary_expr
B: [ 6, 13] PS: [0,  6] PE: [0, 13]                                               parenthesized_expr
B: [ 6,  7] PS: [0,  6] PE: [0,  7]                                                 ( `(`
B: [ 7, 12] PS: [0,  7] PE: [0, 12]                                                 expr: expr
B: [ 7, 12] PS: [0,  7] PE: [0, 12]                                                   delegate: ternary_expr
B: [ 7, 12] PS: [0,  7] PE: [0, 12]                                                     delegate: or_expr
B: [ 7, 12] PS: [0,  7] PE: [0, 12]                                                       delegate: and_expr
B: [ 7, 12] PS: [0,  7] PE: [0, 12]                                                         delegate: compare_expr
B: [ 7, 12] PS: [0,  7] PE: [0, 12]                                                           delegate: add_expr
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                             left: add_expr
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                               delegate: mult_expr
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                                 delegate: unary_expr
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                                   delegate: indexed_expr
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                                     root: primary_expr
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                                       literal
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                                         int `1`
B: [ 9, 10] PS: [0,  9] PE: [0, 10]                                                             op: + `+`
B: [11, 12] PS: [0, 11] PE: [0, 12]                                                             right: mult_expr
B: [11, 12] PS: [0, 11] PE: [0, 12]                                                               delegate: unary_expr
B: [11, 12] PS: [0, 11] PE: [0, 12]                                                                 delegate: indexed_expr
B: [11, 12] PS: [0, 11] PE: [0, 12]                                                                   root: primary_expr
B: [11, 12] PS: [0, 11] PE: [0, 12]                                                                     literal
B: [11, 12] PS: [0, 11] PE: [0, 12]                                                                       int `2`
B: [12, 13] PS: [0, 12] PE: [0, 13]                                                 ) `)`
B: [14, 15] PS: [0, 14] PE: [0, 15]                                       op: * `*`
B: [16, 17] PS: [0, 16] PE: [0, 17]                                       right: unary_expr
B: [16, 17] PS: [0, 16] PE: [0, 17]                                         delegate: indexed_expr
B: [16, 17] PS: [0, 16] PE: [0, 17]                                           root: primary_expr
B: [16, 17] PS: [0, 16] PE: [0, 17]                                             literal
B: [16, 17] PS: [0, 16] PE: [0, 17]                                               int `2`
B: [17, 18] PS: [0, 17] PE: [0, 18]                         ) `)`
