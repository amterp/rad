=====
Str escaping raw
=====
a = r"\\"
b = r"\n"
c = r"\"
=====
B: [ 0, 29] PS: [0, 0] PE: [3, 0] source_file
B: [ 0,  9] PS: [0, 0] PE: [0, 9]   assign
B: [ 0,  1] PS: [0, 0] PE: [0, 1]     left: var_path
B: [ 0,  1] PS: [0, 0] PE: [0, 1]       root: identifier `a`
B: [ 2,  3] PS: [0, 2] PE: [0, 3]     = `=`
B: [ 4,  9] PS: [0, 4] PE: [0, 9]     right: expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]       delegate: ternary_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]         delegate: or_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]           delegate: and_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]             delegate: compare_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]               delegate: add_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]                 delegate: mult_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]                   delegate: unary_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]                     delegate: fallback_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]                       delegate: indexed_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]                         root: primary_expr
B: [ 4,  9] PS: [0, 4] PE: [0, 9]                           literal
B: [ 4,  9] PS: [0, 4] PE: [0, 9]                             string
B: [ 4,  6] PS: [0, 4] PE: [0, 6]                               start: string_start `r"`
B: [ 6,  8] PS: [0, 6] PE: [0, 8]                               contents: string_contents
B: [ 6,  8] PS: [0, 6] PE: [0, 8]                                 content: string_content `\\`
B: [ 8,  9] PS: [0, 8] PE: [0, 9]                               end: string_end `"`
B: [10, 19] PS: [1, 0] PE: [1, 9]   assign
B: [10, 11] PS: [1, 0] PE: [1, 1]     left: var_path
B: [10, 11] PS: [1, 0] PE: [1, 1]       root: identifier `b`
B: [12, 13] PS: [1, 2] PE: [1, 3]     = `=`
B: [14, 19] PS: [1, 4] PE: [1, 9]     right: expr
B: [14, 19] PS: [1, 4] PE: [1, 9]       delegate: ternary_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]         delegate: or_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]           delegate: and_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]             delegate: compare_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]               delegate: add_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]                 delegate: mult_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]                   delegate: unary_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]                     delegate: fallback_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]                       delegate: indexed_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]                         root: primary_expr
B: [14, 19] PS: [1, 4] PE: [1, 9]                           literal
B: [14, 19] PS: [1, 4] PE: [1, 9]                             string
B: [14, 16] PS: [1, 4] PE: [1, 6]                               start: string_start `r"`
B: [16, 18] PS: [1, 6] PE: [1, 8]                               contents: string_contents
B: [16, 18] PS: [1, 6] PE: [1, 8]                                 content: string_content `\n`
B: [18, 19] PS: [1, 8] PE: [1, 9]                               end: string_end `"`
B: [20, 28] PS: [2, 0] PE: [2, 8]   assign
B: [20, 21] PS: [2, 0] PE: [2, 1]     left: var_path
B: [20, 21] PS: [2, 0] PE: [2, 1]       root: identifier `c`
B: [22, 23] PS: [2, 2] PE: [2, 3]     = `=`
B: [24, 28] PS: [2, 4] PE: [2, 8]     right: expr
B: [24, 28] PS: [2, 4] PE: [2, 8]       delegate: ternary_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]         delegate: or_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]           delegate: and_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]             delegate: compare_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]               delegate: add_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]                 delegate: mult_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]                   delegate: unary_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]                     delegate: fallback_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]                       delegate: indexed_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]                         root: primary_expr
B: [24, 28] PS: [2, 4] PE: [2, 8]                           literal
B: [24, 28] PS: [2, 4] PE: [2, 8]                             string
B: [24, 26] PS: [2, 4] PE: [2, 6]                               start: string_start `r"`
B: [26, 27] PS: [2, 6] PE: [2, 7]                               contents: string_contents
B: [26, 27] PS: [2, 6] PE: [2, 7]                                 content: string_content `\`
B: [27, 28] PS: [2, 7] PE: [2, 8]                               end: string_end `"`
