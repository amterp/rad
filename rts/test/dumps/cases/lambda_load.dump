=====
Lambda in load with named arg
=====
m.load("k", fn() "two", reload=true)
=====
B: [ 0, 37] PS: [0,  0] PE: [1,  0] source_file
B: [ 0, 36] PS: [0,  0] PE: [0, 36]   expr_stmt
B: [ 0, 36] PS: [0,  0] PE: [0, 36]     expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]       delegate: ternary_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]         delegate: or_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]           delegate: and_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]             delegate: compare_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]               delegate: add_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]                 delegate: mult_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]                   delegate: unary_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]                     delegate: fallback_expr
B: [ 0, 36] PS: [0,  0] PE: [0, 36]                       delegate: var_path
B: [ 0,  1] PS: [0,  0] PE: [0,  1]                         root: identifier `m`
B: [ 1,  2] PS: [0,  1] PE: [0,  2]                         . `.`
B: [ 2, 36] PS: [0,  2] PE: [0, 36]                         indexing: call
B: [ 2,  6] PS: [0,  2] PE: [0,  6]                           func: identifier `load`
B: [ 6,  7] PS: [0,  6] PE: [0,  7]                           ( `(`
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                           arg: expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                             delegate: ternary_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                               delegate: or_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                 delegate: and_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                   delegate: compare_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                     delegate: add_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                       delegate: mult_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                         delegate: unary_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                           delegate: fallback_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                             delegate: indexed_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                               root: primary_expr
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                                 literal
B: [ 7, 10] PS: [0,  7] PE: [0, 10]                                                   string
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                     start: string_start `"`
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                                     contents: string_contents
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                                                       content: string_content `k`
B: [ 9, 10] PS: [0,  9] PE: [0, 10]                                                     end: string_end `"`
B: [10, 11] PS: [0, 10] PE: [0, 11]                           , `,`
B: [12, 22] PS: [0, 12] PE: [0, 22]                           arg: expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                             delegate: ternary_expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                               delegate: or_expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                                 delegate: and_expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                                   delegate: compare_expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                                     delegate: add_expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                                       delegate: mult_expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                                         delegate: unary_expr
B: [12, 22] PS: [0, 12] PE: [0, 22]                                           delegate: fn_lambda
B: [12, 14] PS: [0, 12] PE: [0, 14]                                             keyword: fn `fn`
B: [14, 15] PS: [0, 14] PE: [0, 15]                                             ( `(`
B: [15, 16] PS: [0, 15] PE: [0, 16]                                             ) `)`
B: [17, 22] PS: [0, 17] PE: [0, 22]                                             stmt: expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                               delegate: ternary_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                 delegate: or_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                   delegate: and_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                     delegate: compare_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                       delegate: add_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                         delegate: mult_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                           delegate: unary_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                             delegate: fallback_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                               delegate: indexed_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                                 root: primary_expr
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                                   literal
B: [17, 22] PS: [0, 17] PE: [0, 22]                                                                     string
B: [17, 18] PS: [0, 17] PE: [0, 18]                                                                       start: string_start `"`
B: [18, 21] PS: [0, 18] PE: [0, 21]                                                                       contents: string_contents
B: [18, 21] PS: [0, 18] PE: [0, 21]                                                                         content: string_content `two`
B: [21, 22] PS: [0, 21] PE: [0, 22]                                                                       end: string_end `"`
B: [22, 23] PS: [0, 22] PE: [0, 23]                           , `,`
B: [24, 35] PS: [0, 24] PE: [0, 35]                           named_arg: call_named_arg
B: [24, 30] PS: [0, 24] PE: [0, 30]                             name: identifier `reload`
B: [30, 31] PS: [0, 30] PE: [0, 31]                             = `=`
B: [31, 35] PS: [0, 31] PE: [0, 35]                             value: expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                               delegate: ternary_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                 delegate: or_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                   delegate: and_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                     delegate: compare_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                       delegate: add_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                         delegate: mult_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                           delegate: unary_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                             delegate: fallback_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                               delegate: indexed_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                                 root: primary_expr
B: [31, 35] PS: [0, 31] PE: [0, 35]                                                   literal
B: [31, 35] PS: [0, 31] PE: [0, 35]                                                     bool
B: [31, 35] PS: [0, 31] PE: [0, 35]                                                       true `true`
B: [35, 36] PS: [0, 35] PE: [0, 36]                           ) `)`
