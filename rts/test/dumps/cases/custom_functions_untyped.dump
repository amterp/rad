=====
Custom functions untyped
=====
fn myfoo() print("Hi")
fn myfoo(a) print("Hi, {a}")
fn myfoo() 1 + 1
fn myfoo(a):
    return a / 2
=====
B: [ 0, 99] PS: [0,  0] PE: [5,  0] source_file
B: [ 0, 22] PS: [0,  0] PE: [0, 22]   fn_named
B: [ 0,  2] PS: [0,  0] PE: [0,  2]     keyword: fn `fn`
B: [ 3,  8] PS: [0,  3] PE: [0,  8]     name: identifier `myfoo`
B: [ 8,  9] PS: [0,  8] PE: [0,  9]     ( `(`
B: [ 9, 10] PS: [0,  9] PE: [0, 10]     ) `)`
B: [11, 22] PS: [0, 11] PE: [0, 22]     stmt: expr
B: [11, 22] PS: [0, 11] PE: [0, 22]       delegate: ternary_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]         delegate: or_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]           delegate: and_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]             delegate: compare_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]               delegate: add_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]                 delegate: mult_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]                   delegate: unary_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]                     delegate: indexed_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]                       root: primary_expr
B: [11, 22] PS: [0, 11] PE: [0, 22]                         call
B: [11, 16] PS: [0, 11] PE: [0, 16]                           func: identifier `print`
B: [16, 17] PS: [0, 16] PE: [0, 17]                           ( `(`
B: [17, 21] PS: [0, 17] PE: [0, 21]                           arg: expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                             delegate: ternary_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                               delegate: or_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                 delegate: and_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                   delegate: compare_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                     delegate: add_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                       delegate: mult_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                         delegate: unary_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                           delegate: indexed_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                             root: primary_expr
B: [17, 21] PS: [0, 17] PE: [0, 21]                                               literal
B: [17, 21] PS: [0, 17] PE: [0, 21]                                                 string
B: [17, 18] PS: [0, 17] PE: [0, 18]                                                   start: string_start `"`
B: [18, 20] PS: [0, 18] PE: [0, 20]                                                   contents: string_contents
B: [18, 20] PS: [0, 18] PE: [0, 20]                                                     content: string_content `Hi`
B: [20, 21] PS: [0, 20] PE: [0, 21]                                                   end: string_end `"`
B: [21, 22] PS: [0, 21] PE: [0, 22]                           ) `)`
B: [23, 51] PS: [1,  0] PE: [1, 28]   fn_named
B: [23, 25] PS: [1,  0] PE: [1,  2]     keyword: fn `fn`
B: [26, 31] PS: [1,  3] PE: [1,  8]     name: identifier `myfoo`
B: [31, 32] PS: [1,  8] PE: [1,  9]     ( `(`
B: [32, 33] PS: [1,  9] PE: [1, 10]     normal_param: normal_param
B: [32, 33] PS: [1,  9] PE: [1, 10]       name: identifier `a`
B: [33, 34] PS: [1, 10] PE: [1, 11]     ) `)`
B: [35, 51] PS: [1, 12] PE: [1, 28]     stmt: expr
B: [35, 51] PS: [1, 12] PE: [1, 28]       delegate: ternary_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]         delegate: or_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]           delegate: and_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]             delegate: compare_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]               delegate: add_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]                 delegate: mult_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]                   delegate: unary_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]                     delegate: indexed_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]                       root: primary_expr
B: [35, 51] PS: [1, 12] PE: [1, 28]                         call
B: [35, 40] PS: [1, 12] PE: [1, 17]                           func: identifier `print`
B: [40, 41] PS: [1, 17] PE: [1, 18]                           ( `(`
B: [41, 50] PS: [1, 18] PE: [1, 27]                           arg: expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                             delegate: ternary_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                               delegate: or_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                 delegate: and_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                   delegate: compare_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                     delegate: add_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                       delegate: mult_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                         delegate: unary_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                           delegate: indexed_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                             root: primary_expr
B: [41, 50] PS: [1, 18] PE: [1, 27]                                               literal
B: [41, 50] PS: [1, 18] PE: [1, 27]                                                 string
B: [41, 42] PS: [1, 18] PE: [1, 19]                                                   start: string_start `"`
B: [42, 49] PS: [1, 19] PE: [1, 26]                                                   contents: string_contents
B: [42, 46] PS: [1, 19] PE: [1, 23]                                                     content: string_content `Hi, `
B: [46, 49] PS: [1, 23] PE: [1, 26]                                                     interpolation: interpolation
B: [46, 47] PS: [1, 23] PE: [1, 24]                                                       { `{`
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                       expr: expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                         delegate: ternary_expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                           delegate: or_expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                             delegate: and_expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                               delegate: compare_expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                                 delegate: add_expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                                   delegate: mult_expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                                     delegate: unary_expr
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                                       delegate: var_path
B: [47, 48] PS: [1, 24] PE: [1, 25]                                                                         root: identifier `a`
B: [48, 49] PS: [1, 25] PE: [1, 26]                                                       } `}`
B: [49, 50] PS: [1, 26] PE: [1, 27]                                                   end: string_end `"`
B: [50, 51] PS: [1, 27] PE: [1, 28]                           ) `)`
B: [52, 68] PS: [2,  0] PE: [2, 16]   fn_named
B: [52, 54] PS: [2,  0] PE: [2,  2]     keyword: fn `fn`
B: [55, 60] PS: [2,  3] PE: [2,  8]     name: identifier `myfoo`
B: [60, 61] PS: [2,  8] PE: [2,  9]     ( `(`
B: [61, 62] PS: [2,  9] PE: [2, 10]     ) `)`
B: [63, 68] PS: [2, 11] PE: [2, 16]     stmt: expr
B: [63, 68] PS: [2, 11] PE: [2, 16]       delegate: ternary_expr
B: [63, 68] PS: [2, 11] PE: [2, 16]         delegate: or_expr
B: [63, 68] PS: [2, 11] PE: [2, 16]           delegate: and_expr
B: [63, 68] PS: [2, 11] PE: [2, 16]             delegate: compare_expr
B: [63, 68] PS: [2, 11] PE: [2, 16]               delegate: add_expr
B: [63, 64] PS: [2, 11] PE: [2, 12]                 left: add_expr
B: [63, 64] PS: [2, 11] PE: [2, 12]                   delegate: mult_expr
B: [63, 64] PS: [2, 11] PE: [2, 12]                     delegate: unary_expr
B: [63, 64] PS: [2, 11] PE: [2, 12]                       delegate: indexed_expr
B: [63, 64] PS: [2, 11] PE: [2, 12]                         root: primary_expr
B: [63, 64] PS: [2, 11] PE: [2, 12]                           literal
B: [63, 64] PS: [2, 11] PE: [2, 12]                             int `1`
B: [65, 66] PS: [2, 13] PE: [2, 14]                 op: + `+`
B: [67, 68] PS: [2, 15] PE: [2, 16]                 right: mult_expr
B: [67, 68] PS: [2, 15] PE: [2, 16]                   delegate: unary_expr
B: [67, 68] PS: [2, 15] PE: [2, 16]                     delegate: indexed_expr
B: [67, 68] PS: [2, 15] PE: [2, 16]                       root: primary_expr
B: [67, 68] PS: [2, 15] PE: [2, 16]                         literal
B: [67, 68] PS: [2, 15] PE: [2, 16]                           int `1`
B: [69, 98] PS: [3,  0] PE: [4, 16]   fn_named
B: [69, 71] PS: [3,  0] PE: [3,  2]     keyword: fn `fn`
B: [72, 77] PS: [3,  3] PE: [3,  8]     name: identifier `myfoo`
B: [77, 78] PS: [3,  8] PE: [3,  9]     ( `(`
B: [78, 79] PS: [3,  9] PE: [3, 10]     normal_param: normal_param
B: [78, 79] PS: [3,  9] PE: [3, 10]       name: identifier `a`
B: [79, 80] PS: [3, 10] PE: [3, 11]     ) `)`
B: [80, 81] PS: [3, 11] PE: [3, 12]     block_colon: : `:`
B: [86, 98] PS: [4,  4] PE: [4, 16]     stmt: return_stmt
B: [86, 92] PS: [4,  4] PE: [4, 10]       return `return`
B: [93, 98] PS: [4, 11] PE: [4, 16]       right: expr
B: [93, 98] PS: [4, 11] PE: [4, 16]         delegate: ternary_expr
B: [93, 98] PS: [4, 11] PE: [4, 16]           delegate: or_expr
B: [93, 98] PS: [4, 11] PE: [4, 16]             delegate: and_expr
B: [93, 98] PS: [4, 11] PE: [4, 16]               delegate: compare_expr
B: [93, 98] PS: [4, 11] PE: [4, 16]                 delegate: add_expr
B: [93, 98] PS: [4, 11] PE: [4, 16]                   delegate: mult_expr
B: [93, 94] PS: [4, 11] PE: [4, 12]                     left: mult_expr
B: [93, 94] PS: [4, 11] PE: [4, 12]                       delegate: unary_expr
B: [93, 94] PS: [4, 11] PE: [4, 12]                         delegate: var_path
B: [93, 94] PS: [4, 11] PE: [4, 12]                           root: identifier `a`
B: [95, 96] PS: [4, 13] PE: [4, 14]                     op: / `/`
B: [97, 98] PS: [4, 15] PE: [4, 16]                     right: unary_expr
B: [97, 98] PS: [4, 15] PE: [4, 16]                       delegate: indexed_expr
B: [97, 98] PS: [4, 15] PE: [4, 16]                         root: primary_expr
B: [97, 98] PS: [4, 15] PE: [4, 16]                           literal
B: [97, 98] PS: [4, 15] PE: [4, 16]                             int `2`
