=====
Var path idx
=====
a[0]
a[0][1]
a[-1]
=====
B: [ 0, 19] PS: [0, 0] PE: [3, 0] source_file
B: [ 0,  4] PS: [0, 0] PE: [0, 4]   expr_stmt
B: [ 0,  4] PS: [0, 0] PE: [0, 4]     expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]       delegate: ternary_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]         delegate: or_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]           delegate: and_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]             delegate: compare_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]               delegate: add_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]                 delegate: mult_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]                   delegate: unary_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]                     delegate: fallback_expr
B: [ 0,  4] PS: [0, 0] PE: [0, 4]                       delegate: var_path
B: [ 0,  1] PS: [0, 0] PE: [0, 1]                         root: identifier `a`
B: [ 1,  2] PS: [0, 1] PE: [0, 2]                         [ `[`
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                         indexing: expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                           delegate: ternary_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                             delegate: or_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                               delegate: and_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                 delegate: compare_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                   delegate: add_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                     delegate: mult_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                       delegate: unary_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                         delegate: fallback_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                           delegate: indexed_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                             root: primary_expr
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                               literal
B: [ 2,  3] PS: [0, 2] PE: [0, 3]                                                 int `0`
B: [ 3,  4] PS: [0, 3] PE: [0, 4]                         ] `]`
B: [ 5, 12] PS: [1, 0] PE: [1, 7]   expr_stmt
B: [ 5, 12] PS: [1, 0] PE: [1, 7]     expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]       delegate: ternary_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]         delegate: or_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]           delegate: and_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]             delegate: compare_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]               delegate: add_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]                 delegate: mult_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]                   delegate: unary_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]                     delegate: fallback_expr
B: [ 5, 12] PS: [1, 0] PE: [1, 7]                       delegate: var_path
B: [ 5,  6] PS: [1, 0] PE: [1, 1]                         root: identifier `a`
B: [ 6,  7] PS: [1, 1] PE: [1, 2]                         [ `[`
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                         indexing: expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                           delegate: ternary_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                             delegate: or_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                               delegate: and_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                 delegate: compare_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                   delegate: add_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                     delegate: mult_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                       delegate: unary_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                         delegate: fallback_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                           delegate: indexed_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                             root: primary_expr
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                               literal
B: [ 7,  8] PS: [1, 2] PE: [1, 3]                                                 int `0`
B: [ 8,  9] PS: [1, 3] PE: [1, 4]                         ] `]`
B: [ 9, 10] PS: [1, 4] PE: [1, 5]                         [ `[`
B: [10, 11] PS: [1, 5] PE: [1, 6]                         indexing: expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                           delegate: ternary_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                             delegate: or_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                               delegate: and_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                 delegate: compare_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                   delegate: add_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                     delegate: mult_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                       delegate: unary_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                         delegate: fallback_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                           delegate: indexed_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                             root: primary_expr
B: [10, 11] PS: [1, 5] PE: [1, 6]                                               literal
B: [10, 11] PS: [1, 5] PE: [1, 6]                                                 int `1`
B: [11, 12] PS: [1, 6] PE: [1, 7]                         ] `]`
B: [13, 18] PS: [2, 0] PE: [2, 5]   expr_stmt
B: [13, 18] PS: [2, 0] PE: [2, 5]     expr
B: [13, 18] PS: [2, 0] PE: [2, 5]       delegate: ternary_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]         delegate: or_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]           delegate: and_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]             delegate: compare_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]               delegate: add_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]                 delegate: mult_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]                   delegate: unary_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]                     delegate: fallback_expr
B: [13, 18] PS: [2, 0] PE: [2, 5]                       delegate: var_path
B: [13, 14] PS: [2, 0] PE: [2, 1]                         root: identifier `a`
B: [14, 15] PS: [2, 1] PE: [2, 2]                         [ `[`
B: [15, 17] PS: [2, 2] PE: [2, 4]                         indexing: expr
B: [15, 17] PS: [2, 2] PE: [2, 4]                           delegate: ternary_expr
B: [15, 17] PS: [2, 2] PE: [2, 4]                             delegate: or_expr
B: [15, 17] PS: [2, 2] PE: [2, 4]                               delegate: and_expr
B: [15, 17] PS: [2, 2] PE: [2, 4]                                 delegate: compare_expr
B: [15, 17] PS: [2, 2] PE: [2, 4]                                   delegate: add_expr
B: [15, 17] PS: [2, 2] PE: [2, 4]                                     delegate: mult_expr
B: [15, 17] PS: [2, 2] PE: [2, 4]                                       delegate: unary_expr
B: [15, 16] PS: [2, 2] PE: [2, 3]                                         op: - `-`
B: [16, 17] PS: [2, 3] PE: [2, 4]                                         arg: unary_expr
B: [16, 17] PS: [2, 3] PE: [2, 4]                                           delegate: fallback_expr
B: [16, 17] PS: [2, 3] PE: [2, 4]                                             delegate: indexed_expr
B: [16, 17] PS: [2, 3] PE: [2, 4]                                               root: primary_expr
B: [16, 17] PS: [2, 3] PE: [2, 4]                                                 literal
B: [16, 17] PS: [2, 3] PE: [2, 4]                                                   int `1`
B: [17, 18] PS: [2, 4] PE: [2, 5]                         ] `]`
