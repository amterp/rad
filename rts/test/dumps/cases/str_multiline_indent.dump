=====
Str multiline indentation
=====
a = """
 hello
  friend
 """
=====
B: [ 0, 29] PS: [0, 0] PE: [4, 0] source_file
B: [ 0, 28] PS: [0, 0] PE: [3, 4]   assign
B: [ 0,  1] PS: [0, 0] PE: [0, 1]     left: var_path
B: [ 0,  1] PS: [0, 0] PE: [0, 1]       root: identifier `a`
B: [ 2,  3] PS: [0, 2] PE: [0, 3]     = `=`
B: [ 4, 28] PS: [0, 4] PE: [3, 4]     right: expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]       delegate: ternary_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]         delegate: or_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]           delegate: and_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]             delegate: compare_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]               delegate: add_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]                 delegate: mult_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]                   delegate: unary_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]                     delegate: fallback_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]                       delegate: indexed_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]                         root: primary_expr
B: [ 4, 28] PS: [0, 4] PE: [3, 4]                           literal
B: [ 4, 28] PS: [0, 4] PE: [3, 4]                             string
B: [ 4,  8] PS: [0, 4] PE: [1, 0]                               start: string_start `"""\n`
B: [ 9, 23] PS: [1, 1] PE: [2, 8]                               contents: string_contents
B: [ 9, 14] PS: [1, 1] PE: [1, 6]                                 content: string_content `hello`
B: [14, 15] PS: [1, 6] PE: [2, 0]                                 content: string_content `\n`
B: [16, 23] PS: [2, 1] PE: [2, 8]                                 content: string_content ` friend`
B: [23, 28] PS: [2, 8] PE: [3, 4]                               end: string_end `\n """`
