=====
Custom functions typed
=====
fn myfoo() -> void print("Hi")
fn myfoo(a: string) print("Hi, {a}")
fn myfoo() -> int 1 + 1
fn myfoo(a: float) -> float:
    return 1
fn myfoo(a: float) -> float|int|error:
    return 1
fn myfoo(a: float?) -> error?:
    return 1
=====
B: [  0, 230] PS: [0,  0] PE: [9,  0] source_file
B: [  0,  30] PS: [0,  0] PE: [0, 30]   fn_named
B: [  0,   2] PS: [0,  0] PE: [0,  2]     keyword: fn `fn`
B: [  3,   8] PS: [0,  3] PE: [0,  8]     name: identifier `myfoo`
B: [  8,  10] PS: [0,  8] PE: [0, 10]     () `()`
B: [ 11,  13] PS: [0, 11] PE: [0, 13]     -> `->`
B: [ 14,  18] PS: [0, 14] PE: [0, 18]     return_type: fn_param_or_return_type
B: [ 14,  18] PS: [0, 14] PE: [0, 18]       fn_leaf_type
B: [ 14,  18] PS: [0, 14] PE: [0, 18]         void_type `void`
B: [ 19,  30] PS: [0, 19] PE: [0, 30]     expr: expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]       ternary_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]         delegate: or_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]           delegate: and_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]             delegate: compare_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]               delegate: add_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]                 delegate: mult_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]                   delegate: unary_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]                     delegate: indexed_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]                       root: primary_expr
B: [ 19,  30] PS: [0, 19] PE: [0, 30]                         call
B: [ 19,  24] PS: [0, 19] PE: [0, 24]                           func: identifier `print`
B: [ 24,  25] PS: [0, 24] PE: [0, 25]                           ( `(`
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                           arg: expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                             ternary_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                               delegate: or_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                 delegate: and_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                   delegate: compare_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                     delegate: add_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                       delegate: mult_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                         delegate: unary_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                           delegate: indexed_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                             root: primary_expr
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                               literal
B: [ 25,  29] PS: [0, 25] PE: [0, 29]                                                 string
B: [ 25,  26] PS: [0, 25] PE: [0, 26]                                                   start: string_start `"`
B: [ 26,  28] PS: [0, 26] PE: [0, 28]                                                   contents: string_contents
B: [ 26,  28] PS: [0, 26] PE: [0, 28]                                                     content: string_content `Hi`
B: [ 28,  29] PS: [0, 28] PE: [0, 29]                                                   end: string_end `"`
B: [ 29,  30] PS: [0, 29] PE: [0, 30]                           ) `)`
B: [ 31,  67] PS: [1,  0] PE: [1, 36]   fn_named
B: [ 31,  33] PS: [1,  0] PE: [1,  2]     keyword: fn `fn`
B: [ 34,  39] PS: [1,  3] PE: [1,  8]     name: identifier `myfoo`
B: [ 39,  40] PS: [1,  8] PE: [1,  9]     ( `(`
B: [ 40,  49] PS: [1,  9] PE: [1, 18]     param: fn_param
B: [ 40,  41] PS: [1,  9] PE: [1, 10]       name: identifier `a`
B: [ 41,  42] PS: [1, 10] PE: [1, 11]       : `:`
B: [ 43,  49] PS: [1, 12] PE: [1, 18]       type: fn_param_or_return_type
B: [ 43,  49] PS: [1, 12] PE: [1, 18]         fn_leaf_type
B: [ 43,  49] PS: [1, 12] PE: [1, 18]           string_type `string`
B: [ 49,  50] PS: [1, 18] PE: [1, 19]     ) `)`
B: [ 51,  67] PS: [1, 20] PE: [1, 36]     expr: expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]       ternary_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]         delegate: or_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]           delegate: and_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]             delegate: compare_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]               delegate: add_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]                 delegate: mult_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]                   delegate: unary_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]                     delegate: indexed_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]                       root: primary_expr
B: [ 51,  67] PS: [1, 20] PE: [1, 36]                         call
B: [ 51,  56] PS: [1, 20] PE: [1, 25]                           func: identifier `print`
B: [ 56,  57] PS: [1, 25] PE: [1, 26]                           ( `(`
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                           arg: expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                             ternary_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                               delegate: or_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                 delegate: and_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                   delegate: compare_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                     delegate: add_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                       delegate: mult_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                         delegate: unary_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                           delegate: indexed_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                             root: primary_expr
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                               literal
B: [ 57,  66] PS: [1, 26] PE: [1, 35]                                                 string
B: [ 57,  58] PS: [1, 26] PE: [1, 27]                                                   start: string_start `"`
B: [ 58,  65] PS: [1, 27] PE: [1, 34]                                                   contents: string_contents
B: [ 58,  62] PS: [1, 27] PE: [1, 31]                                                     content: string_content `Hi, `
B: [ 62,  65] PS: [1, 31] PE: [1, 34]                                                     interpolation: interpolation
B: [ 62,  63] PS: [1, 31] PE: [1, 32]                                                       { `{`
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                       expr: expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                         ternary_expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                           delegate: or_expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                             delegate: and_expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                               delegate: compare_expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                                 delegate: add_expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                                   delegate: mult_expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                                     delegate: unary_expr
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                                       delegate: var_path
B: [ 63,  64] PS: [1, 32] PE: [1, 33]                                                                         root: identifier `a`
B: [ 64,  65] PS: [1, 33] PE: [1, 34]                                                       } `}`
B: [ 65,  66] PS: [1, 34] PE: [1, 35]                                                   end: string_end `"`
B: [ 66,  67] PS: [1, 35] PE: [1, 36]                           ) `)`
B: [ 68,  91] PS: [2,  0] PE: [2, 23]   fn_named
B: [ 68,  70] PS: [2,  0] PE: [2,  2]     keyword: fn `fn`
B: [ 71,  76] PS: [2,  3] PE: [2,  8]     name: identifier `myfoo`
B: [ 76,  78] PS: [2,  8] PE: [2, 10]     () `()`
B: [ 79,  81] PS: [2, 11] PE: [2, 13]     -> `->`
B: [ 82,  85] PS: [2, 14] PE: [2, 17]     return_type: fn_param_or_return_type
B: [ 82,  85] PS: [2, 14] PE: [2, 17]       fn_leaf_type
B: [ 82,  85] PS: [2, 14] PE: [2, 17]         int_type `int`
B: [ 86,  91] PS: [2, 18] PE: [2, 23]     expr: expr
B: [ 86,  91] PS: [2, 18] PE: [2, 23]       ternary_expr
B: [ 86,  91] PS: [2, 18] PE: [2, 23]         delegate: or_expr
B: [ 86,  91] PS: [2, 18] PE: [2, 23]           delegate: and_expr
B: [ 86,  91] PS: [2, 18] PE: [2, 23]             delegate: compare_expr
B: [ 86,  91] PS: [2, 18] PE: [2, 23]               delegate: add_expr
B: [ 86,  87] PS: [2, 18] PE: [2, 19]                 left: add_expr
B: [ 86,  87] PS: [2, 18] PE: [2, 19]                   delegate: mult_expr
B: [ 86,  87] PS: [2, 18] PE: [2, 19]                     delegate: unary_expr
B: [ 86,  87] PS: [2, 18] PE: [2, 19]                       delegate: indexed_expr
B: [ 86,  87] PS: [2, 18] PE: [2, 19]                         root: primary_expr
B: [ 86,  87] PS: [2, 18] PE: [2, 19]                           literal
B: [ 86,  87] PS: [2, 18] PE: [2, 19]                             int `1`
B: [ 88,  89] PS: [2, 20] PE: [2, 21]                 op: + `+`
B: [ 90,  91] PS: [2, 22] PE: [2, 23]                 right: mult_expr
B: [ 90,  91] PS: [2, 22] PE: [2, 23]                   delegate: unary_expr
B: [ 90,  91] PS: [2, 22] PE: [2, 23]                     delegate: indexed_expr
B: [ 90,  91] PS: [2, 22] PE: [2, 23]                       root: primary_expr
B: [ 90,  91] PS: [2, 22] PE: [2, 23]                         literal
B: [ 90,  91] PS: [2, 22] PE: [2, 23]                           int `1`
B: [ 92, 133] PS: [3,  0] PE: [4, 12]   fn_named
B: [ 92,  94] PS: [3,  0] PE: [3,  2]     keyword: fn `fn`
B: [ 95, 100] PS: [3,  3] PE: [3,  8]     name: identifier `myfoo`
B: [100, 101] PS: [3,  8] PE: [3,  9]     ( `(`
B: [101, 109] PS: [3,  9] PE: [3, 17]     param: fn_param
B: [101, 102] PS: [3,  9] PE: [3, 10]       name: identifier `a`
B: [102, 103] PS: [3, 10] PE: [3, 11]       : `:`
B: [104, 109] PS: [3, 12] PE: [3, 17]       type: fn_param_or_return_type
B: [104, 109] PS: [3, 12] PE: [3, 17]         fn_leaf_type
B: [104, 109] PS: [3, 12] PE: [3, 17]           float_type `float`
B: [109, 110] PS: [3, 17] PE: [3, 18]     ) `)`
B: [111, 113] PS: [3, 19] PE: [3, 21]     -> `->`
B: [114, 119] PS: [3, 22] PE: [3, 27]     return_type: fn_param_or_return_type
B: [114, 119] PS: [3, 22] PE: [3, 27]       fn_leaf_type
B: [114, 119] PS: [3, 22] PE: [3, 27]         float_type `float`
B: [119, 120] PS: [3, 27] PE: [3, 28]     block_colon: : `:`
B: [125, 133] PS: [4,  4] PE: [4, 12]     return_stmt: return_stmt
B: [125, 131] PS: [4,  4] PE: [4, 10]       return `return`
B: [132, 133] PS: [4, 11] PE: [4, 12]       value: expr
B: [132, 133] PS: [4, 11] PE: [4, 12]         ternary_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]           delegate: or_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]             delegate: and_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]               delegate: compare_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]                 delegate: add_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]                   delegate: mult_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]                     delegate: unary_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]                       delegate: indexed_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]                         root: primary_expr
B: [132, 133] PS: [4, 11] PE: [4, 12]                           literal
B: [132, 133] PS: [4, 11] PE: [4, 12]                             int `1`
B: [134, 185] PS: [5,  0] PE: [6, 12]   fn_named
B: [134, 136] PS: [5,  0] PE: [5,  2]     keyword: fn `fn`
B: [137, 142] PS: [5,  3] PE: [5,  8]     name: identifier `myfoo`
B: [142, 143] PS: [5,  8] PE: [5,  9]     ( `(`
B: [143, 151] PS: [5,  9] PE: [5, 17]     param: fn_param
B: [143, 144] PS: [5,  9] PE: [5, 10]       name: identifier `a`
B: [144, 145] PS: [5, 10] PE: [5, 11]       : `:`
B: [146, 151] PS: [5, 12] PE: [5, 17]       type: fn_param_or_return_type
B: [146, 151] PS: [5, 12] PE: [5, 17]         fn_leaf_type
B: [146, 151] PS: [5, 12] PE: [5, 17]           float_type `float`
B: [151, 152] PS: [5, 17] PE: [5, 18]     ) `)`
B: [153, 155] PS: [5, 19] PE: [5, 21]     -> `->`
B: [156, 171] PS: [5, 22] PE: [5, 37]     return_type: fn_param_or_return_type
B: [156, 161] PS: [5, 22] PE: [5, 27]       fn_leaf_type
B: [156, 161] PS: [5, 22] PE: [5, 27]         float_type `float`
B: [161, 162] PS: [5, 27] PE: [5, 28]       | `|`
B: [162, 165] PS: [5, 28] PE: [5, 31]       fn_leaf_type
B: [162, 165] PS: [5, 28] PE: [5, 31]         int_type `int`
B: [165, 166] PS: [5, 31] PE: [5, 32]       | `|`
B: [166, 171] PS: [5, 32] PE: [5, 37]       fn_leaf_type
B: [166, 171] PS: [5, 32] PE: [5, 37]         error_type `error`
B: [171, 172] PS: [5, 37] PE: [5, 38]     block_colon: : `:`
B: [177, 185] PS: [6,  4] PE: [6, 12]     return_stmt: return_stmt
B: [177, 183] PS: [6,  4] PE: [6, 10]       return `return`
B: [184, 185] PS: [6, 11] PE: [6, 12]       value: expr
B: [184, 185] PS: [6, 11] PE: [6, 12]         ternary_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]           delegate: or_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]             delegate: and_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]               delegate: compare_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]                 delegate: add_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]                   delegate: mult_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]                     delegate: unary_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]                       delegate: indexed_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]                         root: primary_expr
B: [184, 185] PS: [6, 11] PE: [6, 12]                           literal
B: [184, 185] PS: [6, 11] PE: [6, 12]                             int `1`
B: [186, 229] PS: [7,  0] PE: [8, 12]   fn_named
B: [186, 188] PS: [7,  0] PE: [7,  2]     keyword: fn `fn`
B: [189, 194] PS: [7,  3] PE: [7,  8]     name: identifier `myfoo`
B: [194, 195] PS: [7,  8] PE: [7,  9]     ( `(`
B: [195, 204] PS: [7,  9] PE: [7, 18]     param: fn_param
B: [195, 196] PS: [7,  9] PE: [7, 10]       name: identifier `a`
B: [196, 197] PS: [7, 10] PE: [7, 11]       : `:`
B: [198, 204] PS: [7, 12] PE: [7, 18]       type: fn_param_or_return_type
B: [198, 204] PS: [7, 12] PE: [7, 18]         fn_leaf_type
B: [198, 203] PS: [7, 12] PE: [7, 17]           float_type `float`
B: [203, 204] PS: [7, 17] PE: [7, 18]           optional: ? `?`
B: [204, 205] PS: [7, 18] PE: [7, 19]     ) `)`
B: [206, 208] PS: [7, 20] PE: [7, 22]     -> `->`
B: [209, 215] PS: [7, 23] PE: [7, 29]     return_type: fn_param_or_return_type
B: [209, 215] PS: [7, 23] PE: [7, 29]       fn_leaf_type
B: [209, 214] PS: [7, 23] PE: [7, 28]         error_type `error`
B: [214, 215] PS: [7, 28] PE: [7, 29]         optional: ? `?`
B: [215, 216] PS: [7, 29] PE: [7, 30]     block_colon: : `:`
B: [221, 229] PS: [8,  4] PE: [8, 12]     return_stmt: return_stmt
B: [221, 227] PS: [8,  4] PE: [8, 10]       return `return`
B: [228, 229] PS: [8, 11] PE: [8, 12]       value: expr
B: [228, 229] PS: [8, 11] PE: [8, 12]         ternary_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]           delegate: or_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]             delegate: and_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]               delegate: compare_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]                 delegate: add_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]                   delegate: mult_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]                     delegate: unary_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]                       delegate: indexed_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]                         root: primary_expr
B: [228, 229] PS: [8, 11] PE: [8, 12]                           literal
B: [228, 229] PS: [8, 11] PE: [8, 12]                             int `1`
