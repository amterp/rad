=====
Complete
=====
#!/usr/bin/env rad
---
this is a file
header

whoa! hello
---
args:
    name str
    age int = 30 # An age.
    employed bool
    foo str[] = ["blah", "bloop"]
    bar "BAR" b int[] = [4, 5]

    name enum ["alice", "bob"]
    name regex "[A-Z][a-z]*"

a = 2
a = "hello"
a = 3.14
a = true
a = [1, 2, 3]
a = {"x": 1, y: 2}

a = 3 + 5 * 3 - 1 / 0.01 % 2
a += 2
a -= 1
a *= 5
a /= 2
a %= 2

a = `hello {upper("alice")}`
print(a)

f1 = json[].id
f2 = json.hello[].blah.*.woop

rad url:
    fields f1, f2
    sort f1 desc, f2
    sort

    if a > b:
        sort f2, f1

    f1:
        map fn(a) a * 2

    f1, f2:
        color "red" ".*"

if bah > 5:
    hello = bloop

    if blah == 2:
        yoink += 2
    else if blah == 3:
        boom = "haha"

request url:
    fields f1

display:
    fields f2, f1, f3

area = [width[i] * height[i] for i in range(width)]

numbers = [1, 2, 3]
print(join(numbers, "... "))
print(join(numbers, "... ", "Okay I'll count. "))
print(join(numbers, "... ", "Okay I'll count. ", "!"))

a = nums[:]
a = nums[1:]
a = nums[1:2]
a = nums[:2]

my_headers = {
    "Authorization": "Bearer {token}",
}
response = http_post(url, body, headers=my_headers)

text = """
This is an
example of text
that "may contain quotes"!
"""
print(text)

text = r"Hello\n{name}"
text = r'Hello\n{name}'
text = r`Hello\n{name}`

url, name = pick_from_resource("./resources/websites.json", website)
print("url: {url}, name: {name}")

$`ls`

cmd = `curl {url}`
$cmd

$cmd

$`ls`

code = $cmd

code, stdout = $cmd

code, stdout, stderr = $cmd

_, _, stderr = $cmd

quiet $`touch {filename}.txt`

confirm quiet $`touch {filename}.txt`
quiet confirm $`touch {filename}.txt`

defer:
    $`mv notes-tmp.txt notes.txt`
    print("Moved back!")

$`sed -i '' "s/Version = .*/Version = {version}/" {path}`
errdefer:
    print("Undoing bump...")
    $`git checkout -- {path}`

if false:  // failure simulation point 1
    print("Oh no! BAD!")
    exit(1)

$`git add {path}`
errdefer:
    print("Resetting {path}...")
    _, _ = $`git reset {path}`

if false:  // failure simulation point 2
    print("Bah! BAD!")
    exit(1)

$`git commit -m "Bump version to {version}"`
=====
B: [   0, 2166] PS: [  0,  0] PE: [141,  0] source_file
B: [   0,   18] PS: [  0,  0] PE: [  0, 18]   shebang `#!/usr/bin/env rad`
B: [  19,   62] PS: [  1,  0] PE: [  7,  0]   file_header
B: [  19,   22] PS: [  1,  0] PE: [  1,  3]     --- `---`
B: [  23,   58] PS: [  2,  0] PE: [  6,  0]     contents: file_header_contents `this is a file\nheader\n\nwhoa! hello\n`
B: [  58,   61] PS: [  6,  0] PE: [  6,  3]     --- `---`
B: [  62,  251] PS: [  7,  0] PE: [ 15, 28]   arg_block
B: [  62,   66] PS: [  7,  0] PE: [  7,  4]     args `args`
B: [  66,   67] PS: [  7,  4] PE: [  7,  5]     : `:`
B: [  72,   80] PS: [  8,  4] PE: [  8, 12]     declaration: arg_declaration
B: [  72,   76] PS: [  8,  4] PE: [  8,  8]       arg_name: identifier `name`
B: [  77,   80] PS: [  8,  9] PE: [  8, 12]       type: string_type `str`
B: [  85,  107] PS: [  9,  4] PE: [  9, 26]     declaration: arg_declaration
B: [  85,   88] PS: [  9,  4] PE: [  9,  7]       arg_name: identifier `age`
B: [  89,   92] PS: [  9,  8] PE: [  9, 11]       type: int_type `int`
B: [  93,   94] PS: [  9, 12] PE: [  9, 13]       = `=`
B: [  95,   97] PS: [  9, 14] PE: [  9, 16]       default: int_arg
B: [  95,   97] PS: [  9, 14] PE: [  9, 16]         value: int `30`
B: [ 100,  107] PS: [  9, 19] PE: [  9, 26]       comment: comment_text `An age.`
B: [ 112,  125] PS: [ 10,  4] PE: [ 10, 17]     declaration: arg_declaration
B: [ 112,  120] PS: [ 10,  4] PE: [ 10, 12]       arg_name: identifier `employed`
B: [ 121,  125] PS: [ 10, 13] PE: [ 10, 17]       type: bool_type `bool`
B: [ 130,  159] PS: [ 11,  4] PE: [ 11, 33]     declaration: arg_declaration
B: [ 130,  133] PS: [ 11,  4] PE: [ 11,  7]       arg_name: identifier `foo`
B: [ 134,  139] PS: [ 11,  8] PE: [ 11, 13]       type: string_list_type `str[]`
B: [ 140,  141] PS: [ 11, 14] PE: [ 11, 15]       = `=`
B: [ 142,  159] PS: [ 11, 16] PE: [ 11, 33]       default: string_list
B: [ 142,  143] PS: [ 11, 16] PE: [ 11, 17]         [ `[`
B: [ 143,  149] PS: [ 11, 17] PE: [ 11, 23]         list_entry: string
B: [ 143,  144] PS: [ 11, 17] PE: [ 11, 18]           start: string_start `"`
B: [ 144,  148] PS: [ 11, 18] PE: [ 11, 22]           contents: string_contents
B: [ 144,  148] PS: [ 11, 18] PE: [ 11, 22]             content: string_content `blah`
B: [ 148,  149] PS: [ 11, 22] PE: [ 11, 23]           end: string_end `"`
B: [ 149,  150] PS: [ 11, 23] PE: [ 11, 24]         , `,`
B: [ 151,  158] PS: [ 11, 25] PE: [ 11, 32]         list_entry: string
B: [ 151,  152] PS: [ 11, 25] PE: [ 11, 26]           start: string_start `"`
B: [ 152,  157] PS: [ 11, 26] PE: [ 11, 31]           contents: string_contents
B: [ 152,  157] PS: [ 11, 26] PE: [ 11, 31]             content: string_content `bloop`
B: [ 157,  158] PS: [ 11, 31] PE: [ 11, 32]           end: string_end `"`
B: [ 158,  159] PS: [ 11, 32] PE: [ 11, 33]         ] `]`
B: [ 164,  190] PS: [ 12,  4] PE: [ 12, 30]     declaration: arg_declaration
B: [ 164,  167] PS: [ 12,  4] PE: [ 12,  7]       arg_name: identifier `bar`
B: [ 168,  173] PS: [ 12,  8] PE: [ 12, 13]       rename: string
B: [ 168,  169] PS: [ 12,  8] PE: [ 12,  9]         start: string_start `"`
B: [ 169,  172] PS: [ 12,  9] PE: [ 12, 12]         contents: string_contents
B: [ 169,  172] PS: [ 12,  9] PE: [ 12, 12]           content: string_content `BAR`
B: [ 172,  173] PS: [ 12, 12] PE: [ 12, 13]         end: string_end `"`
B: [ 174,  175] PS: [ 12, 14] PE: [ 12, 15]       shorthand: shorthand_flag `b`
B: [ 176,  181] PS: [ 12, 16] PE: [ 12, 21]       type: int_list_type `int[]`
B: [ 182,  183] PS: [ 12, 22] PE: [ 12, 23]       = `=`
B: [ 184,  190] PS: [ 12, 24] PE: [ 12, 30]       default: int_list
B: [ 184,  185] PS: [ 12, 24] PE: [ 12, 25]         [ `[`
B: [ 185,  186] PS: [ 12, 25] PE: [ 12, 26]         list_entry: int_arg
B: [ 185,  186] PS: [ 12, 25] PE: [ 12, 26]           value: int `4`
B: [ 186,  187] PS: [ 12, 26] PE: [ 12, 27]         , `,`
B: [ 188,  189] PS: [ 12, 28] PE: [ 12, 29]         list_entry: int_arg
B: [ 188,  189] PS: [ 12, 28] PE: [ 12, 29]           value: int `5`
B: [ 189,  190] PS: [ 12, 29] PE: [ 12, 30]         ] `]`
B: [ 196,  222] PS: [ 14,  4] PE: [ 14, 30]     enum_constraint: arg_enum_constraint
B: [ 196,  200] PS: [ 14,  4] PE: [ 14,  8]       arg_name: identifier `name`
B: [ 201,  205] PS: [ 14,  9] PE: [ 14, 13]       enum `enum`
B: [ 206,  222] PS: [ 14, 14] PE: [ 14, 30]       values: string_list
B: [ 206,  207] PS: [ 14, 14] PE: [ 14, 15]         [ `[`
B: [ 207,  214] PS: [ 14, 15] PE: [ 14, 22]         list_entry: string
B: [ 207,  208] PS: [ 14, 15] PE: [ 14, 16]           start: string_start `"`
B: [ 208,  213] PS: [ 14, 16] PE: [ 14, 21]           contents: string_contents
B: [ 208,  213] PS: [ 14, 16] PE: [ 14, 21]             content: string_content `alice`
B: [ 213,  214] PS: [ 14, 21] PE: [ 14, 22]           end: string_end `"`
B: [ 214,  215] PS: [ 14, 22] PE: [ 14, 23]         , `,`
B: [ 216,  221] PS: [ 14, 24] PE: [ 14, 29]         list_entry: string
B: [ 216,  217] PS: [ 14, 24] PE: [ 14, 25]           start: string_start `"`
B: [ 217,  220] PS: [ 14, 25] PE: [ 14, 28]           contents: string_contents
B: [ 217,  220] PS: [ 14, 25] PE: [ 14, 28]             content: string_content `bob`
B: [ 220,  221] PS: [ 14, 28] PE: [ 14, 29]           end: string_end `"`
B: [ 221,  222] PS: [ 14, 29] PE: [ 14, 30]         ] `]`
B: [ 227,  251] PS: [ 15,  4] PE: [ 15, 28]     regex_constraint: arg_regex_constraint
B: [ 227,  231] PS: [ 15,  4] PE: [ 15,  8]       arg_name: identifier `name`
B: [ 232,  237] PS: [ 15,  9] PE: [ 15, 14]       regex `regex`
B: [ 238,  251] PS: [ 15, 15] PE: [ 15, 28]       regex: string
B: [ 238,  239] PS: [ 15, 15] PE: [ 15, 16]         start: string_start `"`
B: [ 239,  250] PS: [ 15, 16] PE: [ 15, 27]         contents: string_contents
B: [ 239,  250] PS: [ 15, 16] PE: [ 15, 27]           content: string_content `[A-Z][a-z]*`
B: [ 250,  251] PS: [ 15, 27] PE: [ 15, 28]         end: string_end `"`
B: [ 253,  258] PS: [ 17,  0] PE: [ 17,  5]   assign
B: [ 253,  254] PS: [ 17,  0] PE: [ 17,  1]     left: var_path
B: [ 253,  254] PS: [ 17,  0] PE: [ 17,  1]       root: identifier `a`
B: [ 255,  256] PS: [ 17,  2] PE: [ 17,  3]     = `=`
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]     right: expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]       delegate: ternary_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]         delegate: or_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]           delegate: and_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]             delegate: compare_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]               delegate: add_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]                 delegate: mult_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]                   delegate: unary_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]                     delegate: fallback_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]                       delegate: indexed_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]                         root: primary_expr
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]                           literal
B: [ 257,  258] PS: [ 17,  4] PE: [ 17,  5]                             int `2`
B: [ 259,  270] PS: [ 18,  0] PE: [ 18, 11]   assign
B: [ 259,  260] PS: [ 18,  0] PE: [ 18,  1]     left: var_path
B: [ 259,  260] PS: [ 18,  0] PE: [ 18,  1]       root: identifier `a`
B: [ 261,  262] PS: [ 18,  2] PE: [ 18,  3]     = `=`
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]     right: expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]       delegate: ternary_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]         delegate: or_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]           delegate: and_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]             delegate: compare_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]               delegate: add_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]                 delegate: mult_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]                   delegate: unary_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]                     delegate: fallback_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]                       delegate: indexed_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]                         root: primary_expr
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]                           literal
B: [ 263,  270] PS: [ 18,  4] PE: [ 18, 11]                             string
B: [ 263,  264] PS: [ 18,  4] PE: [ 18,  5]                               start: string_start `"`
B: [ 264,  269] PS: [ 18,  5] PE: [ 18, 10]                               contents: string_contents
B: [ 264,  269] PS: [ 18,  5] PE: [ 18, 10]                                 content: string_content `hello`
B: [ 269,  270] PS: [ 18, 10] PE: [ 18, 11]                               end: string_end `"`
B: [ 271,  279] PS: [ 19,  0] PE: [ 19,  8]   assign
B: [ 271,  272] PS: [ 19,  0] PE: [ 19,  1]     left: var_path
B: [ 271,  272] PS: [ 19,  0] PE: [ 19,  1]       root: identifier `a`
B: [ 273,  274] PS: [ 19,  2] PE: [ 19,  3]     = `=`
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]     right: expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]       delegate: ternary_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]         delegate: or_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]           delegate: and_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]             delegate: compare_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]               delegate: add_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]                 delegate: mult_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]                   delegate: unary_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]                     delegate: fallback_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]                       delegate: indexed_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]                         root: primary_expr
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]                           literal
B: [ 275,  279] PS: [ 19,  4] PE: [ 19,  8]                             float `3.14`
B: [ 280,  288] PS: [ 20,  0] PE: [ 20,  8]   assign
B: [ 280,  281] PS: [ 20,  0] PE: [ 20,  1]     left: var_path
B: [ 280,  281] PS: [ 20,  0] PE: [ 20,  1]       root: identifier `a`
B: [ 282,  283] PS: [ 20,  2] PE: [ 20,  3]     = `=`
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]     right: expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]       delegate: ternary_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]         delegate: or_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]           delegate: and_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]             delegate: compare_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]               delegate: add_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                 delegate: mult_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                   delegate: unary_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                     delegate: fallback_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                       delegate: indexed_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                         root: primary_expr
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                           literal
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                             bool
B: [ 284,  288] PS: [ 20,  4] PE: [ 20,  8]                               true `true`
B: [ 289,  302] PS: [ 21,  0] PE: [ 21, 13]   assign
B: [ 289,  290] PS: [ 21,  0] PE: [ 21,  1]     left: var_path
B: [ 289,  290] PS: [ 21,  0] PE: [ 21,  1]       root: identifier `a`
B: [ 291,  292] PS: [ 21,  2] PE: [ 21,  3]     = `=`
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]     right: expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]       delegate: ternary_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]         delegate: or_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]           delegate: and_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]             delegate: compare_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]               delegate: add_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]                 delegate: mult_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]                   delegate: unary_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]                     delegate: fallback_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]                       delegate: indexed_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]                         root: primary_expr
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]                           literal
B: [ 293,  302] PS: [ 21,  4] PE: [ 21, 13]                             list
B: [ 293,  294] PS: [ 21,  4] PE: [ 21,  5]                               [ `[`
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                               list_entry: expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                 delegate: ternary_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                   delegate: or_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                     delegate: and_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                       delegate: compare_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                         delegate: add_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                           delegate: mult_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                             delegate: unary_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                               delegate: fallback_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                                 delegate: indexed_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                                   root: primary_expr
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                                     literal
B: [ 294,  295] PS: [ 21,  5] PE: [ 21,  6]                                                       int `1`
B: [ 295,  296] PS: [ 21,  6] PE: [ 21,  7]                               , `,`
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                               list_entry: expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                 delegate: ternary_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                   delegate: or_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                     delegate: and_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                       delegate: compare_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                         delegate: add_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                           delegate: mult_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                             delegate: unary_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                               delegate: fallback_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                                 delegate: indexed_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                                   root: primary_expr
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                                     literal
B: [ 297,  298] PS: [ 21,  8] PE: [ 21,  9]                                                       int `2`
B: [ 298,  299] PS: [ 21,  9] PE: [ 21, 10]                               , `,`
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                               list_entry: expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                 delegate: ternary_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                   delegate: or_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                     delegate: and_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                       delegate: compare_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                         delegate: add_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                           delegate: mult_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                             delegate: unary_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                               delegate: fallback_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                                 delegate: indexed_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                                   root: primary_expr
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                                     literal
B: [ 300,  301] PS: [ 21, 11] PE: [ 21, 12]                                                       int `3`
B: [ 301,  302] PS: [ 21, 12] PE: [ 21, 13]                               ] `]`
B: [ 303,  321] PS: [ 22,  0] PE: [ 22, 18]   assign
B: [ 303,  304] PS: [ 22,  0] PE: [ 22,  1]     left: var_path
B: [ 303,  304] PS: [ 22,  0] PE: [ 22,  1]       root: identifier `a`
B: [ 305,  306] PS: [ 22,  2] PE: [ 22,  3]     = `=`
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]     right: expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]       delegate: ternary_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]         delegate: or_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]           delegate: and_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]             delegate: compare_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]               delegate: add_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]                 delegate: mult_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]                   delegate: unary_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]                     delegate: fallback_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]                       delegate: indexed_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]                         root: primary_expr
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]                           literal
B: [ 307,  321] PS: [ 22,  4] PE: [ 22, 18]                             map
B: [ 307,  308] PS: [ 22,  4] PE: [ 22,  5]                               { `{`
B: [ 308,  314] PS: [ 22,  5] PE: [ 22, 11]                               map_entry: map_entry
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                 key: expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                   delegate: ternary_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                     delegate: or_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                       delegate: and_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                         delegate: compare_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                           delegate: add_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                             delegate: mult_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                               delegate: unary_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                                 delegate: fallback_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                                   delegate: indexed_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                                     root: primary_expr
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                                       literal
B: [ 308,  311] PS: [ 22,  5] PE: [ 22,  8]                                                         string
B: [ 308,  309] PS: [ 22,  5] PE: [ 22,  6]                                                           start: string_start `"`
B: [ 309,  310] PS: [ 22,  6] PE: [ 22,  7]                                                           contents: string_contents
B: [ 309,  310] PS: [ 22,  6] PE: [ 22,  7]                                                             content: string_content `x`
B: [ 310,  311] PS: [ 22,  7] PE: [ 22,  8]                                                           end: string_end `"`
B: [ 311,  312] PS: [ 22,  8] PE: [ 22,  9]                                 : `:`
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                 value: expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                   delegate: ternary_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                     delegate: or_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                       delegate: and_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                         delegate: compare_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                           delegate: add_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                             delegate: mult_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                               delegate: unary_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                                 delegate: fallback_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                                   delegate: indexed_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                                     root: primary_expr
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                                       literal
B: [ 313,  314] PS: [ 22, 10] PE: [ 22, 11]                                                         int `1`
B: [ 314,  315] PS: [ 22, 11] PE: [ 22, 12]                               , `,`
B: [ 316,  320] PS: [ 22, 13] PE: [ 22, 17]                               map_entry: map_entry
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                 key: expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                   delegate: ternary_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                     delegate: or_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                       delegate: and_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                         delegate: compare_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                           delegate: add_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                             delegate: mult_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                               delegate: unary_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                                 delegate: fallback_expr
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                                   delegate: var_path
B: [ 316,  317] PS: [ 22, 13] PE: [ 22, 14]                                                     root: identifier `y`
B: [ 317,  318] PS: [ 22, 14] PE: [ 22, 15]                                 : `:`
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                 value: expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                   delegate: ternary_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                     delegate: or_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                       delegate: and_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                         delegate: compare_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                           delegate: add_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                             delegate: mult_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                               delegate: unary_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                                 delegate: fallback_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                                   delegate: indexed_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                                     root: primary_expr
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                                       literal
B: [ 319,  320] PS: [ 22, 16] PE: [ 22, 17]                                                         int `2`
B: [ 320,  321] PS: [ 22, 17] PE: [ 22, 18]                               } `}`
B: [ 323,  351] PS: [ 24,  0] PE: [ 24, 28]   assign
B: [ 323,  324] PS: [ 24,  0] PE: [ 24,  1]     left: var_path
B: [ 323,  324] PS: [ 24,  0] PE: [ 24,  1]       root: identifier `a`
B: [ 325,  326] PS: [ 24,  2] PE: [ 24,  3]     = `=`
B: [ 327,  351] PS: [ 24,  4] PE: [ 24, 28]     right: expr
B: [ 327,  351] PS: [ 24,  4] PE: [ 24, 28]       delegate: ternary_expr
B: [ 327,  351] PS: [ 24,  4] PE: [ 24, 28]         delegate: or_expr
B: [ 327,  351] PS: [ 24,  4] PE: [ 24, 28]           delegate: and_expr
B: [ 327,  351] PS: [ 24,  4] PE: [ 24, 28]             delegate: compare_expr
B: [ 327,  351] PS: [ 24,  4] PE: [ 24, 28]               delegate: add_expr
B: [ 327,  336] PS: [ 24,  4] PE: [ 24, 13]                 left: add_expr
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                   left: add_expr
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                     delegate: mult_expr
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                       delegate: unary_expr
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                         delegate: fallback_expr
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                           delegate: indexed_expr
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                             root: primary_expr
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                               literal
B: [ 327,  328] PS: [ 24,  4] PE: [ 24,  5]                                 int `3`
B: [ 329,  330] PS: [ 24,  6] PE: [ 24,  7]                   op: + `+`
B: [ 331,  336] PS: [ 24,  8] PE: [ 24, 13]                   right: mult_expr
B: [ 331,  332] PS: [ 24,  8] PE: [ 24,  9]                     left: mult_expr
B: [ 331,  332] PS: [ 24,  8] PE: [ 24,  9]                       delegate: unary_expr
B: [ 331,  332] PS: [ 24,  8] PE: [ 24,  9]                         delegate: fallback_expr
B: [ 331,  332] PS: [ 24,  8] PE: [ 24,  9]                           delegate: indexed_expr
B: [ 331,  332] PS: [ 24,  8] PE: [ 24,  9]                             root: primary_expr
B: [ 331,  332] PS: [ 24,  8] PE: [ 24,  9]                               literal
B: [ 331,  332] PS: [ 24,  8] PE: [ 24,  9]                                 int `5`
B: [ 333,  334] PS: [ 24, 10] PE: [ 24, 11]                     op: * `*`
B: [ 335,  336] PS: [ 24, 12] PE: [ 24, 13]                     right: unary_expr
B: [ 335,  336] PS: [ 24, 12] PE: [ 24, 13]                       delegate: fallback_expr
B: [ 335,  336] PS: [ 24, 12] PE: [ 24, 13]                         delegate: indexed_expr
B: [ 335,  336] PS: [ 24, 12] PE: [ 24, 13]                           root: primary_expr
B: [ 335,  336] PS: [ 24, 12] PE: [ 24, 13]                             literal
B: [ 335,  336] PS: [ 24, 12] PE: [ 24, 13]                               int `3`
B: [ 337,  338] PS: [ 24, 14] PE: [ 24, 15]                 op: - `-`
B: [ 339,  351] PS: [ 24, 16] PE: [ 24, 28]                 right: mult_expr
B: [ 339,  347] PS: [ 24, 16] PE: [ 24, 24]                   left: mult_expr
B: [ 339,  340] PS: [ 24, 16] PE: [ 24, 17]                     left: mult_expr
B: [ 339,  340] PS: [ 24, 16] PE: [ 24, 17]                       delegate: unary_expr
B: [ 339,  340] PS: [ 24, 16] PE: [ 24, 17]                         delegate: fallback_expr
B: [ 339,  340] PS: [ 24, 16] PE: [ 24, 17]                           delegate: indexed_expr
B: [ 339,  340] PS: [ 24, 16] PE: [ 24, 17]                             root: primary_expr
B: [ 339,  340] PS: [ 24, 16] PE: [ 24, 17]                               literal
B: [ 339,  340] PS: [ 24, 16] PE: [ 24, 17]                                 int `1`
B: [ 341,  342] PS: [ 24, 18] PE: [ 24, 19]                     op: / `/`
B: [ 343,  347] PS: [ 24, 20] PE: [ 24, 24]                     right: unary_expr
B: [ 343,  347] PS: [ 24, 20] PE: [ 24, 24]                       delegate: fallback_expr
B: [ 343,  347] PS: [ 24, 20] PE: [ 24, 24]                         delegate: indexed_expr
B: [ 343,  347] PS: [ 24, 20] PE: [ 24, 24]                           root: primary_expr
B: [ 343,  347] PS: [ 24, 20] PE: [ 24, 24]                             literal
B: [ 343,  347] PS: [ 24, 20] PE: [ 24, 24]                               float `0.01`
B: [ 348,  349] PS: [ 24, 25] PE: [ 24, 26]                   op: % `%`
B: [ 350,  351] PS: [ 24, 27] PE: [ 24, 28]                   right: unary_expr
B: [ 350,  351] PS: [ 24, 27] PE: [ 24, 28]                     delegate: fallback_expr
B: [ 350,  351] PS: [ 24, 27] PE: [ 24, 28]                       delegate: indexed_expr
B: [ 350,  351] PS: [ 24, 27] PE: [ 24, 28]                         root: primary_expr
B: [ 350,  351] PS: [ 24, 27] PE: [ 24, 28]                           literal
B: [ 350,  351] PS: [ 24, 27] PE: [ 24, 28]                             int `2`
B: [ 352,  358] PS: [ 25,  0] PE: [ 25,  6]   compound_assign
B: [ 352,  353] PS: [ 25,  0] PE: [ 25,  1]     left: var_path
B: [ 352,  353] PS: [ 25,  0] PE: [ 25,  1]       root: identifier `a`
B: [ 354,  356] PS: [ 25,  2] PE: [ 25,  4]     op: += `+=`
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]     right: expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]       delegate: ternary_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]         delegate: or_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]           delegate: and_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]             delegate: compare_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]               delegate: add_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]                 delegate: mult_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]                   delegate: unary_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]                     delegate: fallback_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]                       delegate: indexed_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]                         root: primary_expr
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]                           literal
B: [ 357,  358] PS: [ 25,  5] PE: [ 25,  6]                             int `2`
B: [ 359,  365] PS: [ 26,  0] PE: [ 26,  6]   compound_assign
B: [ 359,  360] PS: [ 26,  0] PE: [ 26,  1]     left: var_path
B: [ 359,  360] PS: [ 26,  0] PE: [ 26,  1]       root: identifier `a`
B: [ 361,  363] PS: [ 26,  2] PE: [ 26,  4]     op: -= `-=`
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]     right: expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]       delegate: ternary_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]         delegate: or_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]           delegate: and_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]             delegate: compare_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]               delegate: add_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]                 delegate: mult_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]                   delegate: unary_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]                     delegate: fallback_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]                       delegate: indexed_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]                         root: primary_expr
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]                           literal
B: [ 364,  365] PS: [ 26,  5] PE: [ 26,  6]                             int `1`
B: [ 366,  372] PS: [ 27,  0] PE: [ 27,  6]   compound_assign
B: [ 366,  367] PS: [ 27,  0] PE: [ 27,  1]     left: var_path
B: [ 366,  367] PS: [ 27,  0] PE: [ 27,  1]       root: identifier `a`
B: [ 368,  370] PS: [ 27,  2] PE: [ 27,  4]     op: *= `*=`
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]     right: expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]       delegate: ternary_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]         delegate: or_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]           delegate: and_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]             delegate: compare_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]               delegate: add_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]                 delegate: mult_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]                   delegate: unary_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]                     delegate: fallback_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]                       delegate: indexed_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]                         root: primary_expr
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]                           literal
B: [ 371,  372] PS: [ 27,  5] PE: [ 27,  6]                             int `5`
B: [ 373,  379] PS: [ 28,  0] PE: [ 28,  6]   compound_assign
B: [ 373,  374] PS: [ 28,  0] PE: [ 28,  1]     left: var_path
B: [ 373,  374] PS: [ 28,  0] PE: [ 28,  1]       root: identifier `a`
B: [ 375,  377] PS: [ 28,  2] PE: [ 28,  4]     op: /= `/=`
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]     right: expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]       delegate: ternary_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]         delegate: or_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]           delegate: and_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]             delegate: compare_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]               delegate: add_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]                 delegate: mult_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]                   delegate: unary_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]                     delegate: fallback_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]                       delegate: indexed_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]                         root: primary_expr
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]                           literal
B: [ 378,  379] PS: [ 28,  5] PE: [ 28,  6]                             int `2`
B: [ 380,  386] PS: [ 29,  0] PE: [ 29,  6]   compound_assign
B: [ 380,  381] PS: [ 29,  0] PE: [ 29,  1]     left: var_path
B: [ 380,  381] PS: [ 29,  0] PE: [ 29,  1]       root: identifier `a`
B: [ 382,  384] PS: [ 29,  2] PE: [ 29,  4]     op: %= `%=`
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]     right: expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]       delegate: ternary_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]         delegate: or_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]           delegate: and_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]             delegate: compare_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]               delegate: add_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]                 delegate: mult_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]                   delegate: unary_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]                     delegate: fallback_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]                       delegate: indexed_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]                         root: primary_expr
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]                           literal
B: [ 385,  386] PS: [ 29,  5] PE: [ 29,  6]                             int `2`
B: [ 388,  416] PS: [ 31,  0] PE: [ 31, 28]   assign
B: [ 388,  389] PS: [ 31,  0] PE: [ 31,  1]     left: var_path
B: [ 388,  389] PS: [ 31,  0] PE: [ 31,  1]       root: identifier `a`
B: [ 390,  391] PS: [ 31,  2] PE: [ 31,  3]     = `=`
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]     right: expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]       delegate: ternary_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]         delegate: or_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]           delegate: and_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]             delegate: compare_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]               delegate: add_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]                 delegate: mult_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]                   delegate: unary_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]                     delegate: fallback_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]                       delegate: indexed_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]                         root: primary_expr
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]                           literal
B: [ 392,  416] PS: [ 31,  4] PE: [ 31, 28]                             string
B: [ 392,  393] PS: [ 31,  4] PE: [ 31,  5]                               start: string_start ```
B: [ 393,  415] PS: [ 31,  5] PE: [ 31, 27]                               contents: string_contents
B: [ 393,  399] PS: [ 31,  5] PE: [ 31, 11]                                 content: string_content `hello `
B: [ 399,  415] PS: [ 31, 11] PE: [ 31, 27]                                 interpolation: interpolation
B: [ 399,  400] PS: [ 31, 11] PE: [ 31, 12]                                   { `{`
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                   expr: expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                     delegate: ternary_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                       delegate: or_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                         delegate: and_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                           delegate: compare_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                             delegate: add_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                               delegate: mult_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                                 delegate: unary_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                                   delegate: fallback_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                                     delegate: indexed_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                                       root: primary_expr
B: [ 400,  414] PS: [ 31, 12] PE: [ 31, 26]                                                         call
B: [ 400,  405] PS: [ 31, 12] PE: [ 31, 17]                                                           func: identifier `upper`
B: [ 405,  406] PS: [ 31, 17] PE: [ 31, 18]                                                           ( `(`
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                           arg: expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                             delegate: ternary_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                               delegate: or_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                 delegate: and_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                   delegate: compare_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                     delegate: add_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                       delegate: mult_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                         delegate: unary_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                           delegate: fallback_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                             delegate: indexed_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                               root: primary_expr
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                                 literal
B: [ 406,  413] PS: [ 31, 18] PE: [ 31, 25]                                                                                   string
B: [ 406,  407] PS: [ 31, 18] PE: [ 31, 19]                                                                                     start: string_start `"`
B: [ 407,  412] PS: [ 31, 19] PE: [ 31, 24]                                                                                     contents: string_contents
B: [ 407,  412] PS: [ 31, 19] PE: [ 31, 24]                                                                                       content: string_content `alice`
B: [ 412,  413] PS: [ 31, 24] PE: [ 31, 25]                                                                                     end: string_end `"`
B: [ 413,  414] PS: [ 31, 25] PE: [ 31, 26]                                                           ) `)`
B: [ 414,  415] PS: [ 31, 26] PE: [ 31, 27]                                   } `}`
B: [ 415,  416] PS: [ 31, 27] PE: [ 31, 28]                               end: string_end ```
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]   expr_stmt
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]     expr: expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]       delegate: ternary_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]         delegate: or_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]           delegate: and_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]             delegate: compare_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]               delegate: add_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]                 delegate: mult_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]                   delegate: unary_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]                     delegate: fallback_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]                       delegate: indexed_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]                         root: primary_expr
B: [ 417,  425] PS: [ 32,  0] PE: [ 32,  8]                           call
B: [ 417,  422] PS: [ 32,  0] PE: [ 32,  5]                             func: identifier `print`
B: [ 422,  423] PS: [ 32,  5] PE: [ 32,  6]                             ( `(`
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                             arg: expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                               delegate: ternary_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                 delegate: or_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                   delegate: and_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                     delegate: compare_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                       delegate: add_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                         delegate: mult_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                           delegate: unary_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                             delegate: fallback_expr
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                               delegate: var_path
B: [ 423,  424] PS: [ 32,  6] PE: [ 32,  7]                                                 root: identifier `a`
B: [ 424,  425] PS: [ 32,  7] PE: [ 32,  8]                             ) `)`
B: [ 427,  441] PS: [ 34,  0] PE: [ 34, 14]   assign
B: [ 427,  429] PS: [ 34,  0] PE: [ 34,  2]     left: var_path
B: [ 427,  429] PS: [ 34,  0] PE: [ 34,  2]       root: identifier `f1`
B: [ 430,  431] PS: [ 34,  3] PE: [ 34,  4]     = `=`
B: [ 432,  441] PS: [ 34,  5] PE: [ 34, 14]     right: json_path
B: [ 432,  438] PS: [ 34,  5] PE: [ 34, 11]       segment: json_opener
B: [ 432,  436] PS: [ 34,  5] PE: [ 34,  9]         key: json `json`
B: [ 436,  438] PS: [ 34,  9] PE: [ 34, 11]         index: json_path_indexer
B: [ 436,  437] PS: [ 34,  9] PE: [ 34, 10]           [ `[`
B: [ 437,  438] PS: [ 34, 10] PE: [ 34, 11]           ] `]`
B: [ 438,  439] PS: [ 34, 11] PE: [ 34, 12]       . `.`
B: [ 439,  441] PS: [ 34, 12] PE: [ 34, 14]       segment: json_segment
B: [ 439,  441] PS: [ 34, 12] PE: [ 34, 14]         key: identifier `id`
B: [ 442,  471] PS: [ 35,  0] PE: [ 35, 29]   assign
B: [ 442,  444] PS: [ 35,  0] PE: [ 35,  2]     left: var_path
B: [ 442,  444] PS: [ 35,  0] PE: [ 35,  2]       root: identifier `f2`
B: [ 445,  446] PS: [ 35,  3] PE: [ 35,  4]     = `=`
B: [ 447,  471] PS: [ 35,  5] PE: [ 35, 29]     right: json_path
B: [ 447,  451] PS: [ 35,  5] PE: [ 35,  9]       segment: json_opener
B: [ 447,  451] PS: [ 35,  5] PE: [ 35,  9]         key: json `json`
B: [ 451,  452] PS: [ 35,  9] PE: [ 35, 10]       . `.`
B: [ 452,  459] PS: [ 35, 10] PE: [ 35, 17]       segment: json_segment
B: [ 452,  457] PS: [ 35, 10] PE: [ 35, 15]         key: identifier `hello`
B: [ 457,  459] PS: [ 35, 15] PE: [ 35, 17]         index: json_path_indexer
B: [ 457,  458] PS: [ 35, 15] PE: [ 35, 16]           [ `[`
B: [ 458,  459] PS: [ 35, 16] PE: [ 35, 17]           ] `]`
B: [ 459,  460] PS: [ 35, 17] PE: [ 35, 18]       . `.`
B: [ 460,  464] PS: [ 35, 18] PE: [ 35, 22]       segment: json_segment
B: [ 460,  464] PS: [ 35, 18] PE: [ 35, 22]         key: identifier `blah`
B: [ 464,  465] PS: [ 35, 22] PE: [ 35, 23]       . `.`
B: [ 465,  466] PS: [ 35, 23] PE: [ 35, 24]       segment: json_segment
B: [ 465,  466] PS: [ 35, 23] PE: [ 35, 24]         key: * `*`
B: [ 466,  467] PS: [ 35, 24] PE: [ 35, 25]       . `.`
B: [ 467,  471] PS: [ 35, 25] PE: [ 35, 29]       segment: json_segment
B: [ 467,  471] PS: [ 35, 25] PE: [ 35, 29]         key: identifier `woop`
B: [ 473,  635] PS: [ 37,  0] PE: [ 49, 24]   rad_block
B: [ 473,  476] PS: [ 37,  0] PE: [ 37,  3]     rad_type: rad_keyword `rad`
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]     source: expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]       delegate: ternary_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]         delegate: or_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]           delegate: and_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]             delegate: compare_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]               delegate: add_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]                 delegate: mult_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]                   delegate: unary_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]                     delegate: fallback_expr
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]                       delegate: var_path
B: [ 477,  480] PS: [ 37,  4] PE: [ 37,  7]                         root: identifier `url`
B: [ 480,  481] PS: [ 37,  7] PE: [ 37,  8]     : `:`
B: [ 486,  499] PS: [ 38,  4] PE: [ 38, 17]     stmt: rad_field_stmt
B: [ 486,  492] PS: [ 38,  4] PE: [ 38, 10]       fields `fields`
B: [ 493,  495] PS: [ 38, 11] PE: [ 38, 13]       identifier: identifier `f1`
B: [ 495,  496] PS: [ 38, 13] PE: [ 38, 14]       , `,`
B: [ 497,  499] PS: [ 38, 15] PE: [ 38, 17]       identifier: identifier `f2`
B: [ 504,  520] PS: [ 39,  4] PE: [ 39, 20]     stmt: rad_sort_stmt
B: [ 504,  508] PS: [ 39,  4] PE: [ 39,  8]       sort `sort`
B: [ 508,  516] PS: [ 39,  8] PE: [ 39, 16]       specifier: rad_sort_specifier
B: [ 509,  511] PS: [ 39,  9] PE: [ 39, 11]         first: immediate_identifier `f1`
B: [ 512,  516] PS: [ 39, 12] PE: [ 39, 16]         second: desc `desc`
B: [ 516,  517] PS: [ 39, 16] PE: [ 39, 17]       , `,`
B: [ 517,  520] PS: [ 39, 17] PE: [ 39, 20]       specifier: rad_sort_specifier
B: [ 518,  520] PS: [ 39, 18] PE: [ 39, 20]         first: immediate_identifier `f2`
B: [ 525,  529] PS: [ 40,  4] PE: [ 40,  8]     stmt: rad_sort_stmt
B: [ 525,  529] PS: [ 40,  4] PE: [ 40,  8]       sort `sort`
B: [ 535,  564] PS: [ 42,  4] PE: [ 43, 19]     stmt: rad_if_stmt
B: [ 535,  564] PS: [ 42,  4] PE: [ 43, 19]       alt: rad_if_alt
B: [ 535,  537] PS: [ 42,  4] PE: [ 42,  6]         if `if`
B: [ 538,  543] PS: [ 42,  7] PE: [ 42, 12]         condition: expr
B: [ 538,  543] PS: [ 42,  7] PE: [ 42, 12]           delegate: ternary_expr
B: [ 538,  543] PS: [ 42,  7] PE: [ 42, 12]             delegate: or_expr
B: [ 538,  543] PS: [ 42,  7] PE: [ 42, 12]               delegate: and_expr
B: [ 538,  543] PS: [ 42,  7] PE: [ 42, 12]                 delegate: compare_expr
B: [ 538,  539] PS: [ 42,  7] PE: [ 42,  8]                   left: compare_expr
B: [ 538,  539] PS: [ 42,  7] PE: [ 42,  8]                     delegate: add_expr
B: [ 538,  539] PS: [ 42,  7] PE: [ 42,  8]                       delegate: mult_expr
B: [ 538,  539] PS: [ 42,  7] PE: [ 42,  8]                         delegate: unary_expr
B: [ 538,  539] PS: [ 42,  7] PE: [ 42,  8]                           delegate: fallback_expr
B: [ 538,  539] PS: [ 42,  7] PE: [ 42,  8]                             delegate: var_path
B: [ 538,  539] PS: [ 42,  7] PE: [ 42,  8]                               root: identifier `a`
B: [ 540,  541] PS: [ 42,  9] PE: [ 42, 10]                   op: > `>`
B: [ 542,  543] PS: [ 42, 11] PE: [ 42, 12]                   right: add_expr
B: [ 542,  543] PS: [ 42, 11] PE: [ 42, 12]                     delegate: mult_expr
B: [ 542,  543] PS: [ 42, 11] PE: [ 42, 12]                       delegate: unary_expr
B: [ 542,  543] PS: [ 42, 11] PE: [ 42, 12]                         delegate: fallback_expr
B: [ 542,  543] PS: [ 42, 11] PE: [ 42, 12]                           delegate: var_path
B: [ 542,  543] PS: [ 42, 11] PE: [ 42, 12]                             root: identifier `b`
B: [ 543,  544] PS: [ 42, 12] PE: [ 42, 13]         : `:`
B: [ 553,  564] PS: [ 43,  8] PE: [ 43, 19]         stmt: rad_sort_stmt
B: [ 553,  557] PS: [ 43,  8] PE: [ 43, 12]           sort `sort`
B: [ 557,  560] PS: [ 43, 12] PE: [ 43, 15]           specifier: rad_sort_specifier
B: [ 558,  560] PS: [ 43, 13] PE: [ 43, 15]             first: immediate_identifier `f2`
B: [ 560,  561] PS: [ 43, 15] PE: [ 43, 16]           , `,`
B: [ 561,  564] PS: [ 43, 16] PE: [ 43, 19]           specifier: rad_sort_specifier
B: [ 562,  564] PS: [ 43, 17] PE: [ 43, 19]             first: immediate_identifier `f1`
B: [ 570,  597] PS: [ 45,  4] PE: [ 46, 23]     stmt: rad_field_modifier_stmt
B: [ 570,  572] PS: [ 45,  4] PE: [ 45,  6]       identifier: identifier `f1`
B: [ 572,  573] PS: [ 45,  6] PE: [ 45,  7]       : `:`
B: [ 582,  597] PS: [ 46,  8] PE: [ 46, 23]       mod_stmt: rad_field_mod_map
B: [ 582,  585] PS: [ 46,  8] PE: [ 46, 11]         map `map`
B: [ 586,  597] PS: [ 46, 12] PE: [ 46, 23]         lambda: fn_lambda
B: [ 586,  588] PS: [ 46, 12] PE: [ 46, 14]           keyword: fn `fn`
B: [ 588,  589] PS: [ 46, 14] PE: [ 46, 15]           ( `(`
B: [ 589,  590] PS: [ 46, 15] PE: [ 46, 16]           normal_param: normal_param
B: [ 589,  590] PS: [ 46, 15] PE: [ 46, 16]             name: identifier `a`
B: [ 590,  591] PS: [ 46, 16] PE: [ 46, 17]           ) `)`
B: [ 592,  597] PS: [ 46, 18] PE: [ 46, 23]           stmt: expr
B: [ 592,  597] PS: [ 46, 18] PE: [ 46, 23]             delegate: ternary_expr
B: [ 592,  597] PS: [ 46, 18] PE: [ 46, 23]               delegate: or_expr
B: [ 592,  597] PS: [ 46, 18] PE: [ 46, 23]                 delegate: and_expr
B: [ 592,  597] PS: [ 46, 18] PE: [ 46, 23]                   delegate: compare_expr
B: [ 592,  597] PS: [ 46, 18] PE: [ 46, 23]                     delegate: add_expr
B: [ 592,  597] PS: [ 46, 18] PE: [ 46, 23]                       delegate: mult_expr
B: [ 592,  593] PS: [ 46, 18] PE: [ 46, 19]                         left: mult_expr
B: [ 592,  593] PS: [ 46, 18] PE: [ 46, 19]                           delegate: unary_expr
B: [ 592,  593] PS: [ 46, 18] PE: [ 46, 19]                             delegate: fallback_expr
B: [ 592,  593] PS: [ 46, 18] PE: [ 46, 19]                               delegate: var_path
B: [ 592,  593] PS: [ 46, 18] PE: [ 46, 19]                                 root: identifier `a`
B: [ 594,  595] PS: [ 46, 20] PE: [ 46, 21]                         op: * `*`
B: [ 596,  597] PS: [ 46, 22] PE: [ 46, 23]                         right: unary_expr
B: [ 596,  597] PS: [ 46, 22] PE: [ 46, 23]                           delegate: fallback_expr
B: [ 596,  597] PS: [ 46, 22] PE: [ 46, 23]                             delegate: indexed_expr
B: [ 596,  597] PS: [ 46, 22] PE: [ 46, 23]                               root: primary_expr
B: [ 596,  597] PS: [ 46, 22] PE: [ 46, 23]                                 literal
B: [ 596,  597] PS: [ 46, 22] PE: [ 46, 23]                                   int `2`
B: [ 603,  635] PS: [ 48,  4] PE: [ 49, 24]     stmt: rad_field_modifier_stmt
B: [ 603,  605] PS: [ 48,  4] PE: [ 48,  6]       identifier: identifier `f1`
B: [ 605,  606] PS: [ 48,  6] PE: [ 48,  7]       , `,`
B: [ 607,  609] PS: [ 48,  8] PE: [ 48, 10]       identifier: identifier `f2`
B: [ 609,  610] PS: [ 48, 10] PE: [ 48, 11]       : `:`
B: [ 619,  635] PS: [ 49,  8] PE: [ 49, 24]       mod_stmt: rad_field_mod_color
B: [ 619,  624] PS: [ 49,  8] PE: [ 49, 13]         color `color`
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]         color: expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]           delegate: ternary_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]             delegate: or_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]               delegate: and_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                 delegate: compare_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                   delegate: add_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                     delegate: mult_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                       delegate: unary_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                         delegate: fallback_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                           delegate: indexed_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                             root: primary_expr
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                               literal
B: [ 625,  630] PS: [ 49, 14] PE: [ 49, 19]                                 string
B: [ 625,  626] PS: [ 49, 14] PE: [ 49, 15]                                   start: string_start `"`
B: [ 626,  629] PS: [ 49, 15] PE: [ 49, 18]                                   contents: string_contents
B: [ 626,  629] PS: [ 49, 15] PE: [ 49, 18]                                     content: string_content `red`
B: [ 629,  630] PS: [ 49, 18] PE: [ 49, 19]                                   end: string_end `"`
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]         regex: expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]           delegate: ternary_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]             delegate: or_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]               delegate: and_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                 delegate: compare_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                   delegate: add_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                     delegate: mult_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                       delegate: unary_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                         delegate: fallback_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                           delegate: indexed_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                             root: primary_expr
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                               literal
B: [ 631,  635] PS: [ 49, 20] PE: [ 49, 24]                                 string
B: [ 631,  632] PS: [ 49, 20] PE: [ 49, 21]                                   start: string_start `"`
B: [ 632,  634] PS: [ 49, 21] PE: [ 49, 23]                                   contents: string_contents
B: [ 632,  634] PS: [ 49, 21] PE: [ 49, 23]                                     content: string_content `.*`
B: [ 634,  635] PS: [ 49, 23] PE: [ 49, 24]                                   end: string_end `"`
B: [ 637,  749] PS: [ 51,  0] PE: [ 57, 21]   if_stmt
B: [ 637,  749] PS: [ 51,  0] PE: [ 57, 21]     alt: if_alt
B: [ 637,  639] PS: [ 51,  0] PE: [ 51,  2]       if `if`
B: [ 640,  647] PS: [ 51,  3] PE: [ 51, 10]       condition: expr
B: [ 640,  647] PS: [ 51,  3] PE: [ 51, 10]         delegate: ternary_expr
B: [ 640,  647] PS: [ 51,  3] PE: [ 51, 10]           delegate: or_expr
B: [ 640,  647] PS: [ 51,  3] PE: [ 51, 10]             delegate: and_expr
B: [ 640,  647] PS: [ 51,  3] PE: [ 51, 10]               delegate: compare_expr
B: [ 640,  643] PS: [ 51,  3] PE: [ 51,  6]                 left: compare_expr
B: [ 640,  643] PS: [ 51,  3] PE: [ 51,  6]                   delegate: add_expr
B: [ 640,  643] PS: [ 51,  3] PE: [ 51,  6]                     delegate: mult_expr
B: [ 640,  643] PS: [ 51,  3] PE: [ 51,  6]                       delegate: unary_expr
B: [ 640,  643] PS: [ 51,  3] PE: [ 51,  6]                         delegate: fallback_expr
B: [ 640,  643] PS: [ 51,  3] PE: [ 51,  6]                           delegate: var_path
B: [ 640,  643] PS: [ 51,  3] PE: [ 51,  6]                             root: identifier `bah`
B: [ 644,  645] PS: [ 51,  7] PE: [ 51,  8]                 op: > `>`
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                 right: add_expr
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                   delegate: mult_expr
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                     delegate: unary_expr
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                       delegate: fallback_expr
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                         delegate: indexed_expr
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                           root: primary_expr
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                             literal
B: [ 646,  647] PS: [ 51,  9] PE: [ 51, 10]                               int `5`
B: [ 647,  648] PS: [ 51, 10] PE: [ 51, 11]       : `:`
B: [ 653,  666] PS: [ 52,  4] PE: [ 52, 17]       stmt: assign
B: [ 653,  658] PS: [ 52,  4] PE: [ 52,  9]         left: var_path
B: [ 653,  658] PS: [ 52,  4] PE: [ 52,  9]           root: identifier `hello`
B: [ 659,  660] PS: [ 52, 10] PE: [ 52, 11]         = `=`
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]         right: expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]           delegate: ternary_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]             delegate: or_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]               delegate: and_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]                 delegate: compare_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]                   delegate: add_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]                     delegate: mult_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]                       delegate: unary_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]                         delegate: fallback_expr
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]                           delegate: var_path
B: [ 661,  666] PS: [ 52, 12] PE: [ 52, 17]                             root: identifier `bloop`
B: [ 672,  749] PS: [ 54,  4] PE: [ 57, 21]       stmt: if_stmt
B: [ 672,  704] PS: [ 54,  4] PE: [ 55, 18]         alt: if_alt
B: [ 672,  674] PS: [ 54,  4] PE: [ 54,  6]           if `if`
B: [ 675,  684] PS: [ 54,  7] PE: [ 54, 16]           condition: expr
B: [ 675,  684] PS: [ 54,  7] PE: [ 54, 16]             delegate: ternary_expr
B: [ 675,  684] PS: [ 54,  7] PE: [ 54, 16]               delegate: or_expr
B: [ 675,  684] PS: [ 54,  7] PE: [ 54, 16]                 delegate: and_expr
B: [ 675,  684] PS: [ 54,  7] PE: [ 54, 16]                   delegate: compare_expr
B: [ 675,  679] PS: [ 54,  7] PE: [ 54, 11]                     left: compare_expr
B: [ 675,  679] PS: [ 54,  7] PE: [ 54, 11]                       delegate: add_expr
B: [ 675,  679] PS: [ 54,  7] PE: [ 54, 11]                         delegate: mult_expr
B: [ 675,  679] PS: [ 54,  7] PE: [ 54, 11]                           delegate: unary_expr
B: [ 675,  679] PS: [ 54,  7] PE: [ 54, 11]                             delegate: fallback_expr
B: [ 675,  679] PS: [ 54,  7] PE: [ 54, 11]                               delegate: var_path
B: [ 675,  679] PS: [ 54,  7] PE: [ 54, 11]                                 root: identifier `blah`
B: [ 680,  682] PS: [ 54, 12] PE: [ 54, 14]                     op: == `==`
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                     right: add_expr
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                       delegate: mult_expr
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                         delegate: unary_expr
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                           delegate: fallback_expr
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                             delegate: indexed_expr
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                               root: primary_expr
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                                 literal
B: [ 683,  684] PS: [ 54, 15] PE: [ 54, 16]                                   int `2`
B: [ 684,  685] PS: [ 54, 16] PE: [ 54, 17]           : `:`
B: [ 694,  704] PS: [ 55,  8] PE: [ 55, 18]           stmt: compound_assign
B: [ 694,  699] PS: [ 55,  8] PE: [ 55, 13]             left: var_path
B: [ 694,  699] PS: [ 55,  8] PE: [ 55, 13]               root: identifier `yoink`
B: [ 700,  702] PS: [ 55, 14] PE: [ 55, 16]             op: += `+=`
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]             right: expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]               delegate: ternary_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                 delegate: or_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                   delegate: and_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                     delegate: compare_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                       delegate: add_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                         delegate: mult_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                           delegate: unary_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                             delegate: fallback_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                               delegate: indexed_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                                 root: primary_expr
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                                   literal
B: [ 703,  704] PS: [ 55, 17] PE: [ 55, 18]                                     int `2`
B: [ 709,  713] PS: [ 56,  4] PE: [ 56,  8]         else `else`
B: [ 714,  749] PS: [ 56,  9] PE: [ 57, 21]         alt: if_alt
B: [ 714,  716] PS: [ 56,  9] PE: [ 56, 11]           if `if`
B: [ 717,  726] PS: [ 56, 12] PE: [ 56, 21]           condition: expr
B: [ 717,  726] PS: [ 56, 12] PE: [ 56, 21]             delegate: ternary_expr
B: [ 717,  726] PS: [ 56, 12] PE: [ 56, 21]               delegate: or_expr
B: [ 717,  726] PS: [ 56, 12] PE: [ 56, 21]                 delegate: and_expr
B: [ 717,  726] PS: [ 56, 12] PE: [ 56, 21]                   delegate: compare_expr
B: [ 717,  721] PS: [ 56, 12] PE: [ 56, 16]                     left: compare_expr
B: [ 717,  721] PS: [ 56, 12] PE: [ 56, 16]                       delegate: add_expr
B: [ 717,  721] PS: [ 56, 12] PE: [ 56, 16]                         delegate: mult_expr
B: [ 717,  721] PS: [ 56, 12] PE: [ 56, 16]                           delegate: unary_expr
B: [ 717,  721] PS: [ 56, 12] PE: [ 56, 16]                             delegate: fallback_expr
B: [ 717,  721] PS: [ 56, 12] PE: [ 56, 16]                               delegate: var_path
B: [ 717,  721] PS: [ 56, 12] PE: [ 56, 16]                                 root: identifier `blah`
B: [ 722,  724] PS: [ 56, 17] PE: [ 56, 19]                     op: == `==`
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                     right: add_expr
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                       delegate: mult_expr
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                         delegate: unary_expr
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                           delegate: fallback_expr
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                             delegate: indexed_expr
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                               root: primary_expr
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                                 literal
B: [ 725,  726] PS: [ 56, 20] PE: [ 56, 21]                                   int `3`
B: [ 726,  727] PS: [ 56, 21] PE: [ 56, 22]           : `:`
B: [ 736,  749] PS: [ 57,  8] PE: [ 57, 21]           stmt: assign
B: [ 736,  740] PS: [ 57,  8] PE: [ 57, 12]             left: var_path
B: [ 736,  740] PS: [ 57,  8] PE: [ 57, 12]               root: identifier `boom`
B: [ 741,  742] PS: [ 57, 13] PE: [ 57, 14]             = `=`
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]             right: expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]               delegate: ternary_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                 delegate: or_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                   delegate: and_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                     delegate: compare_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                       delegate: add_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                         delegate: mult_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                           delegate: unary_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                             delegate: fallback_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                               delegate: indexed_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                                 root: primary_expr
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                                   literal
B: [ 743,  749] PS: [ 57, 15] PE: [ 57, 21]                                     string
B: [ 743,  744] PS: [ 57, 15] PE: [ 57, 16]                                       start: string_start `"`
B: [ 744,  748] PS: [ 57, 16] PE: [ 57, 20]                                       contents: string_contents
B: [ 744,  748] PS: [ 57, 16] PE: [ 57, 20]                                         content: string_content `haha`
B: [ 748,  749] PS: [ 57, 20] PE: [ 57, 21]                                       end: string_end `"`
B: [ 751,  777] PS: [ 59,  0] PE: [ 60, 13]   rad_block
B: [ 751,  758] PS: [ 59,  0] PE: [ 59,  7]     rad_type: request_keyword `request`
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]     source: expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]       delegate: ternary_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]         delegate: or_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]           delegate: and_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]             delegate: compare_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]               delegate: add_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]                 delegate: mult_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]                   delegate: unary_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]                     delegate: fallback_expr
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]                       delegate: var_path
B: [ 759,  762] PS: [ 59,  8] PE: [ 59, 11]                         root: identifier `url`
B: [ 762,  763] PS: [ 59, 11] PE: [ 59, 12]     : `:`
B: [ 768,  777] PS: [ 60,  4] PE: [ 60, 13]     stmt: rad_field_stmt
B: [ 768,  774] PS: [ 60,  4] PE: [ 60, 10]       fields `fields`
B: [ 775,  777] PS: [ 60, 11] PE: [ 60, 13]       identifier: identifier `f1`
B: [ 779,  809] PS: [ 62,  0] PE: [ 63, 21]   rad_block
B: [ 779,  786] PS: [ 62,  0] PE: [ 62,  7]     rad_type: display_keyword `display`
B: [ 786,  787] PS: [ 62,  7] PE: [ 62,  8]     : `:`
B: [ 792,  809] PS: [ 63,  4] PE: [ 63, 21]     stmt: rad_field_stmt
B: [ 792,  798] PS: [ 63,  4] PE: [ 63, 10]       fields `fields`
B: [ 799,  801] PS: [ 63, 11] PE: [ 63, 13]       identifier: identifier `f2`
B: [ 801,  802] PS: [ 63, 13] PE: [ 63, 14]       , `,`
B: [ 803,  805] PS: [ 63, 15] PE: [ 63, 17]       identifier: identifier `f1`
B: [ 805,  806] PS: [ 63, 17] PE: [ 63, 18]       , `,`
B: [ 807,  809] PS: [ 63, 19] PE: [ 63, 21]       identifier: identifier `f3`
B: [ 811,  862] PS: [ 65,  0] PE: [ 65, 51]   assign
B: [ 811,  815] PS: [ 65,  0] PE: [ 65,  4]     left: var_path
B: [ 811,  815] PS: [ 65,  0] PE: [ 65,  4]       root: identifier `area`
B: [ 816,  817] PS: [ 65,  5] PE: [ 65,  6]     = `=`
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]     right: expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]       delegate: ternary_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]         delegate: or_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]           delegate: and_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]             delegate: compare_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]               delegate: add_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]                 delegate: mult_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]                   delegate: unary_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]                     delegate: fallback_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]                       delegate: indexed_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]                         root: primary_expr
B: [ 818,  862] PS: [ 65,  7] PE: [ 65, 51]                           list_comprehension
B: [ 818,  819] PS: [ 65,  7] PE: [ 65,  8]                             [ `[`
B: [ 819,  839] PS: [ 65,  8] PE: [ 65, 28]                             expr: expr
B: [ 819,  839] PS: [ 65,  8] PE: [ 65, 28]                               delegate: ternary_expr
B: [ 819,  839] PS: [ 65,  8] PE: [ 65, 28]                                 delegate: or_expr
B: [ 819,  839] PS: [ 65,  8] PE: [ 65, 28]                                   delegate: and_expr
B: [ 819,  839] PS: [ 65,  8] PE: [ 65, 28]                                     delegate: compare_expr
B: [ 819,  839] PS: [ 65,  8] PE: [ 65, 28]                                       delegate: add_expr
B: [ 819,  839] PS: [ 65,  8] PE: [ 65, 28]                                         delegate: mult_expr
B: [ 819,  827] PS: [ 65,  8] PE: [ 65, 16]                                           left: mult_expr
B: [ 819,  827] PS: [ 65,  8] PE: [ 65, 16]                                             delegate: unary_expr
B: [ 819,  827] PS: [ 65,  8] PE: [ 65, 16]                                               delegate: fallback_expr
B: [ 819,  827] PS: [ 65,  8] PE: [ 65, 16]                                                 delegate: var_path
B: [ 819,  824] PS: [ 65,  8] PE: [ 65, 13]                                                   root: identifier `width`
B: [ 824,  825] PS: [ 65, 13] PE: [ 65, 14]                                                   [ `[`
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                   indexing: expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                     delegate: ternary_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                       delegate: or_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                         delegate: and_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                           delegate: compare_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                             delegate: add_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                               delegate: mult_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                                 delegate: unary_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                                   delegate: fallback_expr
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                                     delegate: var_path
B: [ 825,  826] PS: [ 65, 14] PE: [ 65, 15]                                                                       root: identifier `i`
B: [ 826,  827] PS: [ 65, 15] PE: [ 65, 16]                                                   ] `]`
B: [ 828,  829] PS: [ 65, 17] PE: [ 65, 18]                                           op: * `*`
B: [ 830,  839] PS: [ 65, 19] PE: [ 65, 28]                                           right: unary_expr
B: [ 830,  839] PS: [ 65, 19] PE: [ 65, 28]                                             delegate: fallback_expr
B: [ 830,  839] PS: [ 65, 19] PE: [ 65, 28]                                               delegate: var_path
B: [ 830,  836] PS: [ 65, 19] PE: [ 65, 25]                                                 root: identifier `height`
B: [ 836,  837] PS: [ 65, 25] PE: [ 65, 26]                                                 [ `[`
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                 indexing: expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                   delegate: ternary_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                     delegate: or_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                       delegate: and_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                         delegate: compare_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                           delegate: add_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                             delegate: mult_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                               delegate: unary_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                                 delegate: fallback_expr
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                                   delegate: var_path
B: [ 837,  838] PS: [ 65, 26] PE: [ 65, 27]                                                                     root: identifier `i`
B: [ 838,  839] PS: [ 65, 27] PE: [ 65, 28]                                                 ] `]`
B: [ 840,  843] PS: [ 65, 29] PE: [ 65, 32]                             for `for`
B: [ 844,  845] PS: [ 65, 33] PE: [ 65, 34]                             lefts: for_lefts
B: [ 844,  845] PS: [ 65, 33] PE: [ 65, 34]                               left: identifier `i`
B: [ 846,  848] PS: [ 65, 35] PE: [ 65, 37]                             in `in`
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                             right: expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                               delegate: ternary_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                 delegate: or_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                   delegate: and_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                     delegate: compare_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                       delegate: add_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                         delegate: mult_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                           delegate: unary_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                             delegate: fallback_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                               delegate: indexed_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                                 root: primary_expr
B: [ 849,  861] PS: [ 65, 38] PE: [ 65, 50]                                                   call
B: [ 849,  854] PS: [ 65, 38] PE: [ 65, 43]                                                     func: identifier `range`
B: [ 854,  855] PS: [ 65, 43] PE: [ 65, 44]                                                     ( `(`
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                     arg: expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                       delegate: ternary_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                         delegate: or_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                           delegate: and_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                             delegate: compare_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                               delegate: add_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                                 delegate: mult_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                                   delegate: unary_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                                     delegate: fallback_expr
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                                       delegate: var_path
B: [ 855,  860] PS: [ 65, 44] PE: [ 65, 49]                                                                         root: identifier `width`
B: [ 860,  861] PS: [ 65, 49] PE: [ 65, 50]                                                     ) `)`
B: [ 861,  862] PS: [ 65, 50] PE: [ 65, 51]                             ] `]`
B: [ 864,  883] PS: [ 67,  0] PE: [ 67, 19]   assign
B: [ 864,  871] PS: [ 67,  0] PE: [ 67,  7]     left: var_path
B: [ 864,  871] PS: [ 67,  0] PE: [ 67,  7]       root: identifier `numbers`
B: [ 872,  873] PS: [ 67,  8] PE: [ 67,  9]     = `=`
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]     right: expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]       delegate: ternary_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]         delegate: or_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]           delegate: and_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]             delegate: compare_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]               delegate: add_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]                 delegate: mult_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]                   delegate: unary_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]                     delegate: fallback_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]                       delegate: indexed_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]                         root: primary_expr
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]                           literal
B: [ 874,  883] PS: [ 67, 10] PE: [ 67, 19]                             list
B: [ 874,  875] PS: [ 67, 10] PE: [ 67, 11]                               [ `[`
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                               list_entry: expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                 delegate: ternary_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                   delegate: or_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                     delegate: and_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                       delegate: compare_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                         delegate: add_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                           delegate: mult_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                             delegate: unary_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                               delegate: fallback_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                                 delegate: indexed_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                                   root: primary_expr
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                                     literal
B: [ 875,  876] PS: [ 67, 11] PE: [ 67, 12]                                                       int `1`
B: [ 876,  877] PS: [ 67, 12] PE: [ 67, 13]                               , `,`
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                               list_entry: expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                 delegate: ternary_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                   delegate: or_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                     delegate: and_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                       delegate: compare_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                         delegate: add_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                           delegate: mult_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                             delegate: unary_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                               delegate: fallback_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                                 delegate: indexed_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                                   root: primary_expr
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                                     literal
B: [ 878,  879] PS: [ 67, 14] PE: [ 67, 15]                                                       int `2`
B: [ 879,  880] PS: [ 67, 15] PE: [ 67, 16]                               , `,`
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                               list_entry: expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                 delegate: ternary_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                   delegate: or_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                     delegate: and_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                       delegate: compare_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                         delegate: add_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                           delegate: mult_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                             delegate: unary_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                               delegate: fallback_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                                 delegate: indexed_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                                   root: primary_expr
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                                     literal
B: [ 881,  882] PS: [ 67, 17] PE: [ 67, 18]                                                       int `3`
B: [ 882,  883] PS: [ 67, 18] PE: [ 67, 19]                               ] `]`
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]   expr_stmt
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]     expr: expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]       delegate: ternary_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]         delegate: or_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]           delegate: and_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]             delegate: compare_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]               delegate: add_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]                 delegate: mult_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]                   delegate: unary_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]                     delegate: fallback_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]                       delegate: indexed_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]                         root: primary_expr
B: [ 884,  912] PS: [ 68,  0] PE: [ 68, 28]                           call
B: [ 884,  889] PS: [ 68,  0] PE: [ 68,  5]                             func: identifier `print`
B: [ 889,  890] PS: [ 68,  5] PE: [ 68,  6]                             ( `(`
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                             arg: expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                               delegate: ternary_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                 delegate: or_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                   delegate: and_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                     delegate: compare_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                       delegate: add_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                         delegate: mult_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                           delegate: unary_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                             delegate: fallback_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                               delegate: indexed_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                                 root: primary_expr
B: [ 890,  911] PS: [ 68,  6] PE: [ 68, 27]                                                   call
B: [ 890,  894] PS: [ 68,  6] PE: [ 68, 10]                                                     func: identifier `join`
B: [ 894,  895] PS: [ 68, 10] PE: [ 68, 11]                                                     ( `(`
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                     arg: expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                       delegate: ternary_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                         delegate: or_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                           delegate: and_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                             delegate: compare_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                               delegate: add_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                                 delegate: mult_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                                   delegate: unary_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                                     delegate: fallback_expr
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                                       delegate: var_path
B: [ 895,  902] PS: [ 68, 11] PE: [ 68, 18]                                                                         root: identifier `numbers`
B: [ 902,  903] PS: [ 68, 18] PE: [ 68, 19]                                                     , `,`
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                     arg: expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                       delegate: ternary_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                         delegate: or_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                           delegate: and_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                             delegate: compare_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                               delegate: add_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                                 delegate: mult_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                                   delegate: unary_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                                     delegate: fallback_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                                       delegate: indexed_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                                         root: primary_expr
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                                           literal
B: [ 904,  910] PS: [ 68, 20] PE: [ 68, 26]                                                                             string
B: [ 904,  905] PS: [ 68, 20] PE: [ 68, 21]                                                                               start: string_start `"`
B: [ 905,  909] PS: [ 68, 21] PE: [ 68, 25]                                                                               contents: string_contents
B: [ 905,  909] PS: [ 68, 21] PE: [ 68, 25]                                                                                 content: string_content `... `
B: [ 909,  910] PS: [ 68, 25] PE: [ 68, 26]                                                                               end: string_end `"`
B: [ 910,  911] PS: [ 68, 26] PE: [ 68, 27]                                                     ) `)`
B: [ 911,  912] PS: [ 68, 27] PE: [ 68, 28]                             ) `)`
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]   expr_stmt
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]     expr: expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]       delegate: ternary_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]         delegate: or_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]           delegate: and_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]             delegate: compare_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]               delegate: add_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]                 delegate: mult_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]                   delegate: unary_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]                     delegate: fallback_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]                       delegate: indexed_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]                         root: primary_expr
B: [ 913,  962] PS: [ 69,  0] PE: [ 69, 49]                           call
B: [ 913,  918] PS: [ 69,  0] PE: [ 69,  5]                             func: identifier `print`
B: [ 918,  919] PS: [ 69,  5] PE: [ 69,  6]                             ( `(`
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                             arg: expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                               delegate: ternary_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                 delegate: or_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                   delegate: and_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                     delegate: compare_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                       delegate: add_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                         delegate: mult_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                           delegate: unary_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                             delegate: fallback_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                               delegate: indexed_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                                 root: primary_expr
B: [ 919,  961] PS: [ 69,  6] PE: [ 69, 48]                                                   call
B: [ 919,  923] PS: [ 69,  6] PE: [ 69, 10]                                                     func: identifier `join`
B: [ 923,  924] PS: [ 69, 10] PE: [ 69, 11]                                                     ( `(`
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                     arg: expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                       delegate: ternary_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                         delegate: or_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                           delegate: and_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                             delegate: compare_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                               delegate: add_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                                 delegate: mult_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                                   delegate: unary_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                                     delegate: fallback_expr
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                                       delegate: var_path
B: [ 924,  931] PS: [ 69, 11] PE: [ 69, 18]                                                                         root: identifier `numbers`
B: [ 931,  932] PS: [ 69, 18] PE: [ 69, 19]                                                     , `,`
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                     arg: expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                       delegate: ternary_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                         delegate: or_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                           delegate: and_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                             delegate: compare_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                               delegate: add_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                                 delegate: mult_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                                   delegate: unary_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                                     delegate: fallback_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                                       delegate: indexed_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                                         root: primary_expr
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                                           literal
B: [ 933,  939] PS: [ 69, 20] PE: [ 69, 26]                                                                             string
B: [ 933,  934] PS: [ 69, 20] PE: [ 69, 21]                                                                               start: string_start `"`
B: [ 934,  938] PS: [ 69, 21] PE: [ 69, 25]                                                                               contents: string_contents
B: [ 934,  938] PS: [ 69, 21] PE: [ 69, 25]                                                                                 content: string_content `... `
B: [ 938,  939] PS: [ 69, 25] PE: [ 69, 26]                                                                               end: string_end `"`
B: [ 939,  940] PS: [ 69, 26] PE: [ 69, 27]                                                     , `,`
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                     arg: expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                       delegate: ternary_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                         delegate: or_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                           delegate: and_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                             delegate: compare_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                               delegate: add_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                                 delegate: mult_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                                   delegate: unary_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                                     delegate: fallback_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                                       delegate: indexed_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                                         root: primary_expr
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                                           literal
B: [ 941,  960] PS: [ 69, 28] PE: [ 69, 47]                                                                             string
B: [ 941,  942] PS: [ 69, 28] PE: [ 69, 29]                                                                               start: string_start `"`
B: [ 942,  959] PS: [ 69, 29] PE: [ 69, 46]                                                                               contents: string_contents
B: [ 942,  959] PS: [ 69, 29] PE: [ 69, 46]                                                                                 content: string_content `Okay I'll count. `
B: [ 959,  960] PS: [ 69, 46] PE: [ 69, 47]                                                                               end: string_end `"`
B: [ 960,  961] PS: [ 69, 47] PE: [ 69, 48]                                                     ) `)`
B: [ 961,  962] PS: [ 69, 48] PE: [ 69, 49]                             ) `)`
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]   expr_stmt
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]     expr: expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]       delegate: ternary_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]         delegate: or_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]           delegate: and_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]             delegate: compare_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]               delegate: add_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]                 delegate: mult_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]                   delegate: unary_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]                     delegate: fallback_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]                       delegate: indexed_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]                         root: primary_expr
B: [ 963, 1017] PS: [ 70,  0] PE: [ 70, 54]                           call
B: [ 963,  968] PS: [ 70,  0] PE: [ 70,  5]                             func: identifier `print`
B: [ 968,  969] PS: [ 70,  5] PE: [ 70,  6]                             ( `(`
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                             arg: expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                               delegate: ternary_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                 delegate: or_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                   delegate: and_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                     delegate: compare_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                       delegate: add_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                         delegate: mult_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                           delegate: unary_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                             delegate: fallback_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                               delegate: indexed_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                                 root: primary_expr
B: [ 969, 1016] PS: [ 70,  6] PE: [ 70, 53]                                                   call
B: [ 969,  973] PS: [ 70,  6] PE: [ 70, 10]                                                     func: identifier `join`
B: [ 973,  974] PS: [ 70, 10] PE: [ 70, 11]                                                     ( `(`
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                     arg: expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                       delegate: ternary_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                         delegate: or_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                           delegate: and_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                             delegate: compare_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                               delegate: add_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                                 delegate: mult_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                                   delegate: unary_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                                     delegate: fallback_expr
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                                       delegate: var_path
B: [ 974,  981] PS: [ 70, 11] PE: [ 70, 18]                                                                         root: identifier `numbers`
B: [ 981,  982] PS: [ 70, 18] PE: [ 70, 19]                                                     , `,`
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                     arg: expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                       delegate: ternary_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                         delegate: or_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                           delegate: and_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                             delegate: compare_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                               delegate: add_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                                 delegate: mult_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                                   delegate: unary_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                                     delegate: fallback_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                                       delegate: indexed_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                                         root: primary_expr
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                                           literal
B: [ 983,  989] PS: [ 70, 20] PE: [ 70, 26]                                                                             string
B: [ 983,  984] PS: [ 70, 20] PE: [ 70, 21]                                                                               start: string_start `"`
B: [ 984,  988] PS: [ 70, 21] PE: [ 70, 25]                                                                               contents: string_contents
B: [ 984,  988] PS: [ 70, 21] PE: [ 70, 25]                                                                                 content: string_content `... `
B: [ 988,  989] PS: [ 70, 25] PE: [ 70, 26]                                                                               end: string_end `"`
B: [ 989,  990] PS: [ 70, 26] PE: [ 70, 27]                                                     , `,`
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                     arg: expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                       delegate: ternary_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                         delegate: or_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                           delegate: and_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                             delegate: compare_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                               delegate: add_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                                 delegate: mult_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                                   delegate: unary_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                                     delegate: fallback_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                                       delegate: indexed_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                                         root: primary_expr
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                                           literal
B: [ 991, 1010] PS: [ 70, 28] PE: [ 70, 47]                                                                             string
B: [ 991,  992] PS: [ 70, 28] PE: [ 70, 29]                                                                               start: string_start `"`
B: [ 992, 1009] PS: [ 70, 29] PE: [ 70, 46]                                                                               contents: string_contents
B: [ 992, 1009] PS: [ 70, 29] PE: [ 70, 46]                                                                                 content: string_content `Okay I'll count. `
B: [1009, 1010] PS: [ 70, 46] PE: [ 70, 47]                                                                               end: string_end `"`
B: [1010, 1011] PS: [ 70, 47] PE: [ 70, 48]                                                     , `,`
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                     arg: expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                       delegate: ternary_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                         delegate: or_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                           delegate: and_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                             delegate: compare_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                               delegate: add_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                                 delegate: mult_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                                   delegate: unary_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                                     delegate: fallback_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                                       delegate: indexed_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                                         root: primary_expr
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                                           literal
B: [1012, 1015] PS: [ 70, 49] PE: [ 70, 52]                                                                             string
B: [1012, 1013] PS: [ 70, 49] PE: [ 70, 50]                                                                               start: string_start `"`
B: [1013, 1014] PS: [ 70, 50] PE: [ 70, 51]                                                                               contents: string_contents
B: [1013, 1014] PS: [ 70, 50] PE: [ 70, 51]                                                                                 content: string_content `!`
B: [1014, 1015] PS: [ 70, 51] PE: [ 70, 52]                                                                               end: string_end `"`
B: [1015, 1016] PS: [ 70, 52] PE: [ 70, 53]                                                     ) `)`
B: [1016, 1017] PS: [ 70, 53] PE: [ 70, 54]                             ) `)`
B: [1019, 1030] PS: [ 72,  0] PE: [ 72, 11]   assign
B: [1019, 1020] PS: [ 72,  0] PE: [ 72,  1]     left: var_path
B: [1019, 1020] PS: [ 72,  0] PE: [ 72,  1]       root: identifier `a`
B: [1021, 1022] PS: [ 72,  2] PE: [ 72,  3]     = `=`
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]     right: expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]       delegate: ternary_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]         delegate: or_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]           delegate: and_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]             delegate: compare_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]               delegate: add_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]                 delegate: mult_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]                   delegate: unary_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]                     delegate: fallback_expr
B: [1023, 1030] PS: [ 72,  4] PE: [ 72, 11]                       delegate: var_path
B: [1023, 1027] PS: [ 72,  4] PE: [ 72,  8]                         root: identifier `nums`
B: [1027, 1028] PS: [ 72,  8] PE: [ 72,  9]                         [ `[`
B: [1028, 1029] PS: [ 72,  9] PE: [ 72, 10]                         indexing: slice
B: [1028, 1029] PS: [ 72,  9] PE: [ 72, 10]                           : `:`
B: [1029, 1030] PS: [ 72, 10] PE: [ 72, 11]                         ] `]`
B: [1031, 1043] PS: [ 73,  0] PE: [ 73, 12]   assign
B: [1031, 1032] PS: [ 73,  0] PE: [ 73,  1]     left: var_path
B: [1031, 1032] PS: [ 73,  0] PE: [ 73,  1]       root: identifier `a`
B: [1033, 1034] PS: [ 73,  2] PE: [ 73,  3]     = `=`
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]     right: expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]       delegate: ternary_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]         delegate: or_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]           delegate: and_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]             delegate: compare_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]               delegate: add_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]                 delegate: mult_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]                   delegate: unary_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]                     delegate: fallback_expr
B: [1035, 1043] PS: [ 73,  4] PE: [ 73, 12]                       delegate: var_path
B: [1035, 1039] PS: [ 73,  4] PE: [ 73,  8]                         root: identifier `nums`
B: [1039, 1040] PS: [ 73,  8] PE: [ 73,  9]                         [ `[`
B: [1040, 1042] PS: [ 73,  9] PE: [ 73, 11]                         indexing: slice
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                           start: expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                             delegate: ternary_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                               delegate: or_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                 delegate: and_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                   delegate: compare_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                     delegate: add_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                       delegate: mult_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                         delegate: unary_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                           delegate: fallback_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                             delegate: indexed_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                               root: primary_expr
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                                 literal
B: [1040, 1041] PS: [ 73,  9] PE: [ 73, 10]                                                   int `1`
B: [1041, 1042] PS: [ 73, 10] PE: [ 73, 11]                           : `:`
B: [1042, 1043] PS: [ 73, 11] PE: [ 73, 12]                         ] `]`
B: [1044, 1057] PS: [ 74,  0] PE: [ 74, 13]   assign
B: [1044, 1045] PS: [ 74,  0] PE: [ 74,  1]     left: var_path
B: [1044, 1045] PS: [ 74,  0] PE: [ 74,  1]       root: identifier `a`
B: [1046, 1047] PS: [ 74,  2] PE: [ 74,  3]     = `=`
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]     right: expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]       delegate: ternary_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]         delegate: or_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]           delegate: and_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]             delegate: compare_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]               delegate: add_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]                 delegate: mult_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]                   delegate: unary_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]                     delegate: fallback_expr
B: [1048, 1057] PS: [ 74,  4] PE: [ 74, 13]                       delegate: var_path
B: [1048, 1052] PS: [ 74,  4] PE: [ 74,  8]                         root: identifier `nums`
B: [1052, 1053] PS: [ 74,  8] PE: [ 74,  9]                         [ `[`
B: [1053, 1056] PS: [ 74,  9] PE: [ 74, 12]                         indexing: slice
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                           start: expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                             delegate: ternary_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                               delegate: or_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                 delegate: and_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                   delegate: compare_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                     delegate: add_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                       delegate: mult_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                         delegate: unary_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                           delegate: fallback_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                             delegate: indexed_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                               root: primary_expr
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                                 literal
B: [1053, 1054] PS: [ 74,  9] PE: [ 74, 10]                                                   int `1`
B: [1054, 1055] PS: [ 74, 10] PE: [ 74, 11]                           : `:`
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                           end: expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                             delegate: ternary_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                               delegate: or_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                 delegate: and_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                   delegate: compare_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                     delegate: add_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                       delegate: mult_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                         delegate: unary_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                           delegate: fallback_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                             delegate: indexed_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                               root: primary_expr
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                                 literal
B: [1055, 1056] PS: [ 74, 11] PE: [ 74, 12]                                                   int `2`
B: [1056, 1057] PS: [ 74, 12] PE: [ 74, 13]                         ] `]`
B: [1058, 1070] PS: [ 75,  0] PE: [ 75, 12]   assign
B: [1058, 1059] PS: [ 75,  0] PE: [ 75,  1]     left: var_path
B: [1058, 1059] PS: [ 75,  0] PE: [ 75,  1]       root: identifier `a`
B: [1060, 1061] PS: [ 75,  2] PE: [ 75,  3]     = `=`
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]     right: expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]       delegate: ternary_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]         delegate: or_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]           delegate: and_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]             delegate: compare_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]               delegate: add_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]                 delegate: mult_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]                   delegate: unary_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]                     delegate: fallback_expr
B: [1062, 1070] PS: [ 75,  4] PE: [ 75, 12]                       delegate: var_path
B: [1062, 1066] PS: [ 75,  4] PE: [ 75,  8]                         root: identifier `nums`
B: [1066, 1067] PS: [ 75,  8] PE: [ 75,  9]                         [ `[`
B: [1067, 1069] PS: [ 75,  9] PE: [ 75, 11]                         indexing: slice
B: [1067, 1068] PS: [ 75,  9] PE: [ 75, 10]                           : `:`
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                           end: expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                             delegate: ternary_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                               delegate: or_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                 delegate: and_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                   delegate: compare_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                     delegate: add_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                       delegate: mult_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                         delegate: unary_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                           delegate: fallback_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                             delegate: indexed_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                               root: primary_expr
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                                 literal
B: [1068, 1069] PS: [ 75, 10] PE: [ 75, 11]                                                   int `2`
B: [1069, 1070] PS: [ 75, 11] PE: [ 75, 12]                         ] `]`
B: [1072, 1127] PS: [ 77,  0] PE: [ 79,  1]   assign
B: [1072, 1082] PS: [ 77,  0] PE: [ 77, 10]     left: var_path
B: [1072, 1082] PS: [ 77,  0] PE: [ 77, 10]       root: identifier `my_headers`
B: [1083, 1084] PS: [ 77, 11] PE: [ 77, 12]     = `=`
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]     right: expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]       delegate: ternary_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]         delegate: or_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]           delegate: and_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]             delegate: compare_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]               delegate: add_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]                 delegate: mult_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]                   delegate: unary_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]                     delegate: fallback_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]                       delegate: indexed_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]                         root: primary_expr
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]                           literal
B: [1085, 1127] PS: [ 77, 13] PE: [ 79,  1]                             map
B: [1085, 1086] PS: [ 77, 13] PE: [ 77, 14]                               { `{`
B: [1091, 1124] PS: [ 78,  4] PE: [ 78, 37]                               map_entry: map_entry
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                 key: expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                   delegate: ternary_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                     delegate: or_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                       delegate: and_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                         delegate: compare_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                           delegate: add_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                             delegate: mult_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                               delegate: unary_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                                 delegate: fallback_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                                   delegate: indexed_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                                     root: primary_expr
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                                       literal
B: [1091, 1106] PS: [ 78,  4] PE: [ 78, 19]                                                         string
B: [1091, 1092] PS: [ 78,  4] PE: [ 78,  5]                                                           start: string_start `"`
B: [1092, 1105] PS: [ 78,  5] PE: [ 78, 18]                                                           contents: string_contents
B: [1092, 1105] PS: [ 78,  5] PE: [ 78, 18]                                                             content: string_content `Authorization`
B: [1105, 1106] PS: [ 78, 18] PE: [ 78, 19]                                                           end: string_end `"`
B: [1106, 1107] PS: [ 78, 19] PE: [ 78, 20]                                 : `:`
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                 value: expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                   delegate: ternary_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                     delegate: or_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                       delegate: and_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                         delegate: compare_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                           delegate: add_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                             delegate: mult_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                               delegate: unary_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                                 delegate: fallback_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                                   delegate: indexed_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                                     root: primary_expr
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                                       literal
B: [1108, 1124] PS: [ 78, 21] PE: [ 78, 37]                                                         string
B: [1108, 1109] PS: [ 78, 21] PE: [ 78, 22]                                                           start: string_start `"`
B: [1109, 1123] PS: [ 78, 22] PE: [ 78, 36]                                                           contents: string_contents
B: [1109, 1116] PS: [ 78, 22] PE: [ 78, 29]                                                             content: string_content `Bearer `
B: [1116, 1123] PS: [ 78, 29] PE: [ 78, 36]                                                             interpolation: interpolation
B: [1116, 1117] PS: [ 78, 29] PE: [ 78, 30]                                                               { `{`
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                               expr: expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                 delegate: ternary_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                   delegate: or_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                     delegate: and_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                       delegate: compare_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                         delegate: add_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                           delegate: mult_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                             delegate: unary_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                               delegate: fallback_expr
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                                 delegate: var_path
B: [1117, 1122] PS: [ 78, 30] PE: [ 78, 35]                                                                                   root: identifier `token`
B: [1122, 1123] PS: [ 78, 35] PE: [ 78, 36]                                                               } `}`
B: [1123, 1124] PS: [ 78, 36] PE: [ 78, 37]                                                           end: string_end `"`
B: [1124, 1125] PS: [ 78, 37] PE: [ 78, 38]                               , `,`
B: [1126, 1127] PS: [ 79,  0] PE: [ 79,  1]                               } `}`
B: [1128, 1179] PS: [ 80,  0] PE: [ 80, 51]   assign
B: [1128, 1136] PS: [ 80,  0] PE: [ 80,  8]     left: var_path
B: [1128, 1136] PS: [ 80,  0] PE: [ 80,  8]       root: identifier `response`
B: [1137, 1138] PS: [ 80,  9] PE: [ 80, 10]     = `=`
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]     right: expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]       delegate: ternary_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]         delegate: or_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]           delegate: and_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]             delegate: compare_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]               delegate: add_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]                 delegate: mult_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]                   delegate: unary_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]                     delegate: fallback_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]                       delegate: indexed_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]                         root: primary_expr
B: [1139, 1179] PS: [ 80, 11] PE: [ 80, 51]                           call
B: [1139, 1148] PS: [ 80, 11] PE: [ 80, 20]                             func: identifier `http_post`
B: [1148, 1149] PS: [ 80, 20] PE: [ 80, 21]                             ( `(`
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                             arg: expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                               delegate: ternary_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                 delegate: or_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                   delegate: and_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                     delegate: compare_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                       delegate: add_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                         delegate: mult_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                           delegate: unary_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                             delegate: fallback_expr
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                               delegate: var_path
B: [1149, 1152] PS: [ 80, 21] PE: [ 80, 24]                                                 root: identifier `url`
B: [1152, 1153] PS: [ 80, 24] PE: [ 80, 25]                             , `,`
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                             arg: expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                               delegate: ternary_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                 delegate: or_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                   delegate: and_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                     delegate: compare_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                       delegate: add_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                         delegate: mult_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                           delegate: unary_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                             delegate: fallback_expr
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                               delegate: var_path
B: [1154, 1158] PS: [ 80, 26] PE: [ 80, 30]                                                 root: identifier `body`
B: [1158, 1159] PS: [ 80, 30] PE: [ 80, 31]                             , `,`
B: [1160, 1178] PS: [ 80, 32] PE: [ 80, 50]                             named_arg: call_named_arg
B: [1160, 1167] PS: [ 80, 32] PE: [ 80, 39]                               name: identifier `headers`
B: [1167, 1168] PS: [ 80, 39] PE: [ 80, 40]                               = `=`
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                               value: expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                 delegate: ternary_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                   delegate: or_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                     delegate: and_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                       delegate: compare_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                         delegate: add_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                           delegate: mult_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                             delegate: unary_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                               delegate: fallback_expr
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                                 delegate: var_path
B: [1168, 1178] PS: [ 80, 40] PE: [ 80, 50]                                                   root: identifier `my_headers`
B: [1178, 1179] PS: [ 80, 50] PE: [ 80, 51]                             ) `)`
B: [1181, 1249] PS: [ 82,  0] PE: [ 86,  3]   assign
B: [1181, 1185] PS: [ 82,  0] PE: [ 82,  4]     left: var_path
B: [1181, 1185] PS: [ 82,  0] PE: [ 82,  4]       root: identifier `text`
B: [1186, 1187] PS: [ 82,  5] PE: [ 82,  6]     = `=`
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]     right: expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]       delegate: ternary_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]         delegate: or_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]           delegate: and_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]             delegate: compare_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]               delegate: add_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]                 delegate: mult_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]                   delegate: unary_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]                     delegate: fallback_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]                       delegate: indexed_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]                         root: primary_expr
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]                           literal
B: [1188, 1249] PS: [ 82,  7] PE: [ 86,  3]                             string
B: [1188, 1192] PS: [ 82,  7] PE: [ 83,  0]                               start: string_start `"""\n`
B: [1192, 1245] PS: [ 83,  0] PE: [ 85, 26]                               contents: string_contents
B: [1192, 1202] PS: [ 83,  0] PE: [ 83, 10]                                 content: string_content `This is an`
B: [1202, 1203] PS: [ 83, 10] PE: [ 84,  0]                                 content: string_content `\n`
B: [1203, 1218] PS: [ 84,  0] PE: [ 84, 15]                                 content: string_content `example of text`
B: [1218, 1219] PS: [ 84, 15] PE: [ 85,  0]                                 content: string_content `\n`
B: [1219, 1245] PS: [ 85,  0] PE: [ 85, 26]                                 content: string_content `that "may contain quotes"!`
B: [1245, 1249] PS: [ 85, 26] PE: [ 86,  3]                               end: string_end `\n"""`
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]   expr_stmt
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]     expr: expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]       delegate: ternary_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]         delegate: or_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]           delegate: and_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]             delegate: compare_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]               delegate: add_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]                 delegate: mult_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]                   delegate: unary_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]                     delegate: fallback_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]                       delegate: indexed_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]                         root: primary_expr
B: [1250, 1261] PS: [ 87,  0] PE: [ 87, 11]                           call
B: [1250, 1255] PS: [ 87,  0] PE: [ 87,  5]                             func: identifier `print`
B: [1255, 1256] PS: [ 87,  5] PE: [ 87,  6]                             ( `(`
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                             arg: expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                               delegate: ternary_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                 delegate: or_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                   delegate: and_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                     delegate: compare_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                       delegate: add_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                         delegate: mult_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                           delegate: unary_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                             delegate: fallback_expr
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                               delegate: var_path
B: [1256, 1260] PS: [ 87,  6] PE: [ 87, 10]                                                 root: identifier `text`
B: [1260, 1261] PS: [ 87, 10] PE: [ 87, 11]                             ) `)`
B: [1263, 1286] PS: [ 89,  0] PE: [ 89, 23]   assign
B: [1263, 1267] PS: [ 89,  0] PE: [ 89,  4]     left: var_path
B: [1263, 1267] PS: [ 89,  0] PE: [ 89,  4]       root: identifier `text`
B: [1268, 1269] PS: [ 89,  5] PE: [ 89,  6]     = `=`
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]     right: expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]       delegate: ternary_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]         delegate: or_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]           delegate: and_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]             delegate: compare_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]               delegate: add_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]                 delegate: mult_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]                   delegate: unary_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]                     delegate: fallback_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]                       delegate: indexed_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]                         root: primary_expr
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]                           literal
B: [1270, 1286] PS: [ 89,  7] PE: [ 89, 23]                             string
B: [1270, 1272] PS: [ 89,  7] PE: [ 89,  9]                               start: string_start `r"`
B: [1272, 1285] PS: [ 89,  9] PE: [ 89, 22]                               contents: string_contents
B: [1272, 1285] PS: [ 89,  9] PE: [ 89, 22]                                 content: string_content `Hello\n{name}`
B: [1285, 1286] PS: [ 89, 22] PE: [ 89, 23]                               end: string_end `"`
B: [1287, 1310] PS: [ 90,  0] PE: [ 90, 23]   assign
B: [1287, 1291] PS: [ 90,  0] PE: [ 90,  4]     left: var_path
B: [1287, 1291] PS: [ 90,  0] PE: [ 90,  4]       root: identifier `text`
B: [1292, 1293] PS: [ 90,  5] PE: [ 90,  6]     = `=`
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]     right: expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]       delegate: ternary_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]         delegate: or_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]           delegate: and_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]             delegate: compare_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]               delegate: add_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]                 delegate: mult_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]                   delegate: unary_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]                     delegate: fallback_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]                       delegate: indexed_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]                         root: primary_expr
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]                           literal
B: [1294, 1310] PS: [ 90,  7] PE: [ 90, 23]                             string
B: [1294, 1296] PS: [ 90,  7] PE: [ 90,  9]                               start: string_start `r'`
B: [1296, 1309] PS: [ 90,  9] PE: [ 90, 22]                               contents: string_contents
B: [1296, 1309] PS: [ 90,  9] PE: [ 90, 22]                                 content: string_content `Hello\n{name}`
B: [1309, 1310] PS: [ 90, 22] PE: [ 90, 23]                               end: string_end `'`
B: [1311, 1334] PS: [ 91,  0] PE: [ 91, 23]   assign
B: [1311, 1315] PS: [ 91,  0] PE: [ 91,  4]     left: var_path
B: [1311, 1315] PS: [ 91,  0] PE: [ 91,  4]       root: identifier `text`
B: [1316, 1317] PS: [ 91,  5] PE: [ 91,  6]     = `=`
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]     right: expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]       delegate: ternary_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]         delegate: or_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]           delegate: and_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]             delegate: compare_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]               delegate: add_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]                 delegate: mult_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]                   delegate: unary_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]                     delegate: fallback_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]                       delegate: indexed_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]                         root: primary_expr
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]                           literal
B: [1318, 1334] PS: [ 91,  7] PE: [ 91, 23]                             string
B: [1318, 1320] PS: [ 91,  7] PE: [ 91,  9]                               start: string_start `r``
B: [1320, 1333] PS: [ 91,  9] PE: [ 91, 22]                               contents: string_contents
B: [1320, 1333] PS: [ 91,  9] PE: [ 91, 22]                                 content: string_content `Hello\n{name}`
B: [1333, 1334] PS: [ 91, 22] PE: [ 91, 23]                               end: string_end ```
B: [1336, 1404] PS: [ 93,  0] PE: [ 93, 68]   assign
B: [1336, 1339] PS: [ 93,  0] PE: [ 93,  3]     lefts: var_path
B: [1336, 1339] PS: [ 93,  0] PE: [ 93,  3]       root: identifier `url`
B: [1339, 1340] PS: [ 93,  3] PE: [ 93,  4]     , `,`
B: [1341, 1345] PS: [ 93,  5] PE: [ 93,  9]     lefts: var_path
B: [1341, 1345] PS: [ 93,  5] PE: [ 93,  9]       root: identifier `name`
B: [1346, 1347] PS: [ 93, 10] PE: [ 93, 11]     = `=`
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]     right: expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]       delegate: ternary_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]         delegate: or_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]           delegate: and_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]             delegate: compare_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]               delegate: add_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]                 delegate: mult_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]                   delegate: unary_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]                     delegate: fallback_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]                       delegate: indexed_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]                         root: primary_expr
B: [1348, 1404] PS: [ 93, 12] PE: [ 93, 68]                           call
B: [1348, 1366] PS: [ 93, 12] PE: [ 93, 30]                             func: identifier `pick_from_resource`
B: [1366, 1367] PS: [ 93, 30] PE: [ 93, 31]                             ( `(`
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                             arg: expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                               delegate: ternary_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                 delegate: or_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                   delegate: and_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                     delegate: compare_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                       delegate: add_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                         delegate: mult_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                           delegate: unary_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                             delegate: fallback_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                               delegate: indexed_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                                 root: primary_expr
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                                   literal
B: [1367, 1394] PS: [ 93, 31] PE: [ 93, 58]                                                     string
B: [1367, 1368] PS: [ 93, 31] PE: [ 93, 32]                                                       start: string_start `"`
B: [1368, 1393] PS: [ 93, 32] PE: [ 93, 57]                                                       contents: string_contents
B: [1368, 1393] PS: [ 93, 32] PE: [ 93, 57]                                                         content: string_content `./resources/websites.json`
B: [1393, 1394] PS: [ 93, 57] PE: [ 93, 58]                                                       end: string_end `"`
B: [1394, 1395] PS: [ 93, 58] PE: [ 93, 59]                             , `,`
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                             arg: expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                               delegate: ternary_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                 delegate: or_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                   delegate: and_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                     delegate: compare_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                       delegate: add_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                         delegate: mult_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                           delegate: unary_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                             delegate: fallback_expr
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                               delegate: var_path
B: [1396, 1403] PS: [ 93, 60] PE: [ 93, 67]                                                 root: identifier `website`
B: [1403, 1404] PS: [ 93, 67] PE: [ 93, 68]                             ) `)`
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]   expr_stmt
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]     expr: expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]       delegate: ternary_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]         delegate: or_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]           delegate: and_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]             delegate: compare_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]               delegate: add_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]                 delegate: mult_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]                   delegate: unary_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]                     delegate: fallback_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]                       delegate: indexed_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]                         root: primary_expr
B: [1405, 1438] PS: [ 94,  0] PE: [ 94, 33]                           call
B: [1405, 1410] PS: [ 94,  0] PE: [ 94,  5]                             func: identifier `print`
B: [1410, 1411] PS: [ 94,  5] PE: [ 94,  6]                             ( `(`
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                             arg: expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                               delegate: ternary_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                 delegate: or_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                   delegate: and_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                     delegate: compare_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                       delegate: add_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                         delegate: mult_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                           delegate: unary_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                             delegate: fallback_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                               delegate: indexed_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                                 root: primary_expr
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                                   literal
B: [1411, 1437] PS: [ 94,  6] PE: [ 94, 32]                                                     string
B: [1411, 1412] PS: [ 94,  6] PE: [ 94,  7]                                                       start: string_start `"`
B: [1412, 1436] PS: [ 94,  7] PE: [ 94, 31]                                                       contents: string_contents
B: [1412, 1417] PS: [ 94,  7] PE: [ 94, 12]                                                         content: string_content `url: `
B: [1417, 1422] PS: [ 94, 12] PE: [ 94, 17]                                                         interpolation: interpolation
B: [1417, 1418] PS: [ 94, 12] PE: [ 94, 13]                                                           { `{`
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                           expr: expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                             delegate: ternary_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                               delegate: or_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                 delegate: and_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                   delegate: compare_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                     delegate: add_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                       delegate: mult_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                         delegate: unary_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                           delegate: fallback_expr
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                             delegate: var_path
B: [1418, 1421] PS: [ 94, 13] PE: [ 94, 16]                                                                               root: identifier `url`
B: [1421, 1422] PS: [ 94, 16] PE: [ 94, 17]                                                           } `}`
B: [1422, 1430] PS: [ 94, 17] PE: [ 94, 25]                                                         content: string_content `, name: `
B: [1430, 1436] PS: [ 94, 25] PE: [ 94, 31]                                                         interpolation: interpolation
B: [1430, 1431] PS: [ 94, 25] PE: [ 94, 26]                                                           { `{`
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                           expr: expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                             delegate: ternary_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                               delegate: or_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                 delegate: and_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                   delegate: compare_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                     delegate: add_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                       delegate: mult_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                         delegate: unary_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                           delegate: fallback_expr
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                             delegate: var_path
B: [1431, 1435] PS: [ 94, 26] PE: [ 94, 30]                                                                               root: identifier `name`
B: [1435, 1436] PS: [ 94, 30] PE: [ 94, 31]                                                           } `}`
B: [1436, 1437] PS: [ 94, 31] PE: [ 94, 32]                                                       end: string_end `"`
B: [1437, 1438] PS: [ 94, 32] PE: [ 94, 33]                             ) `)`
B: [1440, 1445] PS: [ 96,  0] PE: [ 96,  5]   shell_stmt
B: [1440, 1445] PS: [ 96,  0] PE: [ 96,  5]     shell_cmd: shell_cmd
B: [1440, 1441] PS: [ 96,  0] PE: [ 96,  1]       $ `$`
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]       command: expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]         delegate: ternary_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]           delegate: or_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]             delegate: and_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]               delegate: compare_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                 delegate: add_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                   delegate: mult_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                     delegate: unary_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                       delegate: fallback_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                         delegate: indexed_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                           root: primary_expr
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                             literal
B: [1441, 1445] PS: [ 96,  1] PE: [ 96,  5]                               string
B: [1441, 1442] PS: [ 96,  1] PE: [ 96,  2]                                 start: string_start ```
B: [1442, 1444] PS: [ 96,  2] PE: [ 96,  4]                                 contents: string_contents
B: [1442, 1444] PS: [ 96,  2] PE: [ 96,  4]                                   content: string_content `ls`
B: [1444, 1445] PS: [ 96,  4] PE: [ 96,  5]                                 end: string_end ```
B: [1447, 1465] PS: [ 98,  0] PE: [ 98, 18]   assign
B: [1447, 1450] PS: [ 98,  0] PE: [ 98,  3]     left: var_path
B: [1447, 1450] PS: [ 98,  0] PE: [ 98,  3]       root: identifier `cmd`
B: [1451, 1452] PS: [ 98,  4] PE: [ 98,  5]     = `=`
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]     right: expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]       delegate: ternary_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]         delegate: or_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]           delegate: and_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]             delegate: compare_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]               delegate: add_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]                 delegate: mult_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]                   delegate: unary_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]                     delegate: fallback_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]                       delegate: indexed_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]                         root: primary_expr
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]                           literal
B: [1453, 1465] PS: [ 98,  6] PE: [ 98, 18]                             string
B: [1453, 1454] PS: [ 98,  6] PE: [ 98,  7]                               start: string_start ```
B: [1454, 1464] PS: [ 98,  7] PE: [ 98, 17]                               contents: string_contents
B: [1454, 1459] PS: [ 98,  7] PE: [ 98, 12]                                 content: string_content `curl `
B: [1459, 1464] PS: [ 98, 12] PE: [ 98, 17]                                 interpolation: interpolation
B: [1459, 1460] PS: [ 98, 12] PE: [ 98, 13]                                   { `{`
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                   expr: expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                     delegate: ternary_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                       delegate: or_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                         delegate: and_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                           delegate: compare_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                             delegate: add_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                               delegate: mult_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                                 delegate: unary_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                                   delegate: fallback_expr
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                                     delegate: var_path
B: [1460, 1463] PS: [ 98, 13] PE: [ 98, 16]                                                       root: identifier `url`
B: [1463, 1464] PS: [ 98, 16] PE: [ 98, 17]                                   } `}`
B: [1464, 1465] PS: [ 98, 17] PE: [ 98, 18]                               end: string_end ```
B: [1466, 1470] PS: [ 99,  0] PE: [ 99,  4]   shell_stmt
B: [1466, 1470] PS: [ 99,  0] PE: [ 99,  4]     shell_cmd: shell_cmd
B: [1466, 1467] PS: [ 99,  0] PE: [ 99,  1]       $ `$`
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]       command: expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]         delegate: ternary_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]           delegate: or_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]             delegate: and_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]               delegate: compare_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]                 delegate: add_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]                   delegate: mult_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]                     delegate: unary_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]                       delegate: fallback_expr
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]                         delegate: var_path
B: [1467, 1470] PS: [ 99,  1] PE: [ 99,  4]                           root: identifier `cmd`
B: [1472, 1476] PS: [101,  0] PE: [101,  4]   shell_stmt
B: [1472, 1476] PS: [101,  0] PE: [101,  4]     shell_cmd: shell_cmd
B: [1472, 1473] PS: [101,  0] PE: [101,  1]       $ `$`
B: [1473, 1476] PS: [101,  1] PE: [101,  4]       command: expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]         delegate: ternary_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]           delegate: or_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]             delegate: and_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]               delegate: compare_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]                 delegate: add_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]                   delegate: mult_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]                     delegate: unary_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]                       delegate: fallback_expr
B: [1473, 1476] PS: [101,  1] PE: [101,  4]                         delegate: var_path
B: [1473, 1476] PS: [101,  1] PE: [101,  4]                           root: identifier `cmd`
B: [1478, 1483] PS: [103,  0] PE: [103,  5]   shell_stmt
B: [1478, 1483] PS: [103,  0] PE: [103,  5]     shell_cmd: shell_cmd
B: [1478, 1479] PS: [103,  0] PE: [103,  1]       $ `$`
B: [1479, 1483] PS: [103,  1] PE: [103,  5]       command: expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]         delegate: ternary_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]           delegate: or_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]             delegate: and_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]               delegate: compare_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                 delegate: add_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                   delegate: mult_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                     delegate: unary_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                       delegate: fallback_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                         delegate: indexed_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                           root: primary_expr
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                             literal
B: [1479, 1483] PS: [103,  1] PE: [103,  5]                               string
B: [1479, 1480] PS: [103,  1] PE: [103,  2]                                 start: string_start ```
B: [1480, 1482] PS: [103,  2] PE: [103,  4]                                 contents: string_contents
B: [1480, 1482] PS: [103,  2] PE: [103,  4]                                   content: string_content `ls`
B: [1482, 1483] PS: [103,  4] PE: [103,  5]                                 end: string_end ```
B: [1485, 1496] PS: [105,  0] PE: [105, 11]   shell_stmt
B: [1485, 1489] PS: [105,  0] PE: [105,  4]     left: var_path
B: [1485, 1489] PS: [105,  0] PE: [105,  4]       root: identifier `code`
B: [1490, 1491] PS: [105,  5] PE: [105,  6]     = `=`
B: [1492, 1496] PS: [105,  7] PE: [105, 11]     shell_cmd: shell_cmd
B: [1492, 1493] PS: [105,  7] PE: [105,  8]       $ `$`
B: [1493, 1496] PS: [105,  8] PE: [105, 11]       command: expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]         delegate: ternary_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]           delegate: or_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]             delegate: and_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]               delegate: compare_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]                 delegate: add_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]                   delegate: mult_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]                     delegate: unary_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]                       delegate: fallback_expr
B: [1493, 1496] PS: [105,  8] PE: [105, 11]                         delegate: var_path
B: [1493, 1496] PS: [105,  8] PE: [105, 11]                           root: identifier `cmd`
B: [1498, 1517] PS: [107,  0] PE: [107, 19]   shell_stmt
B: [1498, 1502] PS: [107,  0] PE: [107,  4]     lefts: var_path
B: [1498, 1502] PS: [107,  0] PE: [107,  4]       root: identifier `code`
B: [1502, 1503] PS: [107,  4] PE: [107,  5]     , `,`
B: [1504, 1510] PS: [107,  6] PE: [107, 12]     lefts: var_path
B: [1504, 1510] PS: [107,  6] PE: [107, 12]       root: identifier `stdout`
B: [1511, 1512] PS: [107, 13] PE: [107, 14]     = `=`
B: [1513, 1517] PS: [107, 15] PE: [107, 19]     shell_cmd: shell_cmd
B: [1513, 1514] PS: [107, 15] PE: [107, 16]       $ `$`
B: [1514, 1517] PS: [107, 16] PE: [107, 19]       command: expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]         delegate: ternary_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]           delegate: or_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]             delegate: and_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]               delegate: compare_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]                 delegate: add_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]                   delegate: mult_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]                     delegate: unary_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]                       delegate: fallback_expr
B: [1514, 1517] PS: [107, 16] PE: [107, 19]                         delegate: var_path
B: [1514, 1517] PS: [107, 16] PE: [107, 19]                           root: identifier `cmd`
B: [1519, 1546] PS: [109,  0] PE: [109, 27]   shell_stmt
B: [1519, 1523] PS: [109,  0] PE: [109,  4]     lefts: var_path
B: [1519, 1523] PS: [109,  0] PE: [109,  4]       root: identifier `code`
B: [1523, 1524] PS: [109,  4] PE: [109,  5]     , `,`
B: [1525, 1531] PS: [109,  6] PE: [109, 12]     lefts: var_path
B: [1525, 1531] PS: [109,  6] PE: [109, 12]       root: identifier `stdout`
B: [1531, 1532] PS: [109, 12] PE: [109, 13]     , `,`
B: [1533, 1539] PS: [109, 14] PE: [109, 20]     lefts: var_path
B: [1533, 1539] PS: [109, 14] PE: [109, 20]       root: identifier `stderr`
B: [1540, 1541] PS: [109, 21] PE: [109, 22]     = `=`
B: [1542, 1546] PS: [109, 23] PE: [109, 27]     shell_cmd: shell_cmd
B: [1542, 1543] PS: [109, 23] PE: [109, 24]       $ `$`
B: [1543, 1546] PS: [109, 24] PE: [109, 27]       command: expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]         delegate: ternary_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]           delegate: or_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]             delegate: and_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]               delegate: compare_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]                 delegate: add_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]                   delegate: mult_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]                     delegate: unary_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]                       delegate: fallback_expr
B: [1543, 1546] PS: [109, 24] PE: [109, 27]                         delegate: var_path
B: [1543, 1546] PS: [109, 24] PE: [109, 27]                           root: identifier `cmd`
B: [1548, 1567] PS: [111,  0] PE: [111, 19]   shell_stmt
B: [1548, 1549] PS: [111,  0] PE: [111,  1]     lefts: var_path
B: [1548, 1549] PS: [111,  0] PE: [111,  1]       root: identifier `_`
B: [1549, 1550] PS: [111,  1] PE: [111,  2]     , `,`
B: [1551, 1552] PS: [111,  3] PE: [111,  4]     lefts: var_path
B: [1551, 1552] PS: [111,  3] PE: [111,  4]       root: identifier `_`
B: [1552, 1553] PS: [111,  4] PE: [111,  5]     , `,`
B: [1554, 1560] PS: [111,  6] PE: [111, 12]     lefts: var_path
B: [1554, 1560] PS: [111,  6] PE: [111, 12]       root: identifier `stderr`
B: [1561, 1562] PS: [111, 13] PE: [111, 14]     = `=`
B: [1563, 1567] PS: [111, 15] PE: [111, 19]     shell_cmd: shell_cmd
B: [1563, 1564] PS: [111, 15] PE: [111, 16]       $ `$`
B: [1564, 1567] PS: [111, 16] PE: [111, 19]       command: expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]         delegate: ternary_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]           delegate: or_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]             delegate: and_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]               delegate: compare_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]                 delegate: add_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]                   delegate: mult_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]                     delegate: unary_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]                       delegate: fallback_expr
B: [1564, 1567] PS: [111, 16] PE: [111, 19]                         delegate: var_path
B: [1564, 1567] PS: [111, 16] PE: [111, 19]                           root: identifier `cmd`
B: [1569, 1598] PS: [113,  0] PE: [113, 29]   shell_stmt
B: [1569, 1598] PS: [113,  0] PE: [113, 29]     shell_cmd: shell_cmd
B: [1569, 1574] PS: [113,  0] PE: [113,  5]       modifier: quiet `quiet`
B: [1575, 1576] PS: [113,  6] PE: [113,  7]       $ `$`
B: [1576, 1598] PS: [113,  7] PE: [113, 29]       command: expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]         delegate: ternary_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]           delegate: or_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]             delegate: and_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]               delegate: compare_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                 delegate: add_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                   delegate: mult_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                     delegate: unary_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                       delegate: fallback_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                         delegate: indexed_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                           root: primary_expr
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                             literal
B: [1576, 1598] PS: [113,  7] PE: [113, 29]                               string
B: [1576, 1577] PS: [113,  7] PE: [113,  8]                                 start: string_start ```
B: [1577, 1597] PS: [113,  8] PE: [113, 28]                                 contents: string_contents
B: [1577, 1583] PS: [113,  8] PE: [113, 14]                                   content: string_content `touch `
B: [1583, 1593] PS: [113, 14] PE: [113, 24]                                   interpolation: interpolation
B: [1583, 1584] PS: [113, 14] PE: [113, 15]                                     { `{`
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                     expr: expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                       delegate: ternary_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                         delegate: or_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                           delegate: and_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                             delegate: compare_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                               delegate: add_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                                 delegate: mult_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                                   delegate: unary_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                                     delegate: fallback_expr
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                                       delegate: var_path
B: [1584, 1592] PS: [113, 15] PE: [113, 23]                                                         root: identifier `filename`
B: [1592, 1593] PS: [113, 23] PE: [113, 24]                                     } `}`
B: [1593, 1597] PS: [113, 24] PE: [113, 28]                                   content: string_content `.txt`
B: [1597, 1598] PS: [113, 28] PE: [113, 29]                                 end: string_end ```
B: [1600, 1637] PS: [115,  0] PE: [115, 37]   shell_stmt
B: [1600, 1637] PS: [115,  0] PE: [115, 37]     shell_cmd: shell_cmd
B: [1600, 1607] PS: [115,  0] PE: [115,  7]       modifier: confirm `confirm`
B: [1608, 1613] PS: [115,  8] PE: [115, 13]       modifier: quiet `quiet`
B: [1614, 1615] PS: [115, 14] PE: [115, 15]       $ `$`
B: [1615, 1637] PS: [115, 15] PE: [115, 37]       command: expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]         delegate: ternary_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]           delegate: or_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]             delegate: and_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]               delegate: compare_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                 delegate: add_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                   delegate: mult_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                     delegate: unary_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                       delegate: fallback_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                         delegate: indexed_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                           root: primary_expr
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                             literal
B: [1615, 1637] PS: [115, 15] PE: [115, 37]                               string
B: [1615, 1616] PS: [115, 15] PE: [115, 16]                                 start: string_start ```
B: [1616, 1636] PS: [115, 16] PE: [115, 36]                                 contents: string_contents
B: [1616, 1622] PS: [115, 16] PE: [115, 22]                                   content: string_content `touch `
B: [1622, 1632] PS: [115, 22] PE: [115, 32]                                   interpolation: interpolation
B: [1622, 1623] PS: [115, 22] PE: [115, 23]                                     { `{`
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                     expr: expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                       delegate: ternary_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                         delegate: or_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                           delegate: and_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                             delegate: compare_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                               delegate: add_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                                 delegate: mult_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                                   delegate: unary_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                                     delegate: fallback_expr
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                                       delegate: var_path
B: [1623, 1631] PS: [115, 23] PE: [115, 31]                                                         root: identifier `filename`
B: [1631, 1632] PS: [115, 31] PE: [115, 32]                                     } `}`
B: [1632, 1636] PS: [115, 32] PE: [115, 36]                                   content: string_content `.txt`
B: [1636, 1637] PS: [115, 36] PE: [115, 37]                                 end: string_end ```
B: [1638, 1675] PS: [116,  0] PE: [116, 37]   shell_stmt
B: [1638, 1675] PS: [116,  0] PE: [116, 37]     shell_cmd: shell_cmd
B: [1638, 1643] PS: [116,  0] PE: [116,  5]       modifier: quiet `quiet`
B: [1644, 1651] PS: [116,  6] PE: [116, 13]       modifier: confirm `confirm`
B: [1652, 1653] PS: [116, 14] PE: [116, 15]       $ `$`
B: [1653, 1675] PS: [116, 15] PE: [116, 37]       command: expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]         delegate: ternary_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]           delegate: or_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]             delegate: and_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]               delegate: compare_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                 delegate: add_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                   delegate: mult_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                     delegate: unary_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                       delegate: fallback_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                         delegate: indexed_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                           root: primary_expr
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                             literal
B: [1653, 1675] PS: [116, 15] PE: [116, 37]                               string
B: [1653, 1654] PS: [116, 15] PE: [116, 16]                                 start: string_start ```
B: [1654, 1674] PS: [116, 16] PE: [116, 36]                                 contents: string_contents
B: [1654, 1660] PS: [116, 16] PE: [116, 22]                                   content: string_content `touch `
B: [1660, 1670] PS: [116, 22] PE: [116, 32]                                   interpolation: interpolation
B: [1660, 1661] PS: [116, 22] PE: [116, 23]                                     { `{`
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                     expr: expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                       delegate: ternary_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                         delegate: or_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                           delegate: and_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                             delegate: compare_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                               delegate: add_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                                 delegate: mult_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                                   delegate: unary_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                                     delegate: fallback_expr
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                                       delegate: var_path
B: [1661, 1669] PS: [116, 23] PE: [116, 31]                                                         root: identifier `filename`
B: [1669, 1670] PS: [116, 31] PE: [116, 32]                                     } `}`
B: [1670, 1674] PS: [116, 32] PE: [116, 36]                                   content: string_content `.txt`
B: [1674, 1675] PS: [116, 36] PE: [116, 37]                                 end: string_end ```
B: [1677, 1742] PS: [118,  0] PE: [120, 24]   defer_block
B: [1677, 1682] PS: [118,  0] PE: [118,  5]     keyword: defer `defer`
B: [1682, 1683] PS: [118,  5] PE: [118,  6]     : `:`
B: [1688, 1717] PS: [119,  4] PE: [119, 33]     stmt: shell_stmt
B: [1688, 1717] PS: [119,  4] PE: [119, 33]       shell_cmd: shell_cmd
B: [1688, 1689] PS: [119,  4] PE: [119,  5]         $ `$`
B: [1689, 1717] PS: [119,  5] PE: [119, 33]         command: expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]           delegate: ternary_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]             delegate: or_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]               delegate: and_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                 delegate: compare_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                   delegate: add_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                     delegate: mult_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                       delegate: unary_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                         delegate: fallback_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                           delegate: indexed_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                             root: primary_expr
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                               literal
B: [1689, 1717] PS: [119,  5] PE: [119, 33]                                 string
B: [1689, 1690] PS: [119,  5] PE: [119,  6]                                   start: string_start ```
B: [1690, 1716] PS: [119,  6] PE: [119, 32]                                   contents: string_contents
B: [1690, 1716] PS: [119,  6] PE: [119, 32]                                     content: string_content `mv notes-tmp.txt notes.txt`
B: [1716, 1717] PS: [119, 32] PE: [119, 33]                                   end: string_end ```
B: [1722, 1742] PS: [120,  4] PE: [120, 24]     stmt: expr_stmt
B: [1722, 1742] PS: [120,  4] PE: [120, 24]       expr: expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]         delegate: ternary_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]           delegate: or_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]             delegate: and_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]               delegate: compare_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]                 delegate: add_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]                   delegate: mult_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]                     delegate: unary_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]                       delegate: fallback_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]                         delegate: indexed_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]                           root: primary_expr
B: [1722, 1742] PS: [120,  4] PE: [120, 24]                             call
B: [1722, 1727] PS: [120,  4] PE: [120,  9]                               func: identifier `print`
B: [1727, 1728] PS: [120,  9] PE: [120, 10]                               ( `(`
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                               arg: expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                 delegate: ternary_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                   delegate: or_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                     delegate: and_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                       delegate: compare_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                         delegate: add_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                           delegate: mult_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                             delegate: unary_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                               delegate: fallback_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                                 delegate: indexed_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                                   root: primary_expr
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                                     literal
B: [1728, 1741] PS: [120, 10] PE: [120, 23]                                                       string
B: [1728, 1729] PS: [120, 10] PE: [120, 11]                                                         start: string_start `"`
B: [1729, 1740] PS: [120, 11] PE: [120, 22]                                                         contents: string_contents
B: [1729, 1740] PS: [120, 11] PE: [120, 22]                                                           content: string_content `Moved back!`
B: [1740, 1741] PS: [120, 22] PE: [120, 23]                                                         end: string_end `"`
B: [1741, 1742] PS: [120, 23] PE: [120, 24]                               ) `)`
B: [1744, 1801] PS: [122,  0] PE: [122, 57]   shell_stmt
B: [1744, 1801] PS: [122,  0] PE: [122, 57]     shell_cmd: shell_cmd
B: [1744, 1745] PS: [122,  0] PE: [122,  1]       $ `$`
B: [1745, 1801] PS: [122,  1] PE: [122, 57]       command: expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]         delegate: ternary_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]           delegate: or_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]             delegate: and_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]               delegate: compare_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                 delegate: add_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                   delegate: mult_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                     delegate: unary_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                       delegate: fallback_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                         delegate: indexed_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                           root: primary_expr
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                             literal
B: [1745, 1801] PS: [122,  1] PE: [122, 57]                               string
B: [1745, 1746] PS: [122,  1] PE: [122,  2]                                 start: string_start ```
B: [1746, 1800] PS: [122,  2] PE: [122, 56]                                 contents: string_contents
B: [1746, 1782] PS: [122,  2] PE: [122, 38]                                   content: string_content `sed -i '' "s/Version = .*/Version = `
B: [1782, 1791] PS: [122, 38] PE: [122, 47]                                   interpolation: interpolation
B: [1782, 1783] PS: [122, 38] PE: [122, 39]                                     { `{`
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                     expr: expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                       delegate: ternary_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                         delegate: or_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                           delegate: and_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                             delegate: compare_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                               delegate: add_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                                 delegate: mult_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                                   delegate: unary_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                                     delegate: fallback_expr
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                                       delegate: var_path
B: [1783, 1790] PS: [122, 39] PE: [122, 46]                                                         root: identifier `version`
B: [1790, 1791] PS: [122, 46] PE: [122, 47]                                     } `}`
B: [1791, 1794] PS: [122, 47] PE: [122, 50]                                   content: string_content `/" `
B: [1794, 1800] PS: [122, 50] PE: [122, 56]                                   interpolation: interpolation
B: [1794, 1795] PS: [122, 50] PE: [122, 51]                                     { `{`
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                     expr: expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                       delegate: ternary_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                         delegate: or_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                           delegate: and_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                             delegate: compare_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                               delegate: add_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                                 delegate: mult_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                                   delegate: unary_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                                     delegate: fallback_expr
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                                       delegate: var_path
B: [1795, 1799] PS: [122, 51] PE: [122, 55]                                                         root: identifier `path`
B: [1799, 1800] PS: [122, 55] PE: [122, 56]                                     } `}`
B: [1800, 1801] PS: [122, 56] PE: [122, 57]                                 end: string_end ```
B: [1802, 1870] PS: [123,  0] PE: [125, 29]   defer_block
B: [1802, 1810] PS: [123,  0] PE: [123,  8]     keyword: errdefer `errdefer`
B: [1810, 1811] PS: [123,  8] PE: [123,  9]     : `:`
B: [1816, 1840] PS: [124,  4] PE: [124, 28]     stmt: expr_stmt
B: [1816, 1840] PS: [124,  4] PE: [124, 28]       expr: expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]         delegate: ternary_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]           delegate: or_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]             delegate: and_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]               delegate: compare_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]                 delegate: add_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]                   delegate: mult_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]                     delegate: unary_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]                       delegate: fallback_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]                         delegate: indexed_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]                           root: primary_expr
B: [1816, 1840] PS: [124,  4] PE: [124, 28]                             call
B: [1816, 1821] PS: [124,  4] PE: [124,  9]                               func: identifier `print`
B: [1821, 1822] PS: [124,  9] PE: [124, 10]                               ( `(`
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                               arg: expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                 delegate: ternary_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                   delegate: or_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                     delegate: and_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                       delegate: compare_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                         delegate: add_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                           delegate: mult_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                             delegate: unary_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                               delegate: fallback_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                                 delegate: indexed_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                                   root: primary_expr
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                                     literal
B: [1822, 1839] PS: [124, 10] PE: [124, 27]                                                       string
B: [1822, 1823] PS: [124, 10] PE: [124, 11]                                                         start: string_start `"`
B: [1823, 1838] PS: [124, 11] PE: [124, 26]                                                         contents: string_contents
B: [1823, 1838] PS: [124, 11] PE: [124, 26]                                                           content: string_content `Undoing bump...`
B: [1838, 1839] PS: [124, 26] PE: [124, 27]                                                         end: string_end `"`
B: [1839, 1840] PS: [124, 27] PE: [124, 28]                               ) `)`
B: [1845, 1870] PS: [125,  4] PE: [125, 29]     stmt: shell_stmt
B: [1845, 1870] PS: [125,  4] PE: [125, 29]       shell_cmd: shell_cmd
B: [1845, 1846] PS: [125,  4] PE: [125,  5]         $ `$`
B: [1846, 1870] PS: [125,  5] PE: [125, 29]         command: expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]           delegate: ternary_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]             delegate: or_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]               delegate: and_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                 delegate: compare_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                   delegate: add_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                     delegate: mult_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                       delegate: unary_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                         delegate: fallback_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                           delegate: indexed_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                             root: primary_expr
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                               literal
B: [1846, 1870] PS: [125,  5] PE: [125, 29]                                 string
B: [1846, 1847] PS: [125,  5] PE: [125,  6]                                   start: string_start ```
B: [1847, 1869] PS: [125,  6] PE: [125, 28]                                   contents: string_contents
B: [1847, 1863] PS: [125,  6] PE: [125, 22]                                     content: string_content `git checkout -- `
B: [1863, 1869] PS: [125, 22] PE: [125, 28]                                     interpolation: interpolation
B: [1863, 1864] PS: [125, 22] PE: [125, 23]                                       { `{`
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                       expr: expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                         delegate: ternary_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                           delegate: or_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                             delegate: and_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                               delegate: compare_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                                 delegate: add_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                                   delegate: mult_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                                     delegate: unary_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                                       delegate: fallback_expr
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                                         delegate: var_path
B: [1864, 1868] PS: [125, 23] PE: [125, 27]                                                           root: identifier `path`
B: [1868, 1869] PS: [125, 27] PE: [125, 28]                                       } `}`
B: [1869, 1870] PS: [125, 28] PE: [125, 29]                                   end: string_end ```
B: [1872, 1949] PS: [127,  0] PE: [129, 11]   if_stmt
B: [1872, 1949] PS: [127,  0] PE: [129, 11]     alt: if_alt
B: [1872, 1874] PS: [127,  0] PE: [127,  2]       if `if`
B: [1875, 1880] PS: [127,  3] PE: [127,  8]       condition: expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]         delegate: ternary_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]           delegate: or_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]             delegate: and_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]               delegate: compare_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                 delegate: add_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                   delegate: mult_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                     delegate: unary_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                       delegate: fallback_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                         delegate: indexed_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                           root: primary_expr
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                             literal
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                               bool
B: [1875, 1880] PS: [127,  3] PE: [127,  8]                                 false `false`
B: [1880, 1881] PS: [127,  8] PE: [127,  9]       : `:`
B: [1883, 1912] PS: [127, 11] PE: [127, 40]       comment `// failure simulation point 1`
B: [1917, 1937] PS: [128,  4] PE: [128, 24]       stmt: expr_stmt
B: [1917, 1937] PS: [128,  4] PE: [128, 24]         expr: expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]           delegate: ternary_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]             delegate: or_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]               delegate: and_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                 delegate: compare_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                   delegate: add_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                     delegate: mult_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                       delegate: unary_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                         delegate: fallback_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                           delegate: indexed_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                             root: primary_expr
B: [1917, 1937] PS: [128,  4] PE: [128, 24]                               call
B: [1917, 1922] PS: [128,  4] PE: [128,  9]                                 func: identifier `print`
B: [1922, 1923] PS: [128,  9] PE: [128, 10]                                 ( `(`
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                 arg: expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                   delegate: ternary_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                     delegate: or_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                       delegate: and_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                         delegate: compare_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                           delegate: add_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                             delegate: mult_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                               delegate: unary_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                                 delegate: fallback_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                                   delegate: indexed_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                                     root: primary_expr
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                                       literal
B: [1923, 1936] PS: [128, 10] PE: [128, 23]                                                         string
B: [1923, 1924] PS: [128, 10] PE: [128, 11]                                                           start: string_start `"`
B: [1924, 1935] PS: [128, 11] PE: [128, 22]                                                           contents: string_contents
B: [1924, 1935] PS: [128, 11] PE: [128, 22]                                                             content: string_content `Oh no! BAD!`
B: [1935, 1936] PS: [128, 22] PE: [128, 23]                                                           end: string_end `"`
B: [1936, 1937] PS: [128, 23] PE: [128, 24]                                 ) `)`
B: [1942, 1949] PS: [129,  4] PE: [129, 11]       stmt: expr_stmt
B: [1942, 1949] PS: [129,  4] PE: [129, 11]         expr: expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]           delegate: ternary_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]             delegate: or_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]               delegate: and_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                 delegate: compare_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                   delegate: add_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                     delegate: mult_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                       delegate: unary_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                         delegate: fallback_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                           delegate: indexed_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                             root: primary_expr
B: [1942, 1949] PS: [129,  4] PE: [129, 11]                               call
B: [1942, 1946] PS: [129,  4] PE: [129,  8]                                 func: identifier `exit`
B: [1946, 1947] PS: [129,  8] PE: [129,  9]                                 ( `(`
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                 arg: expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                   delegate: ternary_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                     delegate: or_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                       delegate: and_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                         delegate: compare_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                           delegate: add_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                             delegate: mult_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                               delegate: unary_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                                 delegate: fallback_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                                   delegate: indexed_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                                     root: primary_expr
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                                       literal
B: [1947, 1948] PS: [129,  9] PE: [129, 10]                                                         int `1`
B: [1948, 1949] PS: [129, 10] PE: [129, 11]                                 ) `)`
B: [1951, 1968] PS: [131,  0] PE: [131, 17]   shell_stmt
B: [1951, 1968] PS: [131,  0] PE: [131, 17]     shell_cmd: shell_cmd
B: [1951, 1952] PS: [131,  0] PE: [131,  1]       $ `$`
B: [1952, 1968] PS: [131,  1] PE: [131, 17]       command: expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]         delegate: ternary_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]           delegate: or_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]             delegate: and_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]               delegate: compare_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                 delegate: add_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                   delegate: mult_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                     delegate: unary_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                       delegate: fallback_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                         delegate: indexed_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                           root: primary_expr
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                             literal
B: [1952, 1968] PS: [131,  1] PE: [131, 17]                               string
B: [1952, 1953] PS: [131,  1] PE: [131,  2]                                 start: string_start ```
B: [1953, 1967] PS: [131,  2] PE: [131, 16]                                 contents: string_contents
B: [1953, 1961] PS: [131,  2] PE: [131, 10]                                   content: string_content `git add `
B: [1961, 1967] PS: [131, 10] PE: [131, 16]                                   interpolation: interpolation
B: [1961, 1962] PS: [131, 10] PE: [131, 11]                                     { `{`
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                     expr: expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                       delegate: ternary_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                         delegate: or_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                           delegate: and_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                             delegate: compare_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                               delegate: add_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                                 delegate: mult_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                                   delegate: unary_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                                     delegate: fallback_expr
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                                       delegate: var_path
B: [1962, 1966] PS: [131, 11] PE: [131, 15]                                                         root: identifier `path`
B: [1966, 1967] PS: [131, 15] PE: [131, 16]                                     } `}`
B: [1967, 1968] PS: [131, 16] PE: [131, 17]                                 end: string_end ```
B: [1969, 2042] PS: [132,  0] PE: [134, 30]   defer_block
B: [1969, 1977] PS: [132,  0] PE: [132,  8]     keyword: errdefer `errdefer`
B: [1977, 1978] PS: [132,  8] PE: [132,  9]     : `:`
B: [1983, 2011] PS: [133,  4] PE: [133, 32]     stmt: expr_stmt
B: [1983, 2011] PS: [133,  4] PE: [133, 32]       expr: expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]         delegate: ternary_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]           delegate: or_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]             delegate: and_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]               delegate: compare_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]                 delegate: add_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]                   delegate: mult_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]                     delegate: unary_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]                       delegate: fallback_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]                         delegate: indexed_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]                           root: primary_expr
B: [1983, 2011] PS: [133,  4] PE: [133, 32]                             call
B: [1983, 1988] PS: [133,  4] PE: [133,  9]                               func: identifier `print`
B: [1988, 1989] PS: [133,  9] PE: [133, 10]                               ( `(`
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                               arg: expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                 delegate: ternary_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                   delegate: or_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                     delegate: and_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                       delegate: compare_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                         delegate: add_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                           delegate: mult_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                             delegate: unary_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                               delegate: fallback_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                                 delegate: indexed_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                                   root: primary_expr
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                                     literal
B: [1989, 2010] PS: [133, 10] PE: [133, 31]                                                       string
B: [1989, 1990] PS: [133, 10] PE: [133, 11]                                                         start: string_start `"`
B: [1990, 2009] PS: [133, 11] PE: [133, 30]                                                         contents: string_contents
B: [1990, 2000] PS: [133, 11] PE: [133, 21]                                                           content: string_content `Resetting `
B: [2000, 2006] PS: [133, 21] PE: [133, 27]                                                           interpolation: interpolation
B: [2000, 2001] PS: [133, 21] PE: [133, 22]                                                             { `{`
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                             expr: expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                               delegate: ternary_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                 delegate: or_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                   delegate: and_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                     delegate: compare_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                       delegate: add_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                         delegate: mult_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                           delegate: unary_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                             delegate: fallback_expr
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                               delegate: var_path
B: [2001, 2005] PS: [133, 22] PE: [133, 26]                                                                                 root: identifier `path`
B: [2005, 2006] PS: [133, 26] PE: [133, 27]                                                             } `}`
B: [2006, 2009] PS: [133, 27] PE: [133, 30]                                                           content: string_content `...`
B: [2009, 2010] PS: [133, 30] PE: [133, 31]                                                         end: string_end `"`
B: [2010, 2011] PS: [133, 31] PE: [133, 32]                               ) `)`
B: [2016, 2042] PS: [134,  4] PE: [134, 30]     stmt: shell_stmt
B: [2016, 2017] PS: [134,  4] PE: [134,  5]       lefts: var_path
B: [2016, 2017] PS: [134,  4] PE: [134,  5]         root: identifier `_`
B: [2017, 2018] PS: [134,  5] PE: [134,  6]       , `,`
B: [2019, 2020] PS: [134,  7] PE: [134,  8]       lefts: var_path
B: [2019, 2020] PS: [134,  7] PE: [134,  8]         root: identifier `_`
B: [2021, 2022] PS: [134,  9] PE: [134, 10]       = `=`
B: [2023, 2042] PS: [134, 11] PE: [134, 30]       shell_cmd: shell_cmd
B: [2023, 2024] PS: [134, 11] PE: [134, 12]         $ `$`
B: [2024, 2042] PS: [134, 12] PE: [134, 30]         command: expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]           delegate: ternary_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]             delegate: or_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]               delegate: and_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                 delegate: compare_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                   delegate: add_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                     delegate: mult_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                       delegate: unary_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                         delegate: fallback_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                           delegate: indexed_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                             root: primary_expr
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                               literal
B: [2024, 2042] PS: [134, 12] PE: [134, 30]                                 string
B: [2024, 2025] PS: [134, 12] PE: [134, 13]                                   start: string_start ```
B: [2025, 2041] PS: [134, 13] PE: [134, 29]                                   contents: string_contents
B: [2025, 2035] PS: [134, 13] PE: [134, 23]                                     content: string_content `git reset `
B: [2035, 2041] PS: [134, 23] PE: [134, 29]                                     interpolation: interpolation
B: [2035, 2036] PS: [134, 23] PE: [134, 24]                                       { `{`
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                       expr: expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                         delegate: ternary_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                           delegate: or_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                             delegate: and_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                               delegate: compare_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                                 delegate: add_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                                   delegate: mult_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                                     delegate: unary_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                                       delegate: fallback_expr
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                                         delegate: var_path
B: [2036, 2040] PS: [134, 24] PE: [134, 28]                                                           root: identifier `path`
B: [2040, 2041] PS: [134, 28] PE: [134, 29]                                       } `}`
B: [2041, 2042] PS: [134, 29] PE: [134, 30]                                   end: string_end ```
B: [2044, 2119] PS: [136,  0] PE: [138, 11]   if_stmt
B: [2044, 2119] PS: [136,  0] PE: [138, 11]     alt: if_alt
B: [2044, 2046] PS: [136,  0] PE: [136,  2]       if `if`
B: [2047, 2052] PS: [136,  3] PE: [136,  8]       condition: expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]         delegate: ternary_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]           delegate: or_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]             delegate: and_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]               delegate: compare_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                 delegate: add_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                   delegate: mult_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                     delegate: unary_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                       delegate: fallback_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                         delegate: indexed_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                           root: primary_expr
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                             literal
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                               bool
B: [2047, 2052] PS: [136,  3] PE: [136,  8]                                 false `false`
B: [2052, 2053] PS: [136,  8] PE: [136,  9]       : `:`
B: [2055, 2084] PS: [136, 11] PE: [136, 40]       comment `// failure simulation point 2`
B: [2089, 2107] PS: [137,  4] PE: [137, 22]       stmt: expr_stmt
B: [2089, 2107] PS: [137,  4] PE: [137, 22]         expr: expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]           delegate: ternary_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]             delegate: or_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]               delegate: and_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                 delegate: compare_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                   delegate: add_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                     delegate: mult_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                       delegate: unary_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                         delegate: fallback_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                           delegate: indexed_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                             root: primary_expr
B: [2089, 2107] PS: [137,  4] PE: [137, 22]                               call
B: [2089, 2094] PS: [137,  4] PE: [137,  9]                                 func: identifier `print`
B: [2094, 2095] PS: [137,  9] PE: [137, 10]                                 ( `(`
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                 arg: expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                   delegate: ternary_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                     delegate: or_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                       delegate: and_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                         delegate: compare_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                           delegate: add_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                             delegate: mult_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                               delegate: unary_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                                 delegate: fallback_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                                   delegate: indexed_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                                     root: primary_expr
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                                       literal
B: [2095, 2106] PS: [137, 10] PE: [137, 21]                                                         string
B: [2095, 2096] PS: [137, 10] PE: [137, 11]                                                           start: string_start `"`
B: [2096, 2105] PS: [137, 11] PE: [137, 20]                                                           contents: string_contents
B: [2096, 2105] PS: [137, 11] PE: [137, 20]                                                             content: string_content `Bah! BAD!`
B: [2105, 2106] PS: [137, 20] PE: [137, 21]                                                           end: string_end `"`
B: [2106, 2107] PS: [137, 21] PE: [137, 22]                                 ) `)`
B: [2112, 2119] PS: [138,  4] PE: [138, 11]       stmt: expr_stmt
B: [2112, 2119] PS: [138,  4] PE: [138, 11]         expr: expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]           delegate: ternary_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]             delegate: or_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]               delegate: and_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                 delegate: compare_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                   delegate: add_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                     delegate: mult_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                       delegate: unary_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                         delegate: fallback_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                           delegate: indexed_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                             root: primary_expr
B: [2112, 2119] PS: [138,  4] PE: [138, 11]                               call
B: [2112, 2116] PS: [138,  4] PE: [138,  8]                                 func: identifier `exit`
B: [2116, 2117] PS: [138,  8] PE: [138,  9]                                 ( `(`
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                 arg: expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                   delegate: ternary_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                     delegate: or_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                       delegate: and_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                         delegate: compare_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                           delegate: add_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                             delegate: mult_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                               delegate: unary_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                                 delegate: fallback_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                                   delegate: indexed_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                                     root: primary_expr
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                                       literal
B: [2117, 2118] PS: [138,  9] PE: [138, 10]                                                         int `1`
B: [2118, 2119] PS: [138, 10] PE: [138, 11]                                 ) `)`
B: [2121, 2165] PS: [140,  0] PE: [140, 44]   shell_stmt
B: [2121, 2165] PS: [140,  0] PE: [140, 44]     shell_cmd: shell_cmd
B: [2121, 2122] PS: [140,  0] PE: [140,  1]       $ `$`
B: [2122, 2165] PS: [140,  1] PE: [140, 44]       command: expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]         delegate: ternary_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]           delegate: or_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]             delegate: and_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]               delegate: compare_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                 delegate: add_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                   delegate: mult_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                     delegate: unary_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                       delegate: fallback_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                         delegate: indexed_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                           root: primary_expr
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                             literal
B: [2122, 2165] PS: [140,  1] PE: [140, 44]                               string
B: [2122, 2123] PS: [140,  1] PE: [140,  2]                                 start: string_start ```
B: [2123, 2164] PS: [140,  2] PE: [140, 43]                                 contents: string_contents
B: [2123, 2154] PS: [140,  2] PE: [140, 33]                                   content: string_content `git commit -m "Bump version to `
B: [2154, 2163] PS: [140, 33] PE: [140, 42]                                   interpolation: interpolation
B: [2154, 2155] PS: [140, 33] PE: [140, 34]                                     { `{`
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                     expr: expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                       delegate: ternary_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                         delegate: or_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                           delegate: and_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                             delegate: compare_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                               delegate: add_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                                 delegate: mult_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                                   delegate: unary_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                                     delegate: fallback_expr
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                                       delegate: var_path
B: [2155, 2162] PS: [140, 34] PE: [140, 41]                                                         root: identifier `version`
B: [2162, 2163] PS: [140, 41] PE: [140, 42]                                     } `}`
B: [2163, 2164] PS: [140, 42] PE: [140, 43]                                   content: string_content `"`
B: [2164, 2165] PS: [140, 43] PE: [140, 44]                                 end: string_end ```
