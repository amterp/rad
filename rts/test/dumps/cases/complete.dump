=====
Complete
=====
#!/usr/bin/env rad
---
this is a file
header

whoa! hello
---
args:
    name str
    age int = 30 # An age.
    employed bool
    foo [*str] = ["blah", "bloop"]
    bar "BAR" b [*int] = [4, 5]

    name enum ["alice", "bob"]
    name regex "[A-Z][a-z]*"

a = 2
a = "hello"
a = 3.14
a = true
a = [1, 2, 3]
a = {"x": 1, y: 2}

a = 3 + 5 * 3 - 1 / 0.01 % 2
a += 2
a -= 1
a *= 5
a /= 2
a %= 2

a = `hello {upper("alice")}`
print(a)

f1 = json[].id
f2 = json.hello[].blah.*.woop

rad url:
    fields f1, f2
    sort f1 desc, f2
    sort

    if a > b:
        sort f2, f1

    f1:
        map fn(a) a * 2

    f1, f2:
        color "red" ".*"

if bah > 5:
    hello = bloop

    if blah == 2:
        yoink += 2
    else if blah == 3:
        boom = "haha"

request url:
    fields f1

display:
    fields f2, f1, f3

area = [width[i] * height[i] for i in range(width)]

numbers = [1, 2, 3]
print(join(numbers, "... "))
print(join(numbers, "... ", "Okay I'll count. "))
print(join(numbers, "... ", "Okay I'll count. ", "!"))

a = nums[:]
a = nums[1:]
a = nums[1:2]
a = nums[:2]

my_headers = {
    "Authorization": "Bearer {token}",
}
response = http_post(url, body, headers=my_headers)

text = """
This is an
example of text
that "may contain quotes"!
"""
print(text)

text = r"Hello\n{name}"
text = r'Hello\n{name}'
text = r`Hello\n{name}`

url, name = pick_from_resource("./resources/websites.json", website)
print("url: {url}, name: {name}")

$!`ls`

cmd = `curl {url}`
$cmd
fail:
    print("Oh no, curl failed!")

$cmd
recover:
    print("Oh no, curl failed!")

unsafe $`ls`

code = $!cmd

code, stdout = $!cmd

code, stdout, stderr = $!cmd

_, _, stderr = $!cmd

quiet $!`touch {filename}.txt`

unsafe quiet $`touch {filename}.txt`
quiet unsafe $`touch {filename}.txt`

defer:
    $!`mv notes-tmp.txt notes.txt`
    print("Moved back!")

$!`sed -i '' "s/Version = .*/Version = {version}/" {path}`
errdefer:
    print("Undoing bump...")
    $!`git checkout -- {path}`

if false:  // failure simulation point 1
    print("Oh no! BAD!")
    exit(1)

$!`git add {path}`
errdefer:
    print("Resetting {path}...")
    _, _ = $!`git reset {path}`

if false:  // failure simulation point 2
    print("Bah! BAD!")
    exit(1)

$!`git commit -m "Bump version to {version}"`
=====
B: [   0, 2266] PS: [  0,  0] PE: [145,  0] source_file
B: [   0,   18] PS: [  0,  0] PE: [  0, 18]   shebang `#!/usr/bin/env rad`
B: [  19,   62] PS: [  1,  0] PE: [  7,  0]   file_header
B: [  19,   22] PS: [  1,  0] PE: [  1,  3]     --- `---`
B: [  23,   58] PS: [  2,  0] PE: [  6,  0]     contents: file_header_contents `this is a file\nheader\n\nwhoa! hello\n`
B: [  58,   61] PS: [  6,  0] PE: [  6,  3]     --- `---`
B: [  62,  253] PS: [  7,  0] PE: [ 15, 28]   arg_block
B: [  62,   66] PS: [  7,  0] PE: [  7,  4]     args `args`
B: [  66,   67] PS: [  7,  4] PE: [  7,  5]     : `:`
B: [  72,   80] PS: [  8,  4] PE: [  8, 12]     declaration: arg_declaration
B: [  72,   76] PS: [  8,  4] PE: [  8,  8]       arg_name: identifier `name`
B: [  77,   80] PS: [  8,  9] PE: [  8, 12]       type: string_type `str`
B: [  85,  107] PS: [  9,  4] PE: [  9, 26]     declaration: arg_declaration
B: [  85,   88] PS: [  9,  4] PE: [  9,  7]       arg_name: identifier `age`
B: [  89,   92] PS: [  9,  8] PE: [  9, 11]       type: int_type `int`
B: [  93,   94] PS: [  9, 12] PE: [  9, 13]       = `=`
B: [  95,   97] PS: [  9, 14] PE: [  9, 16]       default: int_arg
B: [  95,   97] PS: [  9, 14] PE: [  9, 16]         value: int `30`
B: [ 100,  107] PS: [  9, 19] PE: [  9, 26]       comment: comment_text `An age.`
B: [ 112,  125] PS: [ 10,  4] PE: [ 10, 17]     declaration: arg_declaration
B: [ 112,  120] PS: [ 10,  4] PE: [ 10, 12]       arg_name: identifier `employed`
B: [ 121,  125] PS: [ 10, 13] PE: [ 10, 17]       type: bool_type `bool`
B: [ 130,  160] PS: [ 11,  4] PE: [ 11, 34]     declaration: arg_declaration
B: [ 130,  133] PS: [ 11,  4] PE: [ 11,  7]       arg_name: identifier `foo`
B: [ 134,  140] PS: [ 11,  8] PE: [ 11, 14]       type: string_list_type `[*str]`
B: [ 141,  142] PS: [ 11, 15] PE: [ 11, 16]       = `=`
B: [ 143,  160] PS: [ 11, 17] PE: [ 11, 34]       default: string_list
B: [ 143,  144] PS: [ 11, 17] PE: [ 11, 18]         [ `[`
B: [ 144,  150] PS: [ 11, 18] PE: [ 11, 24]         list_entry: string
B: [ 144,  145] PS: [ 11, 18] PE: [ 11, 19]           start: string_start `"`
B: [ 145,  149] PS: [ 11, 19] PE: [ 11, 23]           contents: string_contents
B: [ 145,  149] PS: [ 11, 19] PE: [ 11, 23]             content: string_content `blah`
B: [ 149,  150] PS: [ 11, 23] PE: [ 11, 24]           end: string_end `"`
B: [ 150,  151] PS: [ 11, 24] PE: [ 11, 25]         , `,`
B: [ 152,  159] PS: [ 11, 26] PE: [ 11, 33]         list_entry: string
B: [ 152,  153] PS: [ 11, 26] PE: [ 11, 27]           start: string_start `"`
B: [ 153,  158] PS: [ 11, 27] PE: [ 11, 32]           contents: string_contents
B: [ 153,  158] PS: [ 11, 27] PE: [ 11, 32]             content: string_content `bloop`
B: [ 158,  159] PS: [ 11, 32] PE: [ 11, 33]           end: string_end `"`
B: [ 159,  160] PS: [ 11, 33] PE: [ 11, 34]         ] `]`
B: [ 165,  192] PS: [ 12,  4] PE: [ 12, 31]     declaration: arg_declaration
B: [ 165,  168] PS: [ 12,  4] PE: [ 12,  7]       arg_name: identifier `bar`
B: [ 169,  174] PS: [ 12,  8] PE: [ 12, 13]       rename: string
B: [ 169,  170] PS: [ 12,  8] PE: [ 12,  9]         start: string_start `"`
B: [ 170,  173] PS: [ 12,  9] PE: [ 12, 12]         contents: string_contents
B: [ 170,  173] PS: [ 12,  9] PE: [ 12, 12]           content: string_content `BAR`
B: [ 173,  174] PS: [ 12, 12] PE: [ 12, 13]         end: string_end `"`
B: [ 175,  176] PS: [ 12, 14] PE: [ 12, 15]       shorthand: shorthand_flag `b`
B: [ 177,  183] PS: [ 12, 16] PE: [ 12, 22]       type: int_list_type `[*int]`
B: [ 184,  185] PS: [ 12, 23] PE: [ 12, 24]       = `=`
B: [ 186,  192] PS: [ 12, 25] PE: [ 12, 31]       default: int_list
B: [ 186,  187] PS: [ 12, 25] PE: [ 12, 26]         [ `[`
B: [ 187,  188] PS: [ 12, 26] PE: [ 12, 27]         list_entry: int_arg
B: [ 187,  188] PS: [ 12, 26] PE: [ 12, 27]           value: int `4`
B: [ 188,  189] PS: [ 12, 27] PE: [ 12, 28]         , `,`
B: [ 190,  191] PS: [ 12, 29] PE: [ 12, 30]         list_entry: int_arg
B: [ 190,  191] PS: [ 12, 29] PE: [ 12, 30]           value: int `5`
B: [ 191,  192] PS: [ 12, 30] PE: [ 12, 31]         ] `]`
B: [ 198,  224] PS: [ 14,  4] PE: [ 14, 30]     enum_constraint: arg_enum_constraint
B: [ 198,  202] PS: [ 14,  4] PE: [ 14,  8]       arg_name: identifier `name`
B: [ 203,  207] PS: [ 14,  9] PE: [ 14, 13]       enum `enum`
B: [ 208,  224] PS: [ 14, 14] PE: [ 14, 30]       values: string_list
B: [ 208,  209] PS: [ 14, 14] PE: [ 14, 15]         [ `[`
B: [ 209,  216] PS: [ 14, 15] PE: [ 14, 22]         list_entry: string
B: [ 209,  210] PS: [ 14, 15] PE: [ 14, 16]           start: string_start `"`
B: [ 210,  215] PS: [ 14, 16] PE: [ 14, 21]           contents: string_contents
B: [ 210,  215] PS: [ 14, 16] PE: [ 14, 21]             content: string_content `alice`
B: [ 215,  216] PS: [ 14, 21] PE: [ 14, 22]           end: string_end `"`
B: [ 216,  217] PS: [ 14, 22] PE: [ 14, 23]         , `,`
B: [ 218,  223] PS: [ 14, 24] PE: [ 14, 29]         list_entry: string
B: [ 218,  219] PS: [ 14, 24] PE: [ 14, 25]           start: string_start `"`
B: [ 219,  222] PS: [ 14, 25] PE: [ 14, 28]           contents: string_contents
B: [ 219,  222] PS: [ 14, 25] PE: [ 14, 28]             content: string_content `bob`
B: [ 222,  223] PS: [ 14, 28] PE: [ 14, 29]           end: string_end `"`
B: [ 223,  224] PS: [ 14, 29] PE: [ 14, 30]         ] `]`
B: [ 229,  253] PS: [ 15,  4] PE: [ 15, 28]     regex_constraint: arg_regex_constraint
B: [ 229,  233] PS: [ 15,  4] PE: [ 15,  8]       arg_name: identifier `name`
B: [ 234,  239] PS: [ 15,  9] PE: [ 15, 14]       regex `regex`
B: [ 240,  253] PS: [ 15, 15] PE: [ 15, 28]       regex: string
B: [ 240,  241] PS: [ 15, 15] PE: [ 15, 16]         start: string_start `"`
B: [ 241,  252] PS: [ 15, 16] PE: [ 15, 27]         contents: string_contents
B: [ 241,  252] PS: [ 15, 16] PE: [ 15, 27]           content: string_content `[A-Z][a-z]*`
B: [ 252,  253] PS: [ 15, 27] PE: [ 15, 28]         end: string_end `"`
B: [ 255,  260] PS: [ 17,  0] PE: [ 17,  5]   assign
B: [ 255,  256] PS: [ 17,  0] PE: [ 17,  1]     left: var_path
B: [ 255,  256] PS: [ 17,  0] PE: [ 17,  1]       root: identifier `a`
B: [ 257,  258] PS: [ 17,  2] PE: [ 17,  3]     = `=`
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]     right: expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]       delegate: ternary_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]         delegate: or_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]           delegate: and_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]             delegate: compare_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]               delegate: add_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]                 delegate: mult_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]                   delegate: unary_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]                     delegate: indexed_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]                       root: primary_expr
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]                         literal
B: [ 259,  260] PS: [ 17,  4] PE: [ 17,  5]                           int `2`
B: [ 261,  272] PS: [ 18,  0] PE: [ 18, 11]   assign
B: [ 261,  262] PS: [ 18,  0] PE: [ 18,  1]     left: var_path
B: [ 261,  262] PS: [ 18,  0] PE: [ 18,  1]       root: identifier `a`
B: [ 263,  264] PS: [ 18,  2] PE: [ 18,  3]     = `=`
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]     right: expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]       delegate: ternary_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]         delegate: or_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]           delegate: and_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]             delegate: compare_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]               delegate: add_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]                 delegate: mult_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]                   delegate: unary_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]                     delegate: indexed_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]                       root: primary_expr
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]                         literal
B: [ 265,  272] PS: [ 18,  4] PE: [ 18, 11]                           string
B: [ 265,  266] PS: [ 18,  4] PE: [ 18,  5]                             start: string_start `"`
B: [ 266,  271] PS: [ 18,  5] PE: [ 18, 10]                             contents: string_contents
B: [ 266,  271] PS: [ 18,  5] PE: [ 18, 10]                               content: string_content `hello`
B: [ 271,  272] PS: [ 18, 10] PE: [ 18, 11]                             end: string_end `"`
B: [ 273,  281] PS: [ 19,  0] PE: [ 19,  8]   assign
B: [ 273,  274] PS: [ 19,  0] PE: [ 19,  1]     left: var_path
B: [ 273,  274] PS: [ 19,  0] PE: [ 19,  1]       root: identifier `a`
B: [ 275,  276] PS: [ 19,  2] PE: [ 19,  3]     = `=`
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]     right: expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]       delegate: ternary_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]         delegate: or_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]           delegate: and_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]             delegate: compare_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]               delegate: add_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]                 delegate: mult_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]                   delegate: unary_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]                     delegate: indexed_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]                       root: primary_expr
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]                         literal
B: [ 277,  281] PS: [ 19,  4] PE: [ 19,  8]                           float `3.14`
B: [ 282,  290] PS: [ 20,  0] PE: [ 20,  8]   assign
B: [ 282,  283] PS: [ 20,  0] PE: [ 20,  1]     left: var_path
B: [ 282,  283] PS: [ 20,  0] PE: [ 20,  1]       root: identifier `a`
B: [ 284,  285] PS: [ 20,  2] PE: [ 20,  3]     = `=`
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]     right: expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]       delegate: ternary_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]         delegate: or_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]           delegate: and_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]             delegate: compare_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]               delegate: add_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]                 delegate: mult_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]                   delegate: unary_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]                     delegate: indexed_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]                       root: primary_expr
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]                         literal
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]                           bool
B: [ 286,  290] PS: [ 20,  4] PE: [ 20,  8]                             true `true`
B: [ 291,  304] PS: [ 21,  0] PE: [ 21, 13]   assign
B: [ 291,  292] PS: [ 21,  0] PE: [ 21,  1]     left: var_path
B: [ 291,  292] PS: [ 21,  0] PE: [ 21,  1]       root: identifier `a`
B: [ 293,  294] PS: [ 21,  2] PE: [ 21,  3]     = `=`
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]     right: expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]       delegate: ternary_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]         delegate: or_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]           delegate: and_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]             delegate: compare_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]               delegate: add_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]                 delegate: mult_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]                   delegate: unary_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]                     delegate: indexed_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]                       root: primary_expr
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]                         literal
B: [ 295,  304] PS: [ 21,  4] PE: [ 21, 13]                           list
B: [ 295,  296] PS: [ 21,  4] PE: [ 21,  5]                             [ `[`
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                             list_entry: expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                               delegate: ternary_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                 delegate: or_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                   delegate: and_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                     delegate: compare_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                       delegate: add_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                         delegate: mult_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                           delegate: unary_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                             delegate: indexed_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                               root: primary_expr
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                                 literal
B: [ 296,  297] PS: [ 21,  5] PE: [ 21,  6]                                                   int `1`
B: [ 297,  298] PS: [ 21,  6] PE: [ 21,  7]                             , `,`
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                             list_entry: expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                               delegate: ternary_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                 delegate: or_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                   delegate: and_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                     delegate: compare_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                       delegate: add_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                         delegate: mult_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                           delegate: unary_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                             delegate: indexed_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                               root: primary_expr
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                                 literal
B: [ 299,  300] PS: [ 21,  8] PE: [ 21,  9]                                                   int `2`
B: [ 300,  301] PS: [ 21,  9] PE: [ 21, 10]                             , `,`
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                             list_entry: expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                               delegate: ternary_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                 delegate: or_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                   delegate: and_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                     delegate: compare_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                       delegate: add_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                         delegate: mult_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                           delegate: unary_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                             delegate: indexed_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                               root: primary_expr
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                                 literal
B: [ 302,  303] PS: [ 21, 11] PE: [ 21, 12]                                                   int `3`
B: [ 303,  304] PS: [ 21, 12] PE: [ 21, 13]                             ] `]`
B: [ 305,  323] PS: [ 22,  0] PE: [ 22, 18]   assign
B: [ 305,  306] PS: [ 22,  0] PE: [ 22,  1]     left: var_path
B: [ 305,  306] PS: [ 22,  0] PE: [ 22,  1]       root: identifier `a`
B: [ 307,  308] PS: [ 22,  2] PE: [ 22,  3]     = `=`
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]     right: expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]       delegate: ternary_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]         delegate: or_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]           delegate: and_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]             delegate: compare_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]               delegate: add_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]                 delegate: mult_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]                   delegate: unary_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]                     delegate: indexed_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]                       root: primary_expr
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]                         literal
B: [ 309,  323] PS: [ 22,  4] PE: [ 22, 18]                           map
B: [ 309,  310] PS: [ 22,  4] PE: [ 22,  5]                             { `{`
B: [ 310,  316] PS: [ 22,  5] PE: [ 22, 11]                             map_entry: map_entry
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                               key: expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                 delegate: ternary_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                   delegate: or_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                     delegate: and_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                       delegate: compare_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                         delegate: add_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                           delegate: mult_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                             delegate: unary_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                               delegate: indexed_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                                 root: primary_expr
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                                   literal
B: [ 310,  313] PS: [ 22,  5] PE: [ 22,  8]                                                     string
B: [ 310,  311] PS: [ 22,  5] PE: [ 22,  6]                                                       start: string_start `"`
B: [ 311,  312] PS: [ 22,  6] PE: [ 22,  7]                                                       contents: string_contents
B: [ 311,  312] PS: [ 22,  6] PE: [ 22,  7]                                                         content: string_content `x`
B: [ 312,  313] PS: [ 22,  7] PE: [ 22,  8]                                                       end: string_end `"`
B: [ 313,  314] PS: [ 22,  8] PE: [ 22,  9]                               : `:`
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                               value: expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                 delegate: ternary_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                   delegate: or_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                     delegate: and_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                       delegate: compare_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                         delegate: add_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                           delegate: mult_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                             delegate: unary_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                               delegate: indexed_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                                 root: primary_expr
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                                   literal
B: [ 315,  316] PS: [ 22, 10] PE: [ 22, 11]                                                     int `1`
B: [ 316,  317] PS: [ 22, 11] PE: [ 22, 12]                             , `,`
B: [ 318,  322] PS: [ 22, 13] PE: [ 22, 17]                             map_entry: map_entry
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                               key: expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                 delegate: ternary_expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                   delegate: or_expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                     delegate: and_expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                       delegate: compare_expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                         delegate: add_expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                           delegate: mult_expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                             delegate: unary_expr
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                               delegate: var_path
B: [ 318,  319] PS: [ 22, 13] PE: [ 22, 14]                                                 root: identifier `y`
B: [ 319,  320] PS: [ 22, 14] PE: [ 22, 15]                               : `:`
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                               value: expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                 delegate: ternary_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                   delegate: or_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                     delegate: and_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                       delegate: compare_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                         delegate: add_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                           delegate: mult_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                             delegate: unary_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                               delegate: indexed_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                                 root: primary_expr
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                                   literal
B: [ 321,  322] PS: [ 22, 16] PE: [ 22, 17]                                                     int `2`
B: [ 322,  323] PS: [ 22, 17] PE: [ 22, 18]                             } `}`
B: [ 325,  353] PS: [ 24,  0] PE: [ 24, 28]   assign
B: [ 325,  326] PS: [ 24,  0] PE: [ 24,  1]     left: var_path
B: [ 325,  326] PS: [ 24,  0] PE: [ 24,  1]       root: identifier `a`
B: [ 327,  328] PS: [ 24,  2] PE: [ 24,  3]     = `=`
B: [ 329,  353] PS: [ 24,  4] PE: [ 24, 28]     right: expr
B: [ 329,  353] PS: [ 24,  4] PE: [ 24, 28]       delegate: ternary_expr
B: [ 329,  353] PS: [ 24,  4] PE: [ 24, 28]         delegate: or_expr
B: [ 329,  353] PS: [ 24,  4] PE: [ 24, 28]           delegate: and_expr
B: [ 329,  353] PS: [ 24,  4] PE: [ 24, 28]             delegate: compare_expr
B: [ 329,  353] PS: [ 24,  4] PE: [ 24, 28]               delegate: add_expr
B: [ 329,  338] PS: [ 24,  4] PE: [ 24, 13]                 left: add_expr
B: [ 329,  330] PS: [ 24,  4] PE: [ 24,  5]                   left: add_expr
B: [ 329,  330] PS: [ 24,  4] PE: [ 24,  5]                     delegate: mult_expr
B: [ 329,  330] PS: [ 24,  4] PE: [ 24,  5]                       delegate: unary_expr
B: [ 329,  330] PS: [ 24,  4] PE: [ 24,  5]                         delegate: indexed_expr
B: [ 329,  330] PS: [ 24,  4] PE: [ 24,  5]                           root: primary_expr
B: [ 329,  330] PS: [ 24,  4] PE: [ 24,  5]                             literal
B: [ 329,  330] PS: [ 24,  4] PE: [ 24,  5]                               int `3`
B: [ 331,  332] PS: [ 24,  6] PE: [ 24,  7]                   op: + `+`
B: [ 333,  338] PS: [ 24,  8] PE: [ 24, 13]                   right: mult_expr
B: [ 333,  334] PS: [ 24,  8] PE: [ 24,  9]                     left: mult_expr
B: [ 333,  334] PS: [ 24,  8] PE: [ 24,  9]                       delegate: unary_expr
B: [ 333,  334] PS: [ 24,  8] PE: [ 24,  9]                         delegate: indexed_expr
B: [ 333,  334] PS: [ 24,  8] PE: [ 24,  9]                           root: primary_expr
B: [ 333,  334] PS: [ 24,  8] PE: [ 24,  9]                             literal
B: [ 333,  334] PS: [ 24,  8] PE: [ 24,  9]                               int `5`
B: [ 335,  336] PS: [ 24, 10] PE: [ 24, 11]                     op: * `*`
B: [ 337,  338] PS: [ 24, 12] PE: [ 24, 13]                     right: unary_expr
B: [ 337,  338] PS: [ 24, 12] PE: [ 24, 13]                       delegate: indexed_expr
B: [ 337,  338] PS: [ 24, 12] PE: [ 24, 13]                         root: primary_expr
B: [ 337,  338] PS: [ 24, 12] PE: [ 24, 13]                           literal
B: [ 337,  338] PS: [ 24, 12] PE: [ 24, 13]                             int `3`
B: [ 339,  340] PS: [ 24, 14] PE: [ 24, 15]                 op: - `-`
B: [ 341,  353] PS: [ 24, 16] PE: [ 24, 28]                 right: mult_expr
B: [ 341,  349] PS: [ 24, 16] PE: [ 24, 24]                   left: mult_expr
B: [ 341,  342] PS: [ 24, 16] PE: [ 24, 17]                     left: mult_expr
B: [ 341,  342] PS: [ 24, 16] PE: [ 24, 17]                       delegate: unary_expr
B: [ 341,  342] PS: [ 24, 16] PE: [ 24, 17]                         delegate: indexed_expr
B: [ 341,  342] PS: [ 24, 16] PE: [ 24, 17]                           root: primary_expr
B: [ 341,  342] PS: [ 24, 16] PE: [ 24, 17]                             literal
B: [ 341,  342] PS: [ 24, 16] PE: [ 24, 17]                               int `1`
B: [ 343,  344] PS: [ 24, 18] PE: [ 24, 19]                     op: / `/`
B: [ 345,  349] PS: [ 24, 20] PE: [ 24, 24]                     right: unary_expr
B: [ 345,  349] PS: [ 24, 20] PE: [ 24, 24]                       delegate: indexed_expr
B: [ 345,  349] PS: [ 24, 20] PE: [ 24, 24]                         root: primary_expr
B: [ 345,  349] PS: [ 24, 20] PE: [ 24, 24]                           literal
B: [ 345,  349] PS: [ 24, 20] PE: [ 24, 24]                             float `0.01`
B: [ 350,  351] PS: [ 24, 25] PE: [ 24, 26]                   op: % `%`
B: [ 352,  353] PS: [ 24, 27] PE: [ 24, 28]                   right: unary_expr
B: [ 352,  353] PS: [ 24, 27] PE: [ 24, 28]                     delegate: indexed_expr
B: [ 352,  353] PS: [ 24, 27] PE: [ 24, 28]                       root: primary_expr
B: [ 352,  353] PS: [ 24, 27] PE: [ 24, 28]                         literal
B: [ 352,  353] PS: [ 24, 27] PE: [ 24, 28]                           int `2`
B: [ 354,  360] PS: [ 25,  0] PE: [ 25,  6]   compound_assign
B: [ 354,  355] PS: [ 25,  0] PE: [ 25,  1]     left: var_path
B: [ 354,  355] PS: [ 25,  0] PE: [ 25,  1]       root: identifier `a`
B: [ 356,  358] PS: [ 25,  2] PE: [ 25,  4]     op: += `+=`
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]     right: expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]       delegate: ternary_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]         delegate: or_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]           delegate: and_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]             delegate: compare_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]               delegate: add_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]                 delegate: mult_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]                   delegate: unary_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]                     delegate: indexed_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]                       root: primary_expr
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]                         literal
B: [ 359,  360] PS: [ 25,  5] PE: [ 25,  6]                           int `2`
B: [ 361,  367] PS: [ 26,  0] PE: [ 26,  6]   compound_assign
B: [ 361,  362] PS: [ 26,  0] PE: [ 26,  1]     left: var_path
B: [ 361,  362] PS: [ 26,  0] PE: [ 26,  1]       root: identifier `a`
B: [ 363,  365] PS: [ 26,  2] PE: [ 26,  4]     op: -= `-=`
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]     right: expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]       delegate: ternary_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]         delegate: or_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]           delegate: and_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]             delegate: compare_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]               delegate: add_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]                 delegate: mult_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]                   delegate: unary_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]                     delegate: indexed_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]                       root: primary_expr
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]                         literal
B: [ 366,  367] PS: [ 26,  5] PE: [ 26,  6]                           int `1`
B: [ 368,  374] PS: [ 27,  0] PE: [ 27,  6]   compound_assign
B: [ 368,  369] PS: [ 27,  0] PE: [ 27,  1]     left: var_path
B: [ 368,  369] PS: [ 27,  0] PE: [ 27,  1]       root: identifier `a`
B: [ 370,  372] PS: [ 27,  2] PE: [ 27,  4]     op: *= `*=`
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]     right: expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]       delegate: ternary_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]         delegate: or_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]           delegate: and_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]             delegate: compare_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]               delegate: add_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]                 delegate: mult_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]                   delegate: unary_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]                     delegate: indexed_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]                       root: primary_expr
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]                         literal
B: [ 373,  374] PS: [ 27,  5] PE: [ 27,  6]                           int `5`
B: [ 375,  381] PS: [ 28,  0] PE: [ 28,  6]   compound_assign
B: [ 375,  376] PS: [ 28,  0] PE: [ 28,  1]     left: var_path
B: [ 375,  376] PS: [ 28,  0] PE: [ 28,  1]       root: identifier `a`
B: [ 377,  379] PS: [ 28,  2] PE: [ 28,  4]     op: /= `/=`
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]     right: expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]       delegate: ternary_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]         delegate: or_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]           delegate: and_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]             delegate: compare_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]               delegate: add_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]                 delegate: mult_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]                   delegate: unary_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]                     delegate: indexed_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]                       root: primary_expr
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]                         literal
B: [ 380,  381] PS: [ 28,  5] PE: [ 28,  6]                           int `2`
B: [ 382,  388] PS: [ 29,  0] PE: [ 29,  6]   compound_assign
B: [ 382,  383] PS: [ 29,  0] PE: [ 29,  1]     left: var_path
B: [ 382,  383] PS: [ 29,  0] PE: [ 29,  1]       root: identifier `a`
B: [ 384,  386] PS: [ 29,  2] PE: [ 29,  4]     op: %= `%=`
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]     right: expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]       delegate: ternary_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]         delegate: or_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]           delegate: and_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]             delegate: compare_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]               delegate: add_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]                 delegate: mult_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]                   delegate: unary_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]                     delegate: indexed_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]                       root: primary_expr
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]                         literal
B: [ 387,  388] PS: [ 29,  5] PE: [ 29,  6]                           int `2`
B: [ 390,  418] PS: [ 31,  0] PE: [ 31, 28]   assign
B: [ 390,  391] PS: [ 31,  0] PE: [ 31,  1]     left: var_path
B: [ 390,  391] PS: [ 31,  0] PE: [ 31,  1]       root: identifier `a`
B: [ 392,  393] PS: [ 31,  2] PE: [ 31,  3]     = `=`
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]     right: expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]       delegate: ternary_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]         delegate: or_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]           delegate: and_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]             delegate: compare_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]               delegate: add_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]                 delegate: mult_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]                   delegate: unary_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]                     delegate: indexed_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]                       root: primary_expr
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]                         literal
B: [ 394,  418] PS: [ 31,  4] PE: [ 31, 28]                           string
B: [ 394,  395] PS: [ 31,  4] PE: [ 31,  5]                             start: string_start ```
B: [ 395,  417] PS: [ 31,  5] PE: [ 31, 27]                             contents: string_contents
B: [ 395,  401] PS: [ 31,  5] PE: [ 31, 11]                               content: string_content `hello `
B: [ 401,  417] PS: [ 31, 11] PE: [ 31, 27]                               interpolation: interpolation
B: [ 401,  402] PS: [ 31, 11] PE: [ 31, 12]                                 { `{`
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                 expr: expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                   delegate: ternary_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                     delegate: or_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                       delegate: and_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                         delegate: compare_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                           delegate: add_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                             delegate: mult_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                               delegate: unary_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                                 delegate: indexed_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                                   root: primary_expr
B: [ 402,  416] PS: [ 31, 12] PE: [ 31, 26]                                                     call
B: [ 402,  407] PS: [ 31, 12] PE: [ 31, 17]                                                       func: identifier `upper`
B: [ 407,  408] PS: [ 31, 17] PE: [ 31, 18]                                                       ( `(`
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                       arg: expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                         delegate: ternary_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                           delegate: or_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                             delegate: and_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                               delegate: compare_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                                 delegate: add_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                                   delegate: mult_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                                     delegate: unary_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                                       delegate: indexed_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                                         root: primary_expr
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                                           literal
B: [ 408,  415] PS: [ 31, 18] PE: [ 31, 25]                                                                             string
B: [ 408,  409] PS: [ 31, 18] PE: [ 31, 19]                                                                               start: string_start `"`
B: [ 409,  414] PS: [ 31, 19] PE: [ 31, 24]                                                                               contents: string_contents
B: [ 409,  414] PS: [ 31, 19] PE: [ 31, 24]                                                                                 content: string_content `alice`
B: [ 414,  415] PS: [ 31, 24] PE: [ 31, 25]                                                                               end: string_end `"`
B: [ 415,  416] PS: [ 31, 25] PE: [ 31, 26]                                                       ) `)`
B: [ 416,  417] PS: [ 31, 26] PE: [ 31, 27]                                 } `}`
B: [ 417,  418] PS: [ 31, 27] PE: [ 31, 28]                             end: string_end ```
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]   expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]     delegate: ternary_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]       delegate: or_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]         delegate: and_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]           delegate: compare_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]             delegate: add_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]               delegate: mult_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]                 delegate: unary_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]                   delegate: indexed_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]                     root: primary_expr
B: [ 419,  427] PS: [ 32,  0] PE: [ 32,  8]                       call
B: [ 419,  424] PS: [ 32,  0] PE: [ 32,  5]                         func: identifier `print`
B: [ 424,  425] PS: [ 32,  5] PE: [ 32,  6]                         ( `(`
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                         arg: expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                           delegate: ternary_expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                             delegate: or_expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                               delegate: and_expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                                 delegate: compare_expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                                   delegate: add_expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                                     delegate: mult_expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                                       delegate: unary_expr
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                                         delegate: var_path
B: [ 425,  426] PS: [ 32,  6] PE: [ 32,  7]                                           root: identifier `a`
B: [ 426,  427] PS: [ 32,  7] PE: [ 32,  8]                         ) `)`
B: [ 429,  443] PS: [ 34,  0] PE: [ 34, 14]   assign
B: [ 429,  431] PS: [ 34,  0] PE: [ 34,  2]     left: var_path
B: [ 429,  431] PS: [ 34,  0] PE: [ 34,  2]       root: identifier `f1`
B: [ 432,  433] PS: [ 34,  3] PE: [ 34,  4]     = `=`
B: [ 434,  443] PS: [ 34,  5] PE: [ 34, 14]     right: json_path
B: [ 434,  440] PS: [ 34,  5] PE: [ 34, 11]       segment: json_opener
B: [ 434,  438] PS: [ 34,  5] PE: [ 34,  9]         key: json `json`
B: [ 438,  440] PS: [ 34,  9] PE: [ 34, 11]         index: json_path_indexer
B: [ 438,  439] PS: [ 34,  9] PE: [ 34, 10]           [ `[`
B: [ 439,  440] PS: [ 34, 10] PE: [ 34, 11]           ] `]`
B: [ 440,  441] PS: [ 34, 11] PE: [ 34, 12]       . `.`
B: [ 441,  443] PS: [ 34, 12] PE: [ 34, 14]       segment: json_segment
B: [ 441,  443] PS: [ 34, 12] PE: [ 34, 14]         key: identifier `id`
B: [ 444,  473] PS: [ 35,  0] PE: [ 35, 29]   assign
B: [ 444,  446] PS: [ 35,  0] PE: [ 35,  2]     left: var_path
B: [ 444,  446] PS: [ 35,  0] PE: [ 35,  2]       root: identifier `f2`
B: [ 447,  448] PS: [ 35,  3] PE: [ 35,  4]     = `=`
B: [ 449,  473] PS: [ 35,  5] PE: [ 35, 29]     right: json_path
B: [ 449,  453] PS: [ 35,  5] PE: [ 35,  9]       segment: json_opener
B: [ 449,  453] PS: [ 35,  5] PE: [ 35,  9]         key: json `json`
B: [ 453,  454] PS: [ 35,  9] PE: [ 35, 10]       . `.`
B: [ 454,  461] PS: [ 35, 10] PE: [ 35, 17]       segment: json_segment
B: [ 454,  459] PS: [ 35, 10] PE: [ 35, 15]         key: identifier `hello`
B: [ 459,  461] PS: [ 35, 15] PE: [ 35, 17]         index: json_path_indexer
B: [ 459,  460] PS: [ 35, 15] PE: [ 35, 16]           [ `[`
B: [ 460,  461] PS: [ 35, 16] PE: [ 35, 17]           ] `]`
B: [ 461,  462] PS: [ 35, 17] PE: [ 35, 18]       . `.`
B: [ 462,  466] PS: [ 35, 18] PE: [ 35, 22]       segment: json_segment
B: [ 462,  466] PS: [ 35, 18] PE: [ 35, 22]         key: identifier `blah`
B: [ 466,  467] PS: [ 35, 22] PE: [ 35, 23]       . `.`
B: [ 467,  468] PS: [ 35, 23] PE: [ 35, 24]       segment: json_segment
B: [ 467,  468] PS: [ 35, 23] PE: [ 35, 24]         key: * `*`
B: [ 468,  469] PS: [ 35, 24] PE: [ 35, 25]       . `.`
B: [ 469,  473] PS: [ 35, 25] PE: [ 35, 29]       segment: json_segment
B: [ 469,  473] PS: [ 35, 25] PE: [ 35, 29]         key: identifier `woop`
B: [ 475,  637] PS: [ 37,  0] PE: [ 49, 24]   rad_block
B: [ 475,  478] PS: [ 37,  0] PE: [ 37,  3]     rad_type: rad_keyword `rad`
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]     source: expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]       delegate: ternary_expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]         delegate: or_expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]           delegate: and_expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]             delegate: compare_expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]               delegate: add_expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]                 delegate: mult_expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]                   delegate: unary_expr
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]                     delegate: var_path
B: [ 479,  482] PS: [ 37,  4] PE: [ 37,  7]                       root: identifier `url`
B: [ 482,  483] PS: [ 37,  7] PE: [ 37,  8]     : `:`
B: [ 488,  501] PS: [ 38,  4] PE: [ 38, 17]     stmt: rad_field_stmt
B: [ 488,  494] PS: [ 38,  4] PE: [ 38, 10]       fields `fields`
B: [ 495,  497] PS: [ 38, 11] PE: [ 38, 13]       identifier: identifier `f1`
B: [ 497,  498] PS: [ 38, 13] PE: [ 38, 14]       , `,`
B: [ 499,  501] PS: [ 38, 15] PE: [ 38, 17]       identifier: identifier `f2`
B: [ 506,  522] PS: [ 39,  4] PE: [ 39, 20]     stmt: rad_sort_stmt
B: [ 506,  510] PS: [ 39,  4] PE: [ 39,  8]       sort `sort`
B: [ 510,  518] PS: [ 39,  8] PE: [ 39, 16]       specifier: rad_sort_specifier
B: [ 511,  513] PS: [ 39,  9] PE: [ 39, 11]         first: immediate_identifier `f1`
B: [ 514,  518] PS: [ 39, 12] PE: [ 39, 16]         second: desc `desc`
B: [ 518,  519] PS: [ 39, 16] PE: [ 39, 17]       , `,`
B: [ 519,  522] PS: [ 39, 17] PE: [ 39, 20]       specifier: rad_sort_specifier
B: [ 520,  522] PS: [ 39, 18] PE: [ 39, 20]         first: immediate_identifier `f2`
B: [ 527,  531] PS: [ 40,  4] PE: [ 40,  8]     stmt: rad_sort_stmt
B: [ 527,  531] PS: [ 40,  4] PE: [ 40,  8]       sort `sort`
B: [ 537,  566] PS: [ 42,  4] PE: [ 43, 19]     stmt: rad_if_stmt
B: [ 537,  566] PS: [ 42,  4] PE: [ 43, 19]       alt: rad_if_alt
B: [ 537,  539] PS: [ 42,  4] PE: [ 42,  6]         if `if`
B: [ 540,  545] PS: [ 42,  7] PE: [ 42, 12]         condition: expr
B: [ 540,  545] PS: [ 42,  7] PE: [ 42, 12]           delegate: ternary_expr
B: [ 540,  545] PS: [ 42,  7] PE: [ 42, 12]             delegate: or_expr
B: [ 540,  545] PS: [ 42,  7] PE: [ 42, 12]               delegate: and_expr
B: [ 540,  545] PS: [ 42,  7] PE: [ 42, 12]                 delegate: compare_expr
B: [ 540,  541] PS: [ 42,  7] PE: [ 42,  8]                   left: compare_expr
B: [ 540,  541] PS: [ 42,  7] PE: [ 42,  8]                     delegate: add_expr
B: [ 540,  541] PS: [ 42,  7] PE: [ 42,  8]                       delegate: mult_expr
B: [ 540,  541] PS: [ 42,  7] PE: [ 42,  8]                         delegate: unary_expr
B: [ 540,  541] PS: [ 42,  7] PE: [ 42,  8]                           delegate: var_path
B: [ 540,  541] PS: [ 42,  7] PE: [ 42,  8]                             root: identifier `a`
B: [ 542,  543] PS: [ 42,  9] PE: [ 42, 10]                   op: > `>`
B: [ 544,  545] PS: [ 42, 11] PE: [ 42, 12]                   right: add_expr
B: [ 544,  545] PS: [ 42, 11] PE: [ 42, 12]                     delegate: mult_expr
B: [ 544,  545] PS: [ 42, 11] PE: [ 42, 12]                       delegate: unary_expr
B: [ 544,  545] PS: [ 42, 11] PE: [ 42, 12]                         delegate: var_path
B: [ 544,  545] PS: [ 42, 11] PE: [ 42, 12]                           root: identifier `b`
B: [ 545,  546] PS: [ 42, 12] PE: [ 42, 13]         : `:`
B: [ 555,  566] PS: [ 43,  8] PE: [ 43, 19]         stmt: rad_sort_stmt
B: [ 555,  559] PS: [ 43,  8] PE: [ 43, 12]           sort `sort`
B: [ 559,  562] PS: [ 43, 12] PE: [ 43, 15]           specifier: rad_sort_specifier
B: [ 560,  562] PS: [ 43, 13] PE: [ 43, 15]             first: immediate_identifier `f2`
B: [ 562,  563] PS: [ 43, 15] PE: [ 43, 16]           , `,`
B: [ 563,  566] PS: [ 43, 16] PE: [ 43, 19]           specifier: rad_sort_specifier
B: [ 564,  566] PS: [ 43, 17] PE: [ 43, 19]             first: immediate_identifier `f1`
B: [ 572,  599] PS: [ 45,  4] PE: [ 46, 23]     stmt: rad_field_modifier_stmt
B: [ 572,  574] PS: [ 45,  4] PE: [ 45,  6]       identifier: identifier `f1`
B: [ 574,  575] PS: [ 45,  6] PE: [ 45,  7]       : `:`
B: [ 584,  599] PS: [ 46,  8] PE: [ 46, 23]       mod_stmt: rad_field_mod_map
B: [ 584,  587] PS: [ 46,  8] PE: [ 46, 11]         map `map`
B: [ 588,  599] PS: [ 46, 12] PE: [ 46, 23]         lambda: fn_lambda
B: [ 588,  590] PS: [ 46, 12] PE: [ 46, 14]           keyword: fn `fn`
B: [ 590,  591] PS: [ 46, 14] PE: [ 46, 15]           ( `(`
B: [ 591,  592] PS: [ 46, 15] PE: [ 46, 16]           param: fn_param
B: [ 591,  592] PS: [ 46, 15] PE: [ 46, 16]             name: identifier `a`
B: [ 592,  593] PS: [ 46, 16] PE: [ 46, 17]           ) `)`
B: [ 594,  599] PS: [ 46, 18] PE: [ 46, 23]           expr: expr
B: [ 594,  599] PS: [ 46, 18] PE: [ 46, 23]             delegate: ternary_expr
B: [ 594,  599] PS: [ 46, 18] PE: [ 46, 23]               delegate: or_expr
B: [ 594,  599] PS: [ 46, 18] PE: [ 46, 23]                 delegate: and_expr
B: [ 594,  599] PS: [ 46, 18] PE: [ 46, 23]                   delegate: compare_expr
B: [ 594,  599] PS: [ 46, 18] PE: [ 46, 23]                     delegate: add_expr
B: [ 594,  599] PS: [ 46, 18] PE: [ 46, 23]                       delegate: mult_expr
B: [ 594,  595] PS: [ 46, 18] PE: [ 46, 19]                         left: mult_expr
B: [ 594,  595] PS: [ 46, 18] PE: [ 46, 19]                           delegate: unary_expr
B: [ 594,  595] PS: [ 46, 18] PE: [ 46, 19]                             delegate: var_path
B: [ 594,  595] PS: [ 46, 18] PE: [ 46, 19]                               root: identifier `a`
B: [ 596,  597] PS: [ 46, 20] PE: [ 46, 21]                         op: * `*`
B: [ 598,  599] PS: [ 46, 22] PE: [ 46, 23]                         right: unary_expr
B: [ 598,  599] PS: [ 46, 22] PE: [ 46, 23]                           delegate: indexed_expr
B: [ 598,  599] PS: [ 46, 22] PE: [ 46, 23]                             root: primary_expr
B: [ 598,  599] PS: [ 46, 22] PE: [ 46, 23]                               literal
B: [ 598,  599] PS: [ 46, 22] PE: [ 46, 23]                                 int `2`
B: [ 605,  637] PS: [ 48,  4] PE: [ 49, 24]     stmt: rad_field_modifier_stmt
B: [ 605,  607] PS: [ 48,  4] PE: [ 48,  6]       identifier: identifier `f1`
B: [ 607,  608] PS: [ 48,  6] PE: [ 48,  7]       , `,`
B: [ 609,  611] PS: [ 48,  8] PE: [ 48, 10]       identifier: identifier `f2`
B: [ 611,  612] PS: [ 48, 10] PE: [ 48, 11]       : `:`
B: [ 621,  637] PS: [ 49,  8] PE: [ 49, 24]       mod_stmt: rad_field_mod_color
B: [ 621,  626] PS: [ 49,  8] PE: [ 49, 13]         color `color`
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]         color: expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]           delegate: ternary_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]             delegate: or_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]               delegate: and_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                 delegate: compare_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                   delegate: add_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                     delegate: mult_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                       delegate: unary_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                         delegate: indexed_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                           root: primary_expr
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                             literal
B: [ 627,  632] PS: [ 49, 14] PE: [ 49, 19]                               string
B: [ 627,  628] PS: [ 49, 14] PE: [ 49, 15]                                 start: string_start `"`
B: [ 628,  631] PS: [ 49, 15] PE: [ 49, 18]                                 contents: string_contents
B: [ 628,  631] PS: [ 49, 15] PE: [ 49, 18]                                   content: string_content `red`
B: [ 631,  632] PS: [ 49, 18] PE: [ 49, 19]                                 end: string_end `"`
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]         regex: expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]           delegate: ternary_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]             delegate: or_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]               delegate: and_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                 delegate: compare_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                   delegate: add_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                     delegate: mult_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                       delegate: unary_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                         delegate: indexed_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                           root: primary_expr
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                             literal
B: [ 633,  637] PS: [ 49, 20] PE: [ 49, 24]                               string
B: [ 633,  634] PS: [ 49, 20] PE: [ 49, 21]                                 start: string_start `"`
B: [ 634,  636] PS: [ 49, 21] PE: [ 49, 23]                                 contents: string_contents
B: [ 634,  636] PS: [ 49, 21] PE: [ 49, 23]                                   content: string_content `.*`
B: [ 636,  637] PS: [ 49, 23] PE: [ 49, 24]                                 end: string_end `"`
B: [ 639,  751] PS: [ 51,  0] PE: [ 57, 21]   if_stmt
B: [ 639,  751] PS: [ 51,  0] PE: [ 57, 21]     alt: if_alt
B: [ 639,  641] PS: [ 51,  0] PE: [ 51,  2]       if `if`
B: [ 642,  649] PS: [ 51,  3] PE: [ 51, 10]       condition: expr
B: [ 642,  649] PS: [ 51,  3] PE: [ 51, 10]         delegate: ternary_expr
B: [ 642,  649] PS: [ 51,  3] PE: [ 51, 10]           delegate: or_expr
B: [ 642,  649] PS: [ 51,  3] PE: [ 51, 10]             delegate: and_expr
B: [ 642,  649] PS: [ 51,  3] PE: [ 51, 10]               delegate: compare_expr
B: [ 642,  645] PS: [ 51,  3] PE: [ 51,  6]                 left: compare_expr
B: [ 642,  645] PS: [ 51,  3] PE: [ 51,  6]                   delegate: add_expr
B: [ 642,  645] PS: [ 51,  3] PE: [ 51,  6]                     delegate: mult_expr
B: [ 642,  645] PS: [ 51,  3] PE: [ 51,  6]                       delegate: unary_expr
B: [ 642,  645] PS: [ 51,  3] PE: [ 51,  6]                         delegate: var_path
B: [ 642,  645] PS: [ 51,  3] PE: [ 51,  6]                           root: identifier `bah`
B: [ 646,  647] PS: [ 51,  7] PE: [ 51,  8]                 op: > `>`
B: [ 648,  649] PS: [ 51,  9] PE: [ 51, 10]                 right: add_expr
B: [ 648,  649] PS: [ 51,  9] PE: [ 51, 10]                   delegate: mult_expr
B: [ 648,  649] PS: [ 51,  9] PE: [ 51, 10]                     delegate: unary_expr
B: [ 648,  649] PS: [ 51,  9] PE: [ 51, 10]                       delegate: indexed_expr
B: [ 648,  649] PS: [ 51,  9] PE: [ 51, 10]                         root: primary_expr
B: [ 648,  649] PS: [ 51,  9] PE: [ 51, 10]                           literal
B: [ 648,  649] PS: [ 51,  9] PE: [ 51, 10]                             int `5`
B: [ 649,  650] PS: [ 51, 10] PE: [ 51, 11]       : `:`
B: [ 655,  668] PS: [ 52,  4] PE: [ 52, 17]       stmt: assign
B: [ 655,  660] PS: [ 52,  4] PE: [ 52,  9]         left: var_path
B: [ 655,  660] PS: [ 52,  4] PE: [ 52,  9]           root: identifier `hello`
B: [ 661,  662] PS: [ 52, 10] PE: [ 52, 11]         = `=`
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]         right: expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]           delegate: ternary_expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]             delegate: or_expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]               delegate: and_expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]                 delegate: compare_expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]                   delegate: add_expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]                     delegate: mult_expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]                       delegate: unary_expr
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]                         delegate: var_path
B: [ 663,  668] PS: [ 52, 12] PE: [ 52, 17]                           root: identifier `bloop`
B: [ 674,  751] PS: [ 54,  4] PE: [ 57, 21]       stmt: if_stmt
B: [ 674,  706] PS: [ 54,  4] PE: [ 55, 18]         alt: if_alt
B: [ 674,  676] PS: [ 54,  4] PE: [ 54,  6]           if `if`
B: [ 677,  686] PS: [ 54,  7] PE: [ 54, 16]           condition: expr
B: [ 677,  686] PS: [ 54,  7] PE: [ 54, 16]             delegate: ternary_expr
B: [ 677,  686] PS: [ 54,  7] PE: [ 54, 16]               delegate: or_expr
B: [ 677,  686] PS: [ 54,  7] PE: [ 54, 16]                 delegate: and_expr
B: [ 677,  686] PS: [ 54,  7] PE: [ 54, 16]                   delegate: compare_expr
B: [ 677,  681] PS: [ 54,  7] PE: [ 54, 11]                     left: compare_expr
B: [ 677,  681] PS: [ 54,  7] PE: [ 54, 11]                       delegate: add_expr
B: [ 677,  681] PS: [ 54,  7] PE: [ 54, 11]                         delegate: mult_expr
B: [ 677,  681] PS: [ 54,  7] PE: [ 54, 11]                           delegate: unary_expr
B: [ 677,  681] PS: [ 54,  7] PE: [ 54, 11]                             delegate: var_path
B: [ 677,  681] PS: [ 54,  7] PE: [ 54, 11]                               root: identifier `blah`
B: [ 682,  684] PS: [ 54, 12] PE: [ 54, 14]                     op: == `==`
B: [ 685,  686] PS: [ 54, 15] PE: [ 54, 16]                     right: add_expr
B: [ 685,  686] PS: [ 54, 15] PE: [ 54, 16]                       delegate: mult_expr
B: [ 685,  686] PS: [ 54, 15] PE: [ 54, 16]                         delegate: unary_expr
B: [ 685,  686] PS: [ 54, 15] PE: [ 54, 16]                           delegate: indexed_expr
B: [ 685,  686] PS: [ 54, 15] PE: [ 54, 16]                             root: primary_expr
B: [ 685,  686] PS: [ 54, 15] PE: [ 54, 16]                               literal
B: [ 685,  686] PS: [ 54, 15] PE: [ 54, 16]                                 int `2`
B: [ 686,  687] PS: [ 54, 16] PE: [ 54, 17]           : `:`
B: [ 696,  706] PS: [ 55,  8] PE: [ 55, 18]           stmt: compound_assign
B: [ 696,  701] PS: [ 55,  8] PE: [ 55, 13]             left: var_path
B: [ 696,  701] PS: [ 55,  8] PE: [ 55, 13]               root: identifier `yoink`
B: [ 702,  704] PS: [ 55, 14] PE: [ 55, 16]             op: += `+=`
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]             right: expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]               delegate: ternary_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                 delegate: or_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                   delegate: and_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                     delegate: compare_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                       delegate: add_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                         delegate: mult_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                           delegate: unary_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                             delegate: indexed_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                               root: primary_expr
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                                 literal
B: [ 705,  706] PS: [ 55, 17] PE: [ 55, 18]                                   int `2`
B: [ 711,  715] PS: [ 56,  4] PE: [ 56,  8]         else `else`
B: [ 716,  751] PS: [ 56,  9] PE: [ 57, 21]         alt: if_alt
B: [ 716,  718] PS: [ 56,  9] PE: [ 56, 11]           if `if`
B: [ 719,  728] PS: [ 56, 12] PE: [ 56, 21]           condition: expr
B: [ 719,  728] PS: [ 56, 12] PE: [ 56, 21]             delegate: ternary_expr
B: [ 719,  728] PS: [ 56, 12] PE: [ 56, 21]               delegate: or_expr
B: [ 719,  728] PS: [ 56, 12] PE: [ 56, 21]                 delegate: and_expr
B: [ 719,  728] PS: [ 56, 12] PE: [ 56, 21]                   delegate: compare_expr
B: [ 719,  723] PS: [ 56, 12] PE: [ 56, 16]                     left: compare_expr
B: [ 719,  723] PS: [ 56, 12] PE: [ 56, 16]                       delegate: add_expr
B: [ 719,  723] PS: [ 56, 12] PE: [ 56, 16]                         delegate: mult_expr
B: [ 719,  723] PS: [ 56, 12] PE: [ 56, 16]                           delegate: unary_expr
B: [ 719,  723] PS: [ 56, 12] PE: [ 56, 16]                             delegate: var_path
B: [ 719,  723] PS: [ 56, 12] PE: [ 56, 16]                               root: identifier `blah`
B: [ 724,  726] PS: [ 56, 17] PE: [ 56, 19]                     op: == `==`
B: [ 727,  728] PS: [ 56, 20] PE: [ 56, 21]                     right: add_expr
B: [ 727,  728] PS: [ 56, 20] PE: [ 56, 21]                       delegate: mult_expr
B: [ 727,  728] PS: [ 56, 20] PE: [ 56, 21]                         delegate: unary_expr
B: [ 727,  728] PS: [ 56, 20] PE: [ 56, 21]                           delegate: indexed_expr
B: [ 727,  728] PS: [ 56, 20] PE: [ 56, 21]                             root: primary_expr
B: [ 727,  728] PS: [ 56, 20] PE: [ 56, 21]                               literal
B: [ 727,  728] PS: [ 56, 20] PE: [ 56, 21]                                 int `3`
B: [ 728,  729] PS: [ 56, 21] PE: [ 56, 22]           : `:`
B: [ 738,  751] PS: [ 57,  8] PE: [ 57, 21]           stmt: assign
B: [ 738,  742] PS: [ 57,  8] PE: [ 57, 12]             left: var_path
B: [ 738,  742] PS: [ 57,  8] PE: [ 57, 12]               root: identifier `boom`
B: [ 743,  744] PS: [ 57, 13] PE: [ 57, 14]             = `=`
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]             right: expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]               delegate: ternary_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                 delegate: or_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                   delegate: and_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                     delegate: compare_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                       delegate: add_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                         delegate: mult_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                           delegate: unary_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                             delegate: indexed_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                               root: primary_expr
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                                 literal
B: [ 745,  751] PS: [ 57, 15] PE: [ 57, 21]                                   string
B: [ 745,  746] PS: [ 57, 15] PE: [ 57, 16]                                     start: string_start `"`
B: [ 746,  750] PS: [ 57, 16] PE: [ 57, 20]                                     contents: string_contents
B: [ 746,  750] PS: [ 57, 16] PE: [ 57, 20]                                       content: string_content `haha`
B: [ 750,  751] PS: [ 57, 20] PE: [ 57, 21]                                     end: string_end `"`
B: [ 753,  779] PS: [ 59,  0] PE: [ 60, 13]   rad_block
B: [ 753,  760] PS: [ 59,  0] PE: [ 59,  7]     rad_type: request_keyword `request`
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]     source: expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]       delegate: ternary_expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]         delegate: or_expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]           delegate: and_expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]             delegate: compare_expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]               delegate: add_expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]                 delegate: mult_expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]                   delegate: unary_expr
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]                     delegate: var_path
B: [ 761,  764] PS: [ 59,  8] PE: [ 59, 11]                       root: identifier `url`
B: [ 764,  765] PS: [ 59, 11] PE: [ 59, 12]     : `:`
B: [ 770,  779] PS: [ 60,  4] PE: [ 60, 13]     stmt: rad_field_stmt
B: [ 770,  776] PS: [ 60,  4] PE: [ 60, 10]       fields `fields`
B: [ 777,  779] PS: [ 60, 11] PE: [ 60, 13]       identifier: identifier `f1`
B: [ 781,  811] PS: [ 62,  0] PE: [ 63, 21]   rad_block
B: [ 781,  788] PS: [ 62,  0] PE: [ 62,  7]     rad_type: display_keyword `display`
B: [ 788,  789] PS: [ 62,  7] PE: [ 62,  8]     : `:`
B: [ 794,  811] PS: [ 63,  4] PE: [ 63, 21]     stmt: rad_field_stmt
B: [ 794,  800] PS: [ 63,  4] PE: [ 63, 10]       fields `fields`
B: [ 801,  803] PS: [ 63, 11] PE: [ 63, 13]       identifier: identifier `f2`
B: [ 803,  804] PS: [ 63, 13] PE: [ 63, 14]       , `,`
B: [ 805,  807] PS: [ 63, 15] PE: [ 63, 17]       identifier: identifier `f1`
B: [ 807,  808] PS: [ 63, 17] PE: [ 63, 18]       , `,`
B: [ 809,  811] PS: [ 63, 19] PE: [ 63, 21]       identifier: identifier `f3`
B: [ 813,  864] PS: [ 65,  0] PE: [ 65, 51]   assign
B: [ 813,  817] PS: [ 65,  0] PE: [ 65,  4]     left: var_path
B: [ 813,  817] PS: [ 65,  0] PE: [ 65,  4]       root: identifier `area`
B: [ 818,  819] PS: [ 65,  5] PE: [ 65,  6]     = `=`
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]     right: expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]       delegate: ternary_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]         delegate: or_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]           delegate: and_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]             delegate: compare_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]               delegate: add_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]                 delegate: mult_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]                   delegate: unary_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]                     delegate: indexed_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]                       root: primary_expr
B: [ 820,  864] PS: [ 65,  7] PE: [ 65, 51]                         list_comprehension
B: [ 820,  821] PS: [ 65,  7] PE: [ 65,  8]                           [ `[`
B: [ 821,  841] PS: [ 65,  8] PE: [ 65, 28]                           expr: expr
B: [ 821,  841] PS: [ 65,  8] PE: [ 65, 28]                             delegate: ternary_expr
B: [ 821,  841] PS: [ 65,  8] PE: [ 65, 28]                               delegate: or_expr
B: [ 821,  841] PS: [ 65,  8] PE: [ 65, 28]                                 delegate: and_expr
B: [ 821,  841] PS: [ 65,  8] PE: [ 65, 28]                                   delegate: compare_expr
B: [ 821,  841] PS: [ 65,  8] PE: [ 65, 28]                                     delegate: add_expr
B: [ 821,  841] PS: [ 65,  8] PE: [ 65, 28]                                       delegate: mult_expr
B: [ 821,  829] PS: [ 65,  8] PE: [ 65, 16]                                         left: mult_expr
B: [ 821,  829] PS: [ 65,  8] PE: [ 65, 16]                                           delegate: unary_expr
B: [ 821,  829] PS: [ 65,  8] PE: [ 65, 16]                                             delegate: var_path
B: [ 821,  826] PS: [ 65,  8] PE: [ 65, 13]                                               root: identifier `width`
B: [ 826,  827] PS: [ 65, 13] PE: [ 65, 14]                                               [ `[`
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                               indexing: expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                 delegate: ternary_expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                   delegate: or_expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                     delegate: and_expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                       delegate: compare_expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                         delegate: add_expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                           delegate: mult_expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                             delegate: unary_expr
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                               delegate: var_path
B: [ 827,  828] PS: [ 65, 14] PE: [ 65, 15]                                                                 root: identifier `i`
B: [ 828,  829] PS: [ 65, 15] PE: [ 65, 16]                                               ] `]`
B: [ 830,  831] PS: [ 65, 17] PE: [ 65, 18]                                         op: * `*`
B: [ 832,  841] PS: [ 65, 19] PE: [ 65, 28]                                         right: unary_expr
B: [ 832,  841] PS: [ 65, 19] PE: [ 65, 28]                                           delegate: var_path
B: [ 832,  838] PS: [ 65, 19] PE: [ 65, 25]                                             root: identifier `height`
B: [ 838,  839] PS: [ 65, 25] PE: [ 65, 26]                                             [ `[`
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                             indexing: expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                               delegate: ternary_expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                 delegate: or_expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                   delegate: and_expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                     delegate: compare_expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                       delegate: add_expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                         delegate: mult_expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                           delegate: unary_expr
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                             delegate: var_path
B: [ 839,  840] PS: [ 65, 26] PE: [ 65, 27]                                                               root: identifier `i`
B: [ 840,  841] PS: [ 65, 27] PE: [ 65, 28]                                             ] `]`
B: [ 842,  845] PS: [ 65, 29] PE: [ 65, 32]                           for `for`
B: [ 846,  847] PS: [ 65, 33] PE: [ 65, 34]                           lefts: for_lefts
B: [ 846,  847] PS: [ 65, 33] PE: [ 65, 34]                             left: identifier `i`
B: [ 848,  850] PS: [ 65, 35] PE: [ 65, 37]                           in `in`
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                           right: expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                             delegate: ternary_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                               delegate: or_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                 delegate: and_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                   delegate: compare_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                     delegate: add_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                       delegate: mult_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                         delegate: unary_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                           delegate: indexed_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                             root: primary_expr
B: [ 851,  863] PS: [ 65, 38] PE: [ 65, 50]                                               call
B: [ 851,  856] PS: [ 65, 38] PE: [ 65, 43]                                                 func: identifier `range`
B: [ 856,  857] PS: [ 65, 43] PE: [ 65, 44]                                                 ( `(`
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                 arg: expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                   delegate: ternary_expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                     delegate: or_expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                       delegate: and_expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                         delegate: compare_expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                           delegate: add_expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                             delegate: mult_expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                               delegate: unary_expr
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                                 delegate: var_path
B: [ 857,  862] PS: [ 65, 44] PE: [ 65, 49]                                                                   root: identifier `width`
B: [ 862,  863] PS: [ 65, 49] PE: [ 65, 50]                                                 ) `)`
B: [ 863,  864] PS: [ 65, 50] PE: [ 65, 51]                           ] `]`
B: [ 866,  885] PS: [ 67,  0] PE: [ 67, 19]   assign
B: [ 866,  873] PS: [ 67,  0] PE: [ 67,  7]     left: var_path
B: [ 866,  873] PS: [ 67,  0] PE: [ 67,  7]       root: identifier `numbers`
B: [ 874,  875] PS: [ 67,  8] PE: [ 67,  9]     = `=`
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]     right: expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]       delegate: ternary_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]         delegate: or_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]           delegate: and_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]             delegate: compare_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]               delegate: add_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]                 delegate: mult_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]                   delegate: unary_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]                     delegate: indexed_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]                       root: primary_expr
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]                         literal
B: [ 876,  885] PS: [ 67, 10] PE: [ 67, 19]                           list
B: [ 876,  877] PS: [ 67, 10] PE: [ 67, 11]                             [ `[`
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                             list_entry: expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                               delegate: ternary_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                 delegate: or_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                   delegate: and_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                     delegate: compare_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                       delegate: add_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                         delegate: mult_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                           delegate: unary_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                             delegate: indexed_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                               root: primary_expr
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                                 literal
B: [ 877,  878] PS: [ 67, 11] PE: [ 67, 12]                                                   int `1`
B: [ 878,  879] PS: [ 67, 12] PE: [ 67, 13]                             , `,`
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                             list_entry: expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                               delegate: ternary_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                 delegate: or_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                   delegate: and_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                     delegate: compare_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                       delegate: add_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                         delegate: mult_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                           delegate: unary_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                             delegate: indexed_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                               root: primary_expr
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                                 literal
B: [ 880,  881] PS: [ 67, 14] PE: [ 67, 15]                                                   int `2`
B: [ 881,  882] PS: [ 67, 15] PE: [ 67, 16]                             , `,`
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                             list_entry: expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                               delegate: ternary_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                 delegate: or_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                   delegate: and_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                     delegate: compare_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                       delegate: add_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                         delegate: mult_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                           delegate: unary_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                             delegate: indexed_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                               root: primary_expr
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                                 literal
B: [ 883,  884] PS: [ 67, 17] PE: [ 67, 18]                                                   int `3`
B: [ 884,  885] PS: [ 67, 18] PE: [ 67, 19]                             ] `]`
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]   expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]     delegate: ternary_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]       delegate: or_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]         delegate: and_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]           delegate: compare_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]             delegate: add_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]               delegate: mult_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]                 delegate: unary_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]                   delegate: indexed_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]                     root: primary_expr
B: [ 886,  914] PS: [ 68,  0] PE: [ 68, 28]                       call
B: [ 886,  891] PS: [ 68,  0] PE: [ 68,  5]                         func: identifier `print`
B: [ 891,  892] PS: [ 68,  5] PE: [ 68,  6]                         ( `(`
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                         arg: expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                           delegate: ternary_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                             delegate: or_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                               delegate: and_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                                 delegate: compare_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                                   delegate: add_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                                     delegate: mult_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                                       delegate: unary_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                                         delegate: indexed_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                                           root: primary_expr
B: [ 892,  913] PS: [ 68,  6] PE: [ 68, 27]                                             call
B: [ 892,  896] PS: [ 68,  6] PE: [ 68, 10]                                               func: identifier `join`
B: [ 896,  897] PS: [ 68, 10] PE: [ 68, 11]                                               ( `(`
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                               arg: expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                 delegate: ternary_expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                   delegate: or_expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                     delegate: and_expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                       delegate: compare_expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                         delegate: add_expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                           delegate: mult_expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                             delegate: unary_expr
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                               delegate: var_path
B: [ 897,  904] PS: [ 68, 11] PE: [ 68, 18]                                                                 root: identifier `numbers`
B: [ 904,  905] PS: [ 68, 18] PE: [ 68, 19]                                               , `,`
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                               arg: expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                 delegate: ternary_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                   delegate: or_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                     delegate: and_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                       delegate: compare_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                         delegate: add_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                           delegate: mult_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                             delegate: unary_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                               delegate: indexed_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                                 root: primary_expr
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                                   literal
B: [ 906,  912] PS: [ 68, 20] PE: [ 68, 26]                                                                     string
B: [ 906,  907] PS: [ 68, 20] PE: [ 68, 21]                                                                       start: string_start `"`
B: [ 907,  911] PS: [ 68, 21] PE: [ 68, 25]                                                                       contents: string_contents
B: [ 907,  911] PS: [ 68, 21] PE: [ 68, 25]                                                                         content: string_content `... `
B: [ 911,  912] PS: [ 68, 25] PE: [ 68, 26]                                                                       end: string_end `"`
B: [ 912,  913] PS: [ 68, 26] PE: [ 68, 27]                                               ) `)`
B: [ 913,  914] PS: [ 68, 27] PE: [ 68, 28]                         ) `)`
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]   expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]     delegate: ternary_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]       delegate: or_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]         delegate: and_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]           delegate: compare_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]             delegate: add_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]               delegate: mult_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]                 delegate: unary_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]                   delegate: indexed_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]                     root: primary_expr
B: [ 915,  964] PS: [ 69,  0] PE: [ 69, 49]                       call
B: [ 915,  920] PS: [ 69,  0] PE: [ 69,  5]                         func: identifier `print`
B: [ 920,  921] PS: [ 69,  5] PE: [ 69,  6]                         ( `(`
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                         arg: expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                           delegate: ternary_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                             delegate: or_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                               delegate: and_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                                 delegate: compare_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                                   delegate: add_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                                     delegate: mult_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                                       delegate: unary_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                                         delegate: indexed_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                                           root: primary_expr
B: [ 921,  963] PS: [ 69,  6] PE: [ 69, 48]                                             call
B: [ 921,  925] PS: [ 69,  6] PE: [ 69, 10]                                               func: identifier `join`
B: [ 925,  926] PS: [ 69, 10] PE: [ 69, 11]                                               ( `(`
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                               arg: expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                 delegate: ternary_expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                   delegate: or_expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                     delegate: and_expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                       delegate: compare_expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                         delegate: add_expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                           delegate: mult_expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                             delegate: unary_expr
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                               delegate: var_path
B: [ 926,  933] PS: [ 69, 11] PE: [ 69, 18]                                                                 root: identifier `numbers`
B: [ 933,  934] PS: [ 69, 18] PE: [ 69, 19]                                               , `,`
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                               arg: expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                 delegate: ternary_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                   delegate: or_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                     delegate: and_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                       delegate: compare_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                         delegate: add_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                           delegate: mult_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                             delegate: unary_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                               delegate: indexed_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                                 root: primary_expr
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                                   literal
B: [ 935,  941] PS: [ 69, 20] PE: [ 69, 26]                                                                     string
B: [ 935,  936] PS: [ 69, 20] PE: [ 69, 21]                                                                       start: string_start `"`
B: [ 936,  940] PS: [ 69, 21] PE: [ 69, 25]                                                                       contents: string_contents
B: [ 936,  940] PS: [ 69, 21] PE: [ 69, 25]                                                                         content: string_content `... `
B: [ 940,  941] PS: [ 69, 25] PE: [ 69, 26]                                                                       end: string_end `"`
B: [ 941,  942] PS: [ 69, 26] PE: [ 69, 27]                                               , `,`
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                               arg: expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                 delegate: ternary_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                   delegate: or_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                     delegate: and_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                       delegate: compare_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                         delegate: add_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                           delegate: mult_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                             delegate: unary_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                               delegate: indexed_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                                 root: primary_expr
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                                   literal
B: [ 943,  962] PS: [ 69, 28] PE: [ 69, 47]                                                                     string
B: [ 943,  944] PS: [ 69, 28] PE: [ 69, 29]                                                                       start: string_start `"`
B: [ 944,  961] PS: [ 69, 29] PE: [ 69, 46]                                                                       contents: string_contents
B: [ 944,  961] PS: [ 69, 29] PE: [ 69, 46]                                                                         content: string_content `Okay I'll count. `
B: [ 961,  962] PS: [ 69, 46] PE: [ 69, 47]                                                                       end: string_end `"`
B: [ 962,  963] PS: [ 69, 47] PE: [ 69, 48]                                               ) `)`
B: [ 963,  964] PS: [ 69, 48] PE: [ 69, 49]                         ) `)`
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]   expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]     delegate: ternary_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]       delegate: or_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]         delegate: and_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]           delegate: compare_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]             delegate: add_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]               delegate: mult_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]                 delegate: unary_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]                   delegate: indexed_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]                     root: primary_expr
B: [ 965, 1019] PS: [ 70,  0] PE: [ 70, 54]                       call
B: [ 965,  970] PS: [ 70,  0] PE: [ 70,  5]                         func: identifier `print`
B: [ 970,  971] PS: [ 70,  5] PE: [ 70,  6]                         ( `(`
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                         arg: expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                           delegate: ternary_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                             delegate: or_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                               delegate: and_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                                 delegate: compare_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                                   delegate: add_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                                     delegate: mult_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                                       delegate: unary_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                                         delegate: indexed_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                                           root: primary_expr
B: [ 971, 1018] PS: [ 70,  6] PE: [ 70, 53]                                             call
B: [ 971,  975] PS: [ 70,  6] PE: [ 70, 10]                                               func: identifier `join`
B: [ 975,  976] PS: [ 70, 10] PE: [ 70, 11]                                               ( `(`
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                               arg: expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                 delegate: ternary_expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                   delegate: or_expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                     delegate: and_expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                       delegate: compare_expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                         delegate: add_expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                           delegate: mult_expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                             delegate: unary_expr
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                               delegate: var_path
B: [ 976,  983] PS: [ 70, 11] PE: [ 70, 18]                                                                 root: identifier `numbers`
B: [ 983,  984] PS: [ 70, 18] PE: [ 70, 19]                                               , `,`
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                               arg: expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                 delegate: ternary_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                   delegate: or_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                     delegate: and_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                       delegate: compare_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                         delegate: add_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                           delegate: mult_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                             delegate: unary_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                               delegate: indexed_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                                 root: primary_expr
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                                   literal
B: [ 985,  991] PS: [ 70, 20] PE: [ 70, 26]                                                                     string
B: [ 985,  986] PS: [ 70, 20] PE: [ 70, 21]                                                                       start: string_start `"`
B: [ 986,  990] PS: [ 70, 21] PE: [ 70, 25]                                                                       contents: string_contents
B: [ 986,  990] PS: [ 70, 21] PE: [ 70, 25]                                                                         content: string_content `... `
B: [ 990,  991] PS: [ 70, 25] PE: [ 70, 26]                                                                       end: string_end `"`
B: [ 991,  992] PS: [ 70, 26] PE: [ 70, 27]                                               , `,`
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                               arg: expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                 delegate: ternary_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                   delegate: or_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                     delegate: and_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                       delegate: compare_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                         delegate: add_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                           delegate: mult_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                             delegate: unary_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                               delegate: indexed_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                                 root: primary_expr
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                                   literal
B: [ 993, 1012] PS: [ 70, 28] PE: [ 70, 47]                                                                     string
B: [ 993,  994] PS: [ 70, 28] PE: [ 70, 29]                                                                       start: string_start `"`
B: [ 994, 1011] PS: [ 70, 29] PE: [ 70, 46]                                                                       contents: string_contents
B: [ 994, 1011] PS: [ 70, 29] PE: [ 70, 46]                                                                         content: string_content `Okay I'll count. `
B: [1011, 1012] PS: [ 70, 46] PE: [ 70, 47]                                                                       end: string_end `"`
B: [1012, 1013] PS: [ 70, 47] PE: [ 70, 48]                                               , `,`
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                               arg: expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                 delegate: ternary_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                   delegate: or_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                     delegate: and_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                       delegate: compare_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                         delegate: add_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                           delegate: mult_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                             delegate: unary_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                               delegate: indexed_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                                 root: primary_expr
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                                   literal
B: [1014, 1017] PS: [ 70, 49] PE: [ 70, 52]                                                                     string
B: [1014, 1015] PS: [ 70, 49] PE: [ 70, 50]                                                                       start: string_start `"`
B: [1015, 1016] PS: [ 70, 50] PE: [ 70, 51]                                                                       contents: string_contents
B: [1015, 1016] PS: [ 70, 50] PE: [ 70, 51]                                                                         content: string_content `!`
B: [1016, 1017] PS: [ 70, 51] PE: [ 70, 52]                                                                       end: string_end `"`
B: [1017, 1018] PS: [ 70, 52] PE: [ 70, 53]                                               ) `)`
B: [1018, 1019] PS: [ 70, 53] PE: [ 70, 54]                         ) `)`
B: [1021, 1032] PS: [ 72,  0] PE: [ 72, 11]   assign
B: [1021, 1022] PS: [ 72,  0] PE: [ 72,  1]     left: var_path
B: [1021, 1022] PS: [ 72,  0] PE: [ 72,  1]       root: identifier `a`
B: [1023, 1024] PS: [ 72,  2] PE: [ 72,  3]     = `=`
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]     right: expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]       delegate: ternary_expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]         delegate: or_expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]           delegate: and_expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]             delegate: compare_expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]               delegate: add_expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]                 delegate: mult_expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]                   delegate: unary_expr
B: [1025, 1032] PS: [ 72,  4] PE: [ 72, 11]                     delegate: var_path
B: [1025, 1029] PS: [ 72,  4] PE: [ 72,  8]                       root: identifier `nums`
B: [1029, 1030] PS: [ 72,  8] PE: [ 72,  9]                       [ `[`
B: [1030, 1031] PS: [ 72,  9] PE: [ 72, 10]                       indexing: slice
B: [1030, 1031] PS: [ 72,  9] PE: [ 72, 10]                         : `:`
B: [1031, 1032] PS: [ 72, 10] PE: [ 72, 11]                       ] `]`
B: [1033, 1045] PS: [ 73,  0] PE: [ 73, 12]   assign
B: [1033, 1034] PS: [ 73,  0] PE: [ 73,  1]     left: var_path
B: [1033, 1034] PS: [ 73,  0] PE: [ 73,  1]       root: identifier `a`
B: [1035, 1036] PS: [ 73,  2] PE: [ 73,  3]     = `=`
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]     right: expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]       delegate: ternary_expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]         delegate: or_expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]           delegate: and_expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]             delegate: compare_expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]               delegate: add_expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]                 delegate: mult_expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]                   delegate: unary_expr
B: [1037, 1045] PS: [ 73,  4] PE: [ 73, 12]                     delegate: var_path
B: [1037, 1041] PS: [ 73,  4] PE: [ 73,  8]                       root: identifier `nums`
B: [1041, 1042] PS: [ 73,  8] PE: [ 73,  9]                       [ `[`
B: [1042, 1044] PS: [ 73,  9] PE: [ 73, 11]                       indexing: slice
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                         start: expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                           delegate: ternary_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                             delegate: or_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                               delegate: and_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                 delegate: compare_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                   delegate: add_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                     delegate: mult_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                       delegate: unary_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                         delegate: indexed_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                           root: primary_expr
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                             literal
B: [1042, 1043] PS: [ 73,  9] PE: [ 73, 10]                                               int `1`
B: [1043, 1044] PS: [ 73, 10] PE: [ 73, 11]                         : `:`
B: [1044, 1045] PS: [ 73, 11] PE: [ 73, 12]                       ] `]`
B: [1046, 1059] PS: [ 74,  0] PE: [ 74, 13]   assign
B: [1046, 1047] PS: [ 74,  0] PE: [ 74,  1]     left: var_path
B: [1046, 1047] PS: [ 74,  0] PE: [ 74,  1]       root: identifier `a`
B: [1048, 1049] PS: [ 74,  2] PE: [ 74,  3]     = `=`
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]     right: expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]       delegate: ternary_expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]         delegate: or_expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]           delegate: and_expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]             delegate: compare_expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]               delegate: add_expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]                 delegate: mult_expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]                   delegate: unary_expr
B: [1050, 1059] PS: [ 74,  4] PE: [ 74, 13]                     delegate: var_path
B: [1050, 1054] PS: [ 74,  4] PE: [ 74,  8]                       root: identifier `nums`
B: [1054, 1055] PS: [ 74,  8] PE: [ 74,  9]                       [ `[`
B: [1055, 1058] PS: [ 74,  9] PE: [ 74, 12]                       indexing: slice
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                         start: expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                           delegate: ternary_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                             delegate: or_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                               delegate: and_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                 delegate: compare_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                   delegate: add_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                     delegate: mult_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                       delegate: unary_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                         delegate: indexed_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                           root: primary_expr
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                             literal
B: [1055, 1056] PS: [ 74,  9] PE: [ 74, 10]                                               int `1`
B: [1056, 1057] PS: [ 74, 10] PE: [ 74, 11]                         : `:`
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                         end: expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                           delegate: ternary_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                             delegate: or_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                               delegate: and_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                 delegate: compare_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                   delegate: add_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                     delegate: mult_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                       delegate: unary_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                         delegate: indexed_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                           root: primary_expr
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                             literal
B: [1057, 1058] PS: [ 74, 11] PE: [ 74, 12]                                               int `2`
B: [1058, 1059] PS: [ 74, 12] PE: [ 74, 13]                       ] `]`
B: [1060, 1072] PS: [ 75,  0] PE: [ 75, 12]   assign
B: [1060, 1061] PS: [ 75,  0] PE: [ 75,  1]     left: var_path
B: [1060, 1061] PS: [ 75,  0] PE: [ 75,  1]       root: identifier `a`
B: [1062, 1063] PS: [ 75,  2] PE: [ 75,  3]     = `=`
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]     right: expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]       delegate: ternary_expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]         delegate: or_expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]           delegate: and_expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]             delegate: compare_expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]               delegate: add_expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]                 delegate: mult_expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]                   delegate: unary_expr
B: [1064, 1072] PS: [ 75,  4] PE: [ 75, 12]                     delegate: var_path
B: [1064, 1068] PS: [ 75,  4] PE: [ 75,  8]                       root: identifier `nums`
B: [1068, 1069] PS: [ 75,  8] PE: [ 75,  9]                       [ `[`
B: [1069, 1071] PS: [ 75,  9] PE: [ 75, 11]                       indexing: slice
B: [1069, 1070] PS: [ 75,  9] PE: [ 75, 10]                         : `:`
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                         end: expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                           delegate: ternary_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                             delegate: or_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                               delegate: and_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                 delegate: compare_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                   delegate: add_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                     delegate: mult_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                       delegate: unary_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                         delegate: indexed_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                           root: primary_expr
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                             literal
B: [1070, 1071] PS: [ 75, 10] PE: [ 75, 11]                                               int `2`
B: [1071, 1072] PS: [ 75, 11] PE: [ 75, 12]                       ] `]`
B: [1074, 1129] PS: [ 77,  0] PE: [ 79,  1]   assign
B: [1074, 1084] PS: [ 77,  0] PE: [ 77, 10]     left: var_path
B: [1074, 1084] PS: [ 77,  0] PE: [ 77, 10]       root: identifier `my_headers`
B: [1085, 1086] PS: [ 77, 11] PE: [ 77, 12]     = `=`
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]     right: expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]       delegate: ternary_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]         delegate: or_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]           delegate: and_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]             delegate: compare_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]               delegate: add_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]                 delegate: mult_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]                   delegate: unary_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]                     delegate: indexed_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]                       root: primary_expr
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]                         literal
B: [1087, 1129] PS: [ 77, 13] PE: [ 79,  1]                           map
B: [1087, 1088] PS: [ 77, 13] PE: [ 77, 14]                             { `{`
B: [1093, 1126] PS: [ 78,  4] PE: [ 78, 37]                             map_entry: map_entry
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                               key: expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                 delegate: ternary_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                   delegate: or_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                     delegate: and_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                       delegate: compare_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                         delegate: add_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                           delegate: mult_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                             delegate: unary_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                               delegate: indexed_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                                 root: primary_expr
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                                   literal
B: [1093, 1108] PS: [ 78,  4] PE: [ 78, 19]                                                     string
B: [1093, 1094] PS: [ 78,  4] PE: [ 78,  5]                                                       start: string_start `"`
B: [1094, 1107] PS: [ 78,  5] PE: [ 78, 18]                                                       contents: string_contents
B: [1094, 1107] PS: [ 78,  5] PE: [ 78, 18]                                                         content: string_content `Authorization`
B: [1107, 1108] PS: [ 78, 18] PE: [ 78, 19]                                                       end: string_end `"`
B: [1108, 1109] PS: [ 78, 19] PE: [ 78, 20]                               : `:`
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                               value: expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                 delegate: ternary_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                   delegate: or_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                     delegate: and_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                       delegate: compare_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                         delegate: add_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                           delegate: mult_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                             delegate: unary_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                               delegate: indexed_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                                 root: primary_expr
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                                   literal
B: [1110, 1126] PS: [ 78, 21] PE: [ 78, 37]                                                     string
B: [1110, 1111] PS: [ 78, 21] PE: [ 78, 22]                                                       start: string_start `"`
B: [1111, 1125] PS: [ 78, 22] PE: [ 78, 36]                                                       contents: string_contents
B: [1111, 1118] PS: [ 78, 22] PE: [ 78, 29]                                                         content: string_content `Bearer `
B: [1118, 1125] PS: [ 78, 29] PE: [ 78, 36]                                                         interpolation: interpolation
B: [1118, 1119] PS: [ 78, 29] PE: [ 78, 30]                                                           { `{`
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                           expr: expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                             delegate: ternary_expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                               delegate: or_expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                                 delegate: and_expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                                   delegate: compare_expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                                     delegate: add_expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                                       delegate: mult_expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                                         delegate: unary_expr
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                                           delegate: var_path
B: [1119, 1124] PS: [ 78, 30] PE: [ 78, 35]                                                                             root: identifier `token`
B: [1124, 1125] PS: [ 78, 35] PE: [ 78, 36]                                                           } `}`
B: [1125, 1126] PS: [ 78, 36] PE: [ 78, 37]                                                       end: string_end `"`
B: [1126, 1127] PS: [ 78, 37] PE: [ 78, 38]                             , `,`
B: [1128, 1129] PS: [ 79,  0] PE: [ 79,  1]                             } `}`
B: [1130, 1181] PS: [ 80,  0] PE: [ 80, 51]   assign
B: [1130, 1138] PS: [ 80,  0] PE: [ 80,  8]     left: var_path
B: [1130, 1138] PS: [ 80,  0] PE: [ 80,  8]       root: identifier `response`
B: [1139, 1140] PS: [ 80,  9] PE: [ 80, 10]     = `=`
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]     right: expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]       delegate: ternary_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]         delegate: or_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]           delegate: and_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]             delegate: compare_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]               delegate: add_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]                 delegate: mult_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]                   delegate: unary_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]                     delegate: indexed_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]                       root: primary_expr
B: [1141, 1181] PS: [ 80, 11] PE: [ 80, 51]                         call
B: [1141, 1150] PS: [ 80, 11] PE: [ 80, 20]                           func: identifier `http_post`
B: [1150, 1151] PS: [ 80, 20] PE: [ 80, 21]                           ( `(`
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                           arg: expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                             delegate: ternary_expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                               delegate: or_expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                                 delegate: and_expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                                   delegate: compare_expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                                     delegate: add_expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                                       delegate: mult_expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                                         delegate: unary_expr
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                                           delegate: var_path
B: [1151, 1154] PS: [ 80, 21] PE: [ 80, 24]                                             root: identifier `url`
B: [1154, 1155] PS: [ 80, 24] PE: [ 80, 25]                           , `,`
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                           arg: expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                             delegate: ternary_expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                               delegate: or_expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                                 delegate: and_expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                                   delegate: compare_expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                                     delegate: add_expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                                       delegate: mult_expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                                         delegate: unary_expr
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                                           delegate: var_path
B: [1156, 1160] PS: [ 80, 26] PE: [ 80, 30]                                             root: identifier `body`
B: [1160, 1161] PS: [ 80, 30] PE: [ 80, 31]                           , `,`
B: [1162, 1180] PS: [ 80, 32] PE: [ 80, 50]                           named_arg: call_named_arg
B: [1162, 1169] PS: [ 80, 32] PE: [ 80, 39]                             name: identifier `headers`
B: [1169, 1170] PS: [ 80, 39] PE: [ 80, 40]                             = `=`
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                             value: expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                               delegate: ternary_expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                 delegate: or_expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                   delegate: and_expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                     delegate: compare_expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                       delegate: add_expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                         delegate: mult_expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                           delegate: unary_expr
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                             delegate: var_path
B: [1170, 1180] PS: [ 80, 40] PE: [ 80, 50]                                               root: identifier `my_headers`
B: [1180, 1181] PS: [ 80, 50] PE: [ 80, 51]                           ) `)`
B: [1183, 1251] PS: [ 82,  0] PE: [ 86,  3]   assign
B: [1183, 1187] PS: [ 82,  0] PE: [ 82,  4]     left: var_path
B: [1183, 1187] PS: [ 82,  0] PE: [ 82,  4]       root: identifier `text`
B: [1188, 1189] PS: [ 82,  5] PE: [ 82,  6]     = `=`
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]     right: expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]       delegate: ternary_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]         delegate: or_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]           delegate: and_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]             delegate: compare_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]               delegate: add_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]                 delegate: mult_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]                   delegate: unary_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]                     delegate: indexed_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]                       root: primary_expr
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]                         literal
B: [1190, 1251] PS: [ 82,  7] PE: [ 86,  3]                           string
B: [1190, 1194] PS: [ 82,  7] PE: [ 83,  0]                             start: string_start `"""\n`
B: [1194, 1247] PS: [ 83,  0] PE: [ 85, 26]                             contents: string_contents
B: [1194, 1204] PS: [ 83,  0] PE: [ 83, 10]                               content: string_content `This is an`
B: [1204, 1205] PS: [ 83, 10] PE: [ 84,  0]                               content: string_content `\n`
B: [1205, 1220] PS: [ 84,  0] PE: [ 84, 15]                               content: string_content `example of text`
B: [1220, 1221] PS: [ 84, 15] PE: [ 85,  0]                               content: string_content `\n`
B: [1221, 1247] PS: [ 85,  0] PE: [ 85, 26]                               content: string_content `that "may contain quotes"!`
B: [1247, 1251] PS: [ 85, 26] PE: [ 86,  3]                             end: string_end `\n"""`
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]   expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]     delegate: ternary_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]       delegate: or_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]         delegate: and_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]           delegate: compare_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]             delegate: add_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]               delegate: mult_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]                 delegate: unary_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]                   delegate: indexed_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]                     root: primary_expr
B: [1252, 1263] PS: [ 87,  0] PE: [ 87, 11]                       call
B: [1252, 1257] PS: [ 87,  0] PE: [ 87,  5]                         func: identifier `print`
B: [1257, 1258] PS: [ 87,  5] PE: [ 87,  6]                         ( `(`
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                         arg: expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                           delegate: ternary_expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                             delegate: or_expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                               delegate: and_expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                                 delegate: compare_expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                                   delegate: add_expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                                     delegate: mult_expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                                       delegate: unary_expr
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                                         delegate: var_path
B: [1258, 1262] PS: [ 87,  6] PE: [ 87, 10]                                           root: identifier `text`
B: [1262, 1263] PS: [ 87, 10] PE: [ 87, 11]                         ) `)`
B: [1265, 1288] PS: [ 89,  0] PE: [ 89, 23]   assign
B: [1265, 1269] PS: [ 89,  0] PE: [ 89,  4]     left: var_path
B: [1265, 1269] PS: [ 89,  0] PE: [ 89,  4]       root: identifier `text`
B: [1270, 1271] PS: [ 89,  5] PE: [ 89,  6]     = `=`
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]     right: expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]       delegate: ternary_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]         delegate: or_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]           delegate: and_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]             delegate: compare_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]               delegate: add_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]                 delegate: mult_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]                   delegate: unary_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]                     delegate: indexed_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]                       root: primary_expr
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]                         literal
B: [1272, 1288] PS: [ 89,  7] PE: [ 89, 23]                           string
B: [1272, 1274] PS: [ 89,  7] PE: [ 89,  9]                             start: string_start `r"`
B: [1274, 1287] PS: [ 89,  9] PE: [ 89, 22]                             contents: string_contents
B: [1274, 1287] PS: [ 89,  9] PE: [ 89, 22]                               content: string_content `Hello\n{name}`
B: [1287, 1288] PS: [ 89, 22] PE: [ 89, 23]                             end: string_end `"`
B: [1289, 1312] PS: [ 90,  0] PE: [ 90, 23]   assign
B: [1289, 1293] PS: [ 90,  0] PE: [ 90,  4]     left: var_path
B: [1289, 1293] PS: [ 90,  0] PE: [ 90,  4]       root: identifier `text`
B: [1294, 1295] PS: [ 90,  5] PE: [ 90,  6]     = `=`
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]     right: expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]       delegate: ternary_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]         delegate: or_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]           delegate: and_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]             delegate: compare_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]               delegate: add_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]                 delegate: mult_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]                   delegate: unary_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]                     delegate: indexed_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]                       root: primary_expr
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]                         literal
B: [1296, 1312] PS: [ 90,  7] PE: [ 90, 23]                           string
B: [1296, 1298] PS: [ 90,  7] PE: [ 90,  9]                             start: string_start `r'`
B: [1298, 1311] PS: [ 90,  9] PE: [ 90, 22]                             contents: string_contents
B: [1298, 1311] PS: [ 90,  9] PE: [ 90, 22]                               content: string_content `Hello\n{name}`
B: [1311, 1312] PS: [ 90, 22] PE: [ 90, 23]                             end: string_end `'`
B: [1313, 1336] PS: [ 91,  0] PE: [ 91, 23]   assign
B: [1313, 1317] PS: [ 91,  0] PE: [ 91,  4]     left: var_path
B: [1313, 1317] PS: [ 91,  0] PE: [ 91,  4]       root: identifier `text`
B: [1318, 1319] PS: [ 91,  5] PE: [ 91,  6]     = `=`
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]     right: expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]       delegate: ternary_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]         delegate: or_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]           delegate: and_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]             delegate: compare_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]               delegate: add_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]                 delegate: mult_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]                   delegate: unary_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]                     delegate: indexed_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]                       root: primary_expr
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]                         literal
B: [1320, 1336] PS: [ 91,  7] PE: [ 91, 23]                           string
B: [1320, 1322] PS: [ 91,  7] PE: [ 91,  9]                             start: string_start `r``
B: [1322, 1335] PS: [ 91,  9] PE: [ 91, 22]                             contents: string_contents
B: [1322, 1335] PS: [ 91,  9] PE: [ 91, 22]                               content: string_content `Hello\n{name}`
B: [1335, 1336] PS: [ 91, 22] PE: [ 91, 23]                             end: string_end ```
B: [1338, 1406] PS: [ 93,  0] PE: [ 93, 68]   assign
B: [1338, 1341] PS: [ 93,  0] PE: [ 93,  3]     lefts: var_path
B: [1338, 1341] PS: [ 93,  0] PE: [ 93,  3]       root: identifier `url`
B: [1341, 1342] PS: [ 93,  3] PE: [ 93,  4]     , `,`
B: [1343, 1347] PS: [ 93,  5] PE: [ 93,  9]     lefts: var_path
B: [1343, 1347] PS: [ 93,  5] PE: [ 93,  9]       root: identifier `name`
B: [1348, 1349] PS: [ 93, 10] PE: [ 93, 11]     = `=`
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]     right: expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]       delegate: ternary_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]         delegate: or_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]           delegate: and_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]             delegate: compare_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]               delegate: add_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]                 delegate: mult_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]                   delegate: unary_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]                     delegate: indexed_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]                       root: primary_expr
B: [1350, 1406] PS: [ 93, 12] PE: [ 93, 68]                         call
B: [1350, 1368] PS: [ 93, 12] PE: [ 93, 30]                           func: identifier `pick_from_resource`
B: [1368, 1369] PS: [ 93, 30] PE: [ 93, 31]                           ( `(`
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                           arg: expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                             delegate: ternary_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                               delegate: or_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                 delegate: and_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                   delegate: compare_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                     delegate: add_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                       delegate: mult_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                         delegate: unary_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                           delegate: indexed_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                             root: primary_expr
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                               literal
B: [1369, 1396] PS: [ 93, 31] PE: [ 93, 58]                                                 string
B: [1369, 1370] PS: [ 93, 31] PE: [ 93, 32]                                                   start: string_start `"`
B: [1370, 1395] PS: [ 93, 32] PE: [ 93, 57]                                                   contents: string_contents
B: [1370, 1395] PS: [ 93, 32] PE: [ 93, 57]                                                     content: string_content `./resources/websites.json`
B: [1395, 1396] PS: [ 93, 57] PE: [ 93, 58]                                                   end: string_end `"`
B: [1396, 1397] PS: [ 93, 58] PE: [ 93, 59]                           , `,`
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                           arg: expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                             delegate: ternary_expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                               delegate: or_expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                                 delegate: and_expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                                   delegate: compare_expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                                     delegate: add_expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                                       delegate: mult_expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                                         delegate: unary_expr
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                                           delegate: var_path
B: [1398, 1405] PS: [ 93, 60] PE: [ 93, 67]                                             root: identifier `website`
B: [1405, 1406] PS: [ 93, 67] PE: [ 93, 68]                           ) `)`
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]   expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]     delegate: ternary_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]       delegate: or_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]         delegate: and_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]           delegate: compare_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]             delegate: add_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]               delegate: mult_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]                 delegate: unary_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]                   delegate: indexed_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]                     root: primary_expr
B: [1407, 1440] PS: [ 94,  0] PE: [ 94, 33]                       call
B: [1407, 1412] PS: [ 94,  0] PE: [ 94,  5]                         func: identifier `print`
B: [1412, 1413] PS: [ 94,  5] PE: [ 94,  6]                         ( `(`
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                         arg: expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                           delegate: ternary_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                             delegate: or_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                               delegate: and_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                 delegate: compare_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                   delegate: add_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                     delegate: mult_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                       delegate: unary_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                         delegate: indexed_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                           root: primary_expr
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                             literal
B: [1413, 1439] PS: [ 94,  6] PE: [ 94, 32]                                               string
B: [1413, 1414] PS: [ 94,  6] PE: [ 94,  7]                                                 start: string_start `"`
B: [1414, 1438] PS: [ 94,  7] PE: [ 94, 31]                                                 contents: string_contents
B: [1414, 1419] PS: [ 94,  7] PE: [ 94, 12]                                                   content: string_content `url: `
B: [1419, 1424] PS: [ 94, 12] PE: [ 94, 17]                                                   interpolation: interpolation
B: [1419, 1420] PS: [ 94, 12] PE: [ 94, 13]                                                     { `{`
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                     expr: expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                       delegate: ternary_expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                         delegate: or_expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                           delegate: and_expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                             delegate: compare_expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                               delegate: add_expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                                 delegate: mult_expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                                   delegate: unary_expr
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                                     delegate: var_path
B: [1420, 1423] PS: [ 94, 13] PE: [ 94, 16]                                                                       root: identifier `url`
B: [1423, 1424] PS: [ 94, 16] PE: [ 94, 17]                                                     } `}`
B: [1424, 1432] PS: [ 94, 17] PE: [ 94, 25]                                                   content: string_content `, name: `
B: [1432, 1438] PS: [ 94, 25] PE: [ 94, 31]                                                   interpolation: interpolation
B: [1432, 1433] PS: [ 94, 25] PE: [ 94, 26]                                                     { `{`
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                     expr: expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                       delegate: ternary_expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                         delegate: or_expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                           delegate: and_expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                             delegate: compare_expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                               delegate: add_expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                                 delegate: mult_expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                                   delegate: unary_expr
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                                     delegate: var_path
B: [1433, 1437] PS: [ 94, 26] PE: [ 94, 30]                                                                       root: identifier `name`
B: [1437, 1438] PS: [ 94, 30] PE: [ 94, 31]                                                     } `}`
B: [1438, 1439] PS: [ 94, 31] PE: [ 94, 32]                                                 end: string_end `"`
B: [1439, 1440] PS: [ 94, 32] PE: [ 94, 33]                         ) `)`
B: [1442, 1448] PS: [ 96,  0] PE: [ 96,  6]   shell_stmt
B: [1442, 1448] PS: [ 96,  0] PE: [ 96,  6]     shell_cmd: critical_shell_cmd
B: [1442, 1444] PS: [ 96,  0] PE: [ 96,  2]       $! `$!`
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]       command: expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]         delegate: ternary_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]           delegate: or_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]             delegate: and_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]               delegate: compare_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]                 delegate: add_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]                   delegate: mult_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]                     delegate: unary_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]                       delegate: indexed_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]                         root: primary_expr
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]                           literal
B: [1444, 1448] PS: [ 96,  2] PE: [ 96,  6]                             string
B: [1444, 1445] PS: [ 96,  2] PE: [ 96,  3]                               start: string_start ```
B: [1445, 1447] PS: [ 96,  3] PE: [ 96,  5]                               contents: string_contents
B: [1445, 1447] PS: [ 96,  3] PE: [ 96,  5]                                 content: string_content `ls`
B: [1447, 1448] PS: [ 96,  5] PE: [ 96,  6]                               end: string_end ```
B: [1450, 1468] PS: [ 98,  0] PE: [ 98, 18]   assign
B: [1450, 1453] PS: [ 98,  0] PE: [ 98,  3]     left: var_path
B: [1450, 1453] PS: [ 98,  0] PE: [ 98,  3]       root: identifier `cmd`
B: [1454, 1455] PS: [ 98,  4] PE: [ 98,  5]     = `=`
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]     right: expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]       delegate: ternary_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]         delegate: or_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]           delegate: and_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]             delegate: compare_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]               delegate: add_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]                 delegate: mult_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]                   delegate: unary_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]                     delegate: indexed_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]                       root: primary_expr
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]                         literal
B: [1456, 1468] PS: [ 98,  6] PE: [ 98, 18]                           string
B: [1456, 1457] PS: [ 98,  6] PE: [ 98,  7]                             start: string_start ```
B: [1457, 1467] PS: [ 98,  7] PE: [ 98, 17]                             contents: string_contents
B: [1457, 1462] PS: [ 98,  7] PE: [ 98, 12]                               content: string_content `curl `
B: [1462, 1467] PS: [ 98, 12] PE: [ 98, 17]                               interpolation: interpolation
B: [1462, 1463] PS: [ 98, 12] PE: [ 98, 13]                                 { `{`
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                 expr: expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                   delegate: ternary_expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                     delegate: or_expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                       delegate: and_expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                         delegate: compare_expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                           delegate: add_expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                             delegate: mult_expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                               delegate: unary_expr
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                                 delegate: var_path
B: [1463, 1466] PS: [ 98, 13] PE: [ 98, 16]                                                   root: identifier `url`
B: [1466, 1467] PS: [ 98, 16] PE: [ 98, 17]                                 } `}`
B: [1467, 1468] PS: [ 98, 17] PE: [ 98, 18]                             end: string_end ```
B: [1469, 1512] PS: [ 99,  0] PE: [101, 32]   shell_stmt
B: [1469, 1512] PS: [ 99,  0] PE: [101, 32]     shell_cmd: checked_shell_cmd
B: [1469, 1470] PS: [ 99,  0] PE: [ 99,  1]       $ `$`
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]       command: expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]         delegate: ternary_expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]           delegate: or_expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]             delegate: and_expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]               delegate: compare_expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]                 delegate: add_expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]                   delegate: mult_expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]                     delegate: unary_expr
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]                       delegate: var_path
B: [1470, 1473] PS: [ 99,  1] PE: [ 99,  4]                         root: identifier `cmd`
B: [1474, 1478] PS: [100,  0] PE: [100,  4]       response: fail `fail`
B: [1478, 1479] PS: [100,  4] PE: [100,  5]       : `:`
B: [1484, 1512] PS: [101,  4] PE: [101, 32]       stmt: expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]         delegate: ternary_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]           delegate: or_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]             delegate: and_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]               delegate: compare_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]                 delegate: add_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]                   delegate: mult_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]                     delegate: unary_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]                       delegate: indexed_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]                         root: primary_expr
B: [1484, 1512] PS: [101,  4] PE: [101, 32]                           call
B: [1484, 1489] PS: [101,  4] PE: [101,  9]                             func: identifier `print`
B: [1489, 1490] PS: [101,  9] PE: [101, 10]                             ( `(`
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                             arg: expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                               delegate: ternary_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                 delegate: or_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                   delegate: and_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                     delegate: compare_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                       delegate: add_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                         delegate: mult_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                           delegate: unary_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                             delegate: indexed_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                               root: primary_expr
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                                 literal
B: [1490, 1511] PS: [101, 10] PE: [101, 31]                                                   string
B: [1490, 1491] PS: [101, 10] PE: [101, 11]                                                     start: string_start `"`
B: [1491, 1510] PS: [101, 11] PE: [101, 30]                                                     contents: string_contents
B: [1491, 1510] PS: [101, 11] PE: [101, 30]                                                       content: string_content `Oh no, curl failed!`
B: [1510, 1511] PS: [101, 30] PE: [101, 31]                                                     end: string_end `"`
B: [1511, 1512] PS: [101, 31] PE: [101, 32]                             ) `)`
B: [1514, 1560] PS: [103,  0] PE: [105, 32]   shell_stmt
B: [1514, 1560] PS: [103,  0] PE: [105, 32]     shell_cmd: checked_shell_cmd
B: [1514, 1515] PS: [103,  0] PE: [103,  1]       $ `$`
B: [1515, 1518] PS: [103,  1] PE: [103,  4]       command: expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]         delegate: ternary_expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]           delegate: or_expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]             delegate: and_expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]               delegate: compare_expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]                 delegate: add_expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]                   delegate: mult_expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]                     delegate: unary_expr
B: [1515, 1518] PS: [103,  1] PE: [103,  4]                       delegate: var_path
B: [1515, 1518] PS: [103,  1] PE: [103,  4]                         root: identifier `cmd`
B: [1519, 1526] PS: [104,  0] PE: [104,  7]       response: recover `recover`
B: [1526, 1527] PS: [104,  7] PE: [104,  8]       : `:`
B: [1532, 1560] PS: [105,  4] PE: [105, 32]       stmt: expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]         delegate: ternary_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]           delegate: or_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]             delegate: and_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]               delegate: compare_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]                 delegate: add_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]                   delegate: mult_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]                     delegate: unary_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]                       delegate: indexed_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]                         root: primary_expr
B: [1532, 1560] PS: [105,  4] PE: [105, 32]                           call
B: [1532, 1537] PS: [105,  4] PE: [105,  9]                             func: identifier `print`
B: [1537, 1538] PS: [105,  9] PE: [105, 10]                             ( `(`
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                             arg: expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                               delegate: ternary_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                 delegate: or_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                   delegate: and_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                     delegate: compare_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                       delegate: add_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                         delegate: mult_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                           delegate: unary_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                             delegate: indexed_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                               root: primary_expr
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                                 literal
B: [1538, 1559] PS: [105, 10] PE: [105, 31]                                                   string
B: [1538, 1539] PS: [105, 10] PE: [105, 11]                                                     start: string_start `"`
B: [1539, 1558] PS: [105, 11] PE: [105, 30]                                                     contents: string_contents
B: [1539, 1558] PS: [105, 11] PE: [105, 30]                                                       content: string_content `Oh no, curl failed!`
B: [1558, 1559] PS: [105, 30] PE: [105, 31]                                                     end: string_end `"`
B: [1559, 1560] PS: [105, 31] PE: [105, 32]                             ) `)`
B: [1562, 1574] PS: [107,  0] PE: [107, 12]   shell_stmt
B: [1562, 1574] PS: [107,  0] PE: [107, 12]     shell_cmd: unsafe_shell_cmd
B: [1562, 1568] PS: [107,  0] PE: [107,  6]       unsafe_mod: unsafe `unsafe`
B: [1569, 1570] PS: [107,  7] PE: [107,  8]       $ `$`
B: [1570, 1574] PS: [107,  8] PE: [107, 12]       command: expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]         delegate: ternary_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]           delegate: or_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]             delegate: and_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]               delegate: compare_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]                 delegate: add_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]                   delegate: mult_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]                     delegate: unary_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]                       delegate: indexed_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]                         root: primary_expr
B: [1570, 1574] PS: [107,  8] PE: [107, 12]                           literal
B: [1570, 1574] PS: [107,  8] PE: [107, 12]                             string
B: [1570, 1571] PS: [107,  8] PE: [107,  9]                               start: string_start ```
B: [1571, 1573] PS: [107,  9] PE: [107, 11]                               contents: string_contents
B: [1571, 1573] PS: [107,  9] PE: [107, 11]                                 content: string_content `ls`
B: [1573, 1574] PS: [107, 11] PE: [107, 12]                               end: string_end ```
B: [1576, 1588] PS: [109,  0] PE: [109, 12]   shell_stmt
B: [1576, 1580] PS: [109,  0] PE: [109,  4]     left: var_path
B: [1576, 1580] PS: [109,  0] PE: [109,  4]       root: identifier `code`
B: [1581, 1582] PS: [109,  5] PE: [109,  6]     = `=`
B: [1583, 1588] PS: [109,  7] PE: [109, 12]     shell_cmd: critical_shell_cmd
B: [1583, 1585] PS: [109,  7] PE: [109,  9]       $! `$!`
B: [1585, 1588] PS: [109,  9] PE: [109, 12]       command: expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]         delegate: ternary_expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]           delegate: or_expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]             delegate: and_expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]               delegate: compare_expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]                 delegate: add_expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]                   delegate: mult_expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]                     delegate: unary_expr
B: [1585, 1588] PS: [109,  9] PE: [109, 12]                       delegate: var_path
B: [1585, 1588] PS: [109,  9] PE: [109, 12]                         root: identifier `cmd`
B: [1590, 1610] PS: [111,  0] PE: [111, 20]   shell_stmt
B: [1590, 1594] PS: [111,  0] PE: [111,  4]     lefts: var_path
B: [1590, 1594] PS: [111,  0] PE: [111,  4]       root: identifier `code`
B: [1594, 1595] PS: [111,  4] PE: [111,  5]     , `,`
B: [1596, 1602] PS: [111,  6] PE: [111, 12]     lefts: var_path
B: [1596, 1602] PS: [111,  6] PE: [111, 12]       root: identifier `stdout`
B: [1603, 1604] PS: [111, 13] PE: [111, 14]     = `=`
B: [1605, 1610] PS: [111, 15] PE: [111, 20]     shell_cmd: critical_shell_cmd
B: [1605, 1607] PS: [111, 15] PE: [111, 17]       $! `$!`
B: [1607, 1610] PS: [111, 17] PE: [111, 20]       command: expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]         delegate: ternary_expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]           delegate: or_expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]             delegate: and_expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]               delegate: compare_expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]                 delegate: add_expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]                   delegate: mult_expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]                     delegate: unary_expr
B: [1607, 1610] PS: [111, 17] PE: [111, 20]                       delegate: var_path
B: [1607, 1610] PS: [111, 17] PE: [111, 20]                         root: identifier `cmd`
B: [1612, 1640] PS: [113,  0] PE: [113, 28]   shell_stmt
B: [1612, 1616] PS: [113,  0] PE: [113,  4]     lefts: var_path
B: [1612, 1616] PS: [113,  0] PE: [113,  4]       root: identifier `code`
B: [1616, 1617] PS: [113,  4] PE: [113,  5]     , `,`
B: [1618, 1624] PS: [113,  6] PE: [113, 12]     lefts: var_path
B: [1618, 1624] PS: [113,  6] PE: [113, 12]       root: identifier `stdout`
B: [1624, 1625] PS: [113, 12] PE: [113, 13]     , `,`
B: [1626, 1632] PS: [113, 14] PE: [113, 20]     lefts: var_path
B: [1626, 1632] PS: [113, 14] PE: [113, 20]       root: identifier `stderr`
B: [1633, 1634] PS: [113, 21] PE: [113, 22]     = `=`
B: [1635, 1640] PS: [113, 23] PE: [113, 28]     shell_cmd: critical_shell_cmd
B: [1635, 1637] PS: [113, 23] PE: [113, 25]       $! `$!`
B: [1637, 1640] PS: [113, 25] PE: [113, 28]       command: expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]         delegate: ternary_expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]           delegate: or_expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]             delegate: and_expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]               delegate: compare_expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]                 delegate: add_expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]                   delegate: mult_expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]                     delegate: unary_expr
B: [1637, 1640] PS: [113, 25] PE: [113, 28]                       delegate: var_path
B: [1637, 1640] PS: [113, 25] PE: [113, 28]                         root: identifier `cmd`
B: [1642, 1662] PS: [115,  0] PE: [115, 20]   shell_stmt
B: [1642, 1643] PS: [115,  0] PE: [115,  1]     lefts: var_path
B: [1642, 1643] PS: [115,  0] PE: [115,  1]       root: identifier `_`
B: [1643, 1644] PS: [115,  1] PE: [115,  2]     , `,`
B: [1645, 1646] PS: [115,  3] PE: [115,  4]     lefts: var_path
B: [1645, 1646] PS: [115,  3] PE: [115,  4]       root: identifier `_`
B: [1646, 1647] PS: [115,  4] PE: [115,  5]     , `,`
B: [1648, 1654] PS: [115,  6] PE: [115, 12]     lefts: var_path
B: [1648, 1654] PS: [115,  6] PE: [115, 12]       root: identifier `stderr`
B: [1655, 1656] PS: [115, 13] PE: [115, 14]     = `=`
B: [1657, 1662] PS: [115, 15] PE: [115, 20]     shell_cmd: critical_shell_cmd
B: [1657, 1659] PS: [115, 15] PE: [115, 17]       $! `$!`
B: [1659, 1662] PS: [115, 17] PE: [115, 20]       command: expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]         delegate: ternary_expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]           delegate: or_expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]             delegate: and_expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]               delegate: compare_expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]                 delegate: add_expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]                   delegate: mult_expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]                     delegate: unary_expr
B: [1659, 1662] PS: [115, 17] PE: [115, 20]                       delegate: var_path
B: [1659, 1662] PS: [115, 17] PE: [115, 20]                         root: identifier `cmd`
B: [1664, 1694] PS: [117,  0] PE: [117, 30]   shell_stmt
B: [1664, 1694] PS: [117,  0] PE: [117, 30]     shell_cmd: critical_shell_cmd
B: [1664, 1669] PS: [117,  0] PE: [117,  5]       quiet_mod: quiet `quiet`
B: [1670, 1672] PS: [117,  6] PE: [117,  8]       $! `$!`
B: [1672, 1694] PS: [117,  8] PE: [117, 30]       command: expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]         delegate: ternary_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]           delegate: or_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]             delegate: and_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]               delegate: compare_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]                 delegate: add_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]                   delegate: mult_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]                     delegate: unary_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]                       delegate: indexed_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]                         root: primary_expr
B: [1672, 1694] PS: [117,  8] PE: [117, 30]                           literal
B: [1672, 1694] PS: [117,  8] PE: [117, 30]                             string
B: [1672, 1673] PS: [117,  8] PE: [117,  9]                               start: string_start ```
B: [1673, 1693] PS: [117,  9] PE: [117, 29]                               contents: string_contents
B: [1673, 1679] PS: [117,  9] PE: [117, 15]                                 content: string_content `touch `
B: [1679, 1689] PS: [117, 15] PE: [117, 25]                                 interpolation: interpolation
B: [1679, 1680] PS: [117, 15] PE: [117, 16]                                   { `{`
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                   expr: expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                     delegate: ternary_expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                       delegate: or_expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                         delegate: and_expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                           delegate: compare_expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                             delegate: add_expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                               delegate: mult_expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                                 delegate: unary_expr
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                                   delegate: var_path
B: [1680, 1688] PS: [117, 16] PE: [117, 24]                                                     root: identifier `filename`
B: [1688, 1689] PS: [117, 24] PE: [117, 25]                                   } `}`
B: [1689, 1693] PS: [117, 25] PE: [117, 29]                                 content: string_content `.txt`
B: [1693, 1694] PS: [117, 29] PE: [117, 30]                               end: string_end ```
B: [1696, 1732] PS: [119,  0] PE: [119, 36]   shell_stmt
B: [1696, 1732] PS: [119,  0] PE: [119, 36]     shell_cmd: unsafe_shell_cmd
B: [1696, 1702] PS: [119,  0] PE: [119,  6]       unsafe_mod: unsafe `unsafe`
B: [1703, 1708] PS: [119,  7] PE: [119, 12]       quiet_mod: quiet `quiet`
B: [1709, 1710] PS: [119, 13] PE: [119, 14]       $ `$`
B: [1710, 1732] PS: [119, 14] PE: [119, 36]       command: expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]         delegate: ternary_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]           delegate: or_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]             delegate: and_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]               delegate: compare_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]                 delegate: add_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]                   delegate: mult_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]                     delegate: unary_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]                       delegate: indexed_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]                         root: primary_expr
B: [1710, 1732] PS: [119, 14] PE: [119, 36]                           literal
B: [1710, 1732] PS: [119, 14] PE: [119, 36]                             string
B: [1710, 1711] PS: [119, 14] PE: [119, 15]                               start: string_start ```
B: [1711, 1731] PS: [119, 15] PE: [119, 35]                               contents: string_contents
B: [1711, 1717] PS: [119, 15] PE: [119, 21]                                 content: string_content `touch `
B: [1717, 1727] PS: [119, 21] PE: [119, 31]                                 interpolation: interpolation
B: [1717, 1718] PS: [119, 21] PE: [119, 22]                                   { `{`
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                   expr: expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                     delegate: ternary_expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                       delegate: or_expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                         delegate: and_expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                           delegate: compare_expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                             delegate: add_expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                               delegate: mult_expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                                 delegate: unary_expr
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                                   delegate: var_path
B: [1718, 1726] PS: [119, 22] PE: [119, 30]                                                     root: identifier `filename`
B: [1726, 1727] PS: [119, 30] PE: [119, 31]                                   } `}`
B: [1727, 1731] PS: [119, 31] PE: [119, 35]                                 content: string_content `.txt`
B: [1731, 1732] PS: [119, 35] PE: [119, 36]                               end: string_end ```
B: [1733, 1769] PS: [120,  0] PE: [120, 36]   shell_stmt
B: [1733, 1769] PS: [120,  0] PE: [120, 36]     shell_cmd: unsafe_shell_cmd
B: [1733, 1738] PS: [120,  0] PE: [120,  5]       quiet_mod: quiet `quiet`
B: [1739, 1745] PS: [120,  6] PE: [120, 12]       unsafe_mod: unsafe `unsafe`
B: [1746, 1747] PS: [120, 13] PE: [120, 14]       $ `$`
B: [1747, 1769] PS: [120, 14] PE: [120, 36]       command: expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]         delegate: ternary_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]           delegate: or_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]             delegate: and_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]               delegate: compare_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]                 delegate: add_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]                   delegate: mult_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]                     delegate: unary_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]                       delegate: indexed_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]                         root: primary_expr
B: [1747, 1769] PS: [120, 14] PE: [120, 36]                           literal
B: [1747, 1769] PS: [120, 14] PE: [120, 36]                             string
B: [1747, 1748] PS: [120, 14] PE: [120, 15]                               start: string_start ```
B: [1748, 1768] PS: [120, 15] PE: [120, 35]                               contents: string_contents
B: [1748, 1754] PS: [120, 15] PE: [120, 21]                                 content: string_content `touch `
B: [1754, 1764] PS: [120, 21] PE: [120, 31]                                 interpolation: interpolation
B: [1754, 1755] PS: [120, 21] PE: [120, 22]                                   { `{`
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                   expr: expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                     delegate: ternary_expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                       delegate: or_expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                         delegate: and_expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                           delegate: compare_expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                             delegate: add_expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                               delegate: mult_expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                                 delegate: unary_expr
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                                   delegate: var_path
B: [1755, 1763] PS: [120, 22] PE: [120, 30]                                                     root: identifier `filename`
B: [1763, 1764] PS: [120, 30] PE: [120, 31]                                   } `}`
B: [1764, 1768] PS: [120, 31] PE: [120, 35]                                 content: string_content `.txt`
B: [1768, 1769] PS: [120, 35] PE: [120, 36]                               end: string_end ```
B: [1771, 1837] PS: [122,  0] PE: [124, 24]   defer_block
B: [1771, 1776] PS: [122,  0] PE: [122,  5]     keyword: defer `defer`
B: [1776, 1777] PS: [122,  5] PE: [122,  6]     : `:`
B: [1782, 1812] PS: [123,  4] PE: [123, 34]     stmt: shell_stmt
B: [1782, 1812] PS: [123,  4] PE: [123, 34]       shell_cmd: critical_shell_cmd
B: [1782, 1784] PS: [123,  4] PE: [123,  6]         $! `$!`
B: [1784, 1812] PS: [123,  6] PE: [123, 34]         command: expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]           delegate: ternary_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]             delegate: or_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]               delegate: and_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                 delegate: compare_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                   delegate: add_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                     delegate: mult_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                       delegate: unary_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                         delegate: indexed_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                           root: primary_expr
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                             literal
B: [1784, 1812] PS: [123,  6] PE: [123, 34]                               string
B: [1784, 1785] PS: [123,  6] PE: [123,  7]                                 start: string_start ```
B: [1785, 1811] PS: [123,  7] PE: [123, 33]                                 contents: string_contents
B: [1785, 1811] PS: [123,  7] PE: [123, 33]                                   content: string_content `mv notes-tmp.txt notes.txt`
B: [1811, 1812] PS: [123, 33] PE: [123, 34]                                 end: string_end ```
B: [1817, 1837] PS: [124,  4] PE: [124, 24]     stmt: expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]       delegate: ternary_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]         delegate: or_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]           delegate: and_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]             delegate: compare_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]               delegate: add_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]                 delegate: mult_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]                   delegate: unary_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]                     delegate: indexed_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]                       root: primary_expr
B: [1817, 1837] PS: [124,  4] PE: [124, 24]                         call
B: [1817, 1822] PS: [124,  4] PE: [124,  9]                           func: identifier `print`
B: [1822, 1823] PS: [124,  9] PE: [124, 10]                           ( `(`
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                           arg: expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                             delegate: ternary_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                               delegate: or_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                 delegate: and_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                   delegate: compare_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                     delegate: add_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                       delegate: mult_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                         delegate: unary_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                           delegate: indexed_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                             root: primary_expr
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                               literal
B: [1823, 1836] PS: [124, 10] PE: [124, 23]                                                 string
B: [1823, 1824] PS: [124, 10] PE: [124, 11]                                                   start: string_start `"`
B: [1824, 1835] PS: [124, 11] PE: [124, 22]                                                   contents: string_contents
B: [1824, 1835] PS: [124, 11] PE: [124, 22]                                                     content: string_content `Moved back!`
B: [1835, 1836] PS: [124, 22] PE: [124, 23]                                                   end: string_end `"`
B: [1836, 1837] PS: [124, 23] PE: [124, 24]                           ) `)`
B: [1839, 1897] PS: [126,  0] PE: [126, 58]   shell_stmt
B: [1839, 1897] PS: [126,  0] PE: [126, 58]     shell_cmd: critical_shell_cmd
B: [1839, 1841] PS: [126,  0] PE: [126,  2]       $! `$!`
B: [1841, 1897] PS: [126,  2] PE: [126, 58]       command: expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]         delegate: ternary_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]           delegate: or_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]             delegate: and_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]               delegate: compare_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]                 delegate: add_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]                   delegate: mult_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]                     delegate: unary_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]                       delegate: indexed_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]                         root: primary_expr
B: [1841, 1897] PS: [126,  2] PE: [126, 58]                           literal
B: [1841, 1897] PS: [126,  2] PE: [126, 58]                             string
B: [1841, 1842] PS: [126,  2] PE: [126,  3]                               start: string_start ```
B: [1842, 1896] PS: [126,  3] PE: [126, 57]                               contents: string_contents
B: [1842, 1878] PS: [126,  3] PE: [126, 39]                                 content: string_content `sed -i '' "s/Version = .*/Version = `
B: [1878, 1887] PS: [126, 39] PE: [126, 48]                                 interpolation: interpolation
B: [1878, 1879] PS: [126, 39] PE: [126, 40]                                   { `{`
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                   expr: expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                     delegate: ternary_expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                       delegate: or_expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                         delegate: and_expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                           delegate: compare_expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                             delegate: add_expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                               delegate: mult_expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                                 delegate: unary_expr
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                                   delegate: var_path
B: [1879, 1886] PS: [126, 40] PE: [126, 47]                                                     root: identifier `version`
B: [1886, 1887] PS: [126, 47] PE: [126, 48]                                   } `}`
B: [1887, 1890] PS: [126, 48] PE: [126, 51]                                 content: string_content `/" `
B: [1890, 1896] PS: [126, 51] PE: [126, 57]                                 interpolation: interpolation
B: [1890, 1891] PS: [126, 51] PE: [126, 52]                                   { `{`
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                   expr: expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                     delegate: ternary_expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                       delegate: or_expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                         delegate: and_expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                           delegate: compare_expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                             delegate: add_expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                               delegate: mult_expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                                 delegate: unary_expr
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                                   delegate: var_path
B: [1891, 1895] PS: [126, 52] PE: [126, 56]                                                     root: identifier `path`
B: [1895, 1896] PS: [126, 56] PE: [126, 57]                                   } `}`
B: [1896, 1897] PS: [126, 57] PE: [126, 58]                               end: string_end ```
B: [1898, 1967] PS: [127,  0] PE: [129, 30]   defer_block
B: [1898, 1906] PS: [127,  0] PE: [127,  8]     keyword: errdefer `errdefer`
B: [1906, 1907] PS: [127,  8] PE: [127,  9]     : `:`
B: [1912, 1936] PS: [128,  4] PE: [128, 28]     stmt: expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]       delegate: ternary_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]         delegate: or_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]           delegate: and_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]             delegate: compare_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]               delegate: add_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]                 delegate: mult_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]                   delegate: unary_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]                     delegate: indexed_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]                       root: primary_expr
B: [1912, 1936] PS: [128,  4] PE: [128, 28]                         call
B: [1912, 1917] PS: [128,  4] PE: [128,  9]                           func: identifier `print`
B: [1917, 1918] PS: [128,  9] PE: [128, 10]                           ( `(`
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                           arg: expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                             delegate: ternary_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                               delegate: or_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                 delegate: and_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                   delegate: compare_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                     delegate: add_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                       delegate: mult_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                         delegate: unary_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                           delegate: indexed_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                             root: primary_expr
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                               literal
B: [1918, 1935] PS: [128, 10] PE: [128, 27]                                                 string
B: [1918, 1919] PS: [128, 10] PE: [128, 11]                                                   start: string_start `"`
B: [1919, 1934] PS: [128, 11] PE: [128, 26]                                                   contents: string_contents
B: [1919, 1934] PS: [128, 11] PE: [128, 26]                                                     content: string_content `Undoing bump...`
B: [1934, 1935] PS: [128, 26] PE: [128, 27]                                                   end: string_end `"`
B: [1935, 1936] PS: [128, 27] PE: [128, 28]                           ) `)`
B: [1941, 1967] PS: [129,  4] PE: [129, 30]     stmt: shell_stmt
B: [1941, 1967] PS: [129,  4] PE: [129, 30]       shell_cmd: critical_shell_cmd
B: [1941, 1943] PS: [129,  4] PE: [129,  6]         $! `$!`
B: [1943, 1967] PS: [129,  6] PE: [129, 30]         command: expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]           delegate: ternary_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]             delegate: or_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]               delegate: and_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                 delegate: compare_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                   delegate: add_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                     delegate: mult_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                       delegate: unary_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                         delegate: indexed_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                           root: primary_expr
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                             literal
B: [1943, 1967] PS: [129,  6] PE: [129, 30]                               string
B: [1943, 1944] PS: [129,  6] PE: [129,  7]                                 start: string_start ```
B: [1944, 1966] PS: [129,  7] PE: [129, 29]                                 contents: string_contents
B: [1944, 1960] PS: [129,  7] PE: [129, 23]                                   content: string_content `git checkout -- `
B: [1960, 1966] PS: [129, 23] PE: [129, 29]                                   interpolation: interpolation
B: [1960, 1961] PS: [129, 23] PE: [129, 24]                                     { `{`
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                     expr: expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                       delegate: ternary_expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                         delegate: or_expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                           delegate: and_expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                             delegate: compare_expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                               delegate: add_expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                                 delegate: mult_expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                                   delegate: unary_expr
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                                     delegate: var_path
B: [1961, 1965] PS: [129, 24] PE: [129, 28]                                                       root: identifier `path`
B: [1965, 1966] PS: [129, 28] PE: [129, 29]                                     } `}`
B: [1966, 1967] PS: [129, 29] PE: [129, 30]                                 end: string_end ```
B: [1969, 2046] PS: [131,  0] PE: [133, 11]   if_stmt
B: [1969, 2046] PS: [131,  0] PE: [133, 11]     alt: if_alt
B: [1969, 1971] PS: [131,  0] PE: [131,  2]       if `if`
B: [1972, 1977] PS: [131,  3] PE: [131,  8]       condition: expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]         delegate: ternary_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]           delegate: or_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]             delegate: and_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]               delegate: compare_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                 delegate: add_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                   delegate: mult_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                     delegate: unary_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                       delegate: indexed_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                         root: primary_expr
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                           literal
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                             bool
B: [1972, 1977] PS: [131,  3] PE: [131,  8]                               false `false`
B: [1977, 1978] PS: [131,  8] PE: [131,  9]       : `:`
B: [1980, 2009] PS: [131, 11] PE: [131, 40]       comment `// failure simulation point 1`
B: [2014, 2034] PS: [132,  4] PE: [132, 24]       stmt: expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]         delegate: ternary_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]           delegate: or_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]             delegate: and_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]               delegate: compare_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]                 delegate: add_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]                   delegate: mult_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]                     delegate: unary_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]                       delegate: indexed_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]                         root: primary_expr
B: [2014, 2034] PS: [132,  4] PE: [132, 24]                           call
B: [2014, 2019] PS: [132,  4] PE: [132,  9]                             func: identifier `print`
B: [2019, 2020] PS: [132,  9] PE: [132, 10]                             ( `(`
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                             arg: expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                               delegate: ternary_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                 delegate: or_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                   delegate: and_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                     delegate: compare_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                       delegate: add_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                         delegate: mult_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                           delegate: unary_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                             delegate: indexed_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                               root: primary_expr
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                                 literal
B: [2020, 2033] PS: [132, 10] PE: [132, 23]                                                   string
B: [2020, 2021] PS: [132, 10] PE: [132, 11]                                                     start: string_start `"`
B: [2021, 2032] PS: [132, 11] PE: [132, 22]                                                     contents: string_contents
B: [2021, 2032] PS: [132, 11] PE: [132, 22]                                                       content: string_content `Oh no! BAD!`
B: [2032, 2033] PS: [132, 22] PE: [132, 23]                                                     end: string_end `"`
B: [2033, 2034] PS: [132, 23] PE: [132, 24]                             ) `)`
B: [2039, 2046] PS: [133,  4] PE: [133, 11]       stmt: expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]         delegate: ternary_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]           delegate: or_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]             delegate: and_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]               delegate: compare_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]                 delegate: add_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]                   delegate: mult_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]                     delegate: unary_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]                       delegate: indexed_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]                         root: primary_expr
B: [2039, 2046] PS: [133,  4] PE: [133, 11]                           call
B: [2039, 2043] PS: [133,  4] PE: [133,  8]                             func: identifier `exit`
B: [2043, 2044] PS: [133,  8] PE: [133,  9]                             ( `(`
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                             arg: expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                               delegate: ternary_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                 delegate: or_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                   delegate: and_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                     delegate: compare_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                       delegate: add_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                         delegate: mult_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                           delegate: unary_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                             delegate: indexed_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                               root: primary_expr
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                                 literal
B: [2044, 2045] PS: [133,  9] PE: [133, 10]                                                   int `1`
B: [2045, 2046] PS: [133, 10] PE: [133, 11]                             ) `)`
B: [2048, 2066] PS: [135,  0] PE: [135, 18]   shell_stmt
B: [2048, 2066] PS: [135,  0] PE: [135, 18]     shell_cmd: critical_shell_cmd
B: [2048, 2050] PS: [135,  0] PE: [135,  2]       $! `$!`
B: [2050, 2066] PS: [135,  2] PE: [135, 18]       command: expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]         delegate: ternary_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]           delegate: or_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]             delegate: and_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]               delegate: compare_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]                 delegate: add_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]                   delegate: mult_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]                     delegate: unary_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]                       delegate: indexed_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]                         root: primary_expr
B: [2050, 2066] PS: [135,  2] PE: [135, 18]                           literal
B: [2050, 2066] PS: [135,  2] PE: [135, 18]                             string
B: [2050, 2051] PS: [135,  2] PE: [135,  3]                               start: string_start ```
B: [2051, 2065] PS: [135,  3] PE: [135, 17]                               contents: string_contents
B: [2051, 2059] PS: [135,  3] PE: [135, 11]                                 content: string_content `git add `
B: [2059, 2065] PS: [135, 11] PE: [135, 17]                                 interpolation: interpolation
B: [2059, 2060] PS: [135, 11] PE: [135, 12]                                   { `{`
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                   expr: expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                     delegate: ternary_expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                       delegate: or_expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                         delegate: and_expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                           delegate: compare_expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                             delegate: add_expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                               delegate: mult_expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                                 delegate: unary_expr
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                                   delegate: var_path
B: [2060, 2064] PS: [135, 12] PE: [135, 16]                                                     root: identifier `path`
B: [2064, 2065] PS: [135, 16] PE: [135, 17]                                   } `}`
B: [2065, 2066] PS: [135, 17] PE: [135, 18]                               end: string_end ```
B: [2067, 2141] PS: [136,  0] PE: [138, 31]   defer_block
B: [2067, 2075] PS: [136,  0] PE: [136,  8]     keyword: errdefer `errdefer`
B: [2075, 2076] PS: [136,  8] PE: [136,  9]     : `:`
B: [2081, 2109] PS: [137,  4] PE: [137, 32]     stmt: expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]       delegate: ternary_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]         delegate: or_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]           delegate: and_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]             delegate: compare_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]               delegate: add_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]                 delegate: mult_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]                   delegate: unary_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]                     delegate: indexed_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]                       root: primary_expr
B: [2081, 2109] PS: [137,  4] PE: [137, 32]                         call
B: [2081, 2086] PS: [137,  4] PE: [137,  9]                           func: identifier `print`
B: [2086, 2087] PS: [137,  9] PE: [137, 10]                           ( `(`
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                           arg: expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                             delegate: ternary_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                               delegate: or_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                 delegate: and_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                   delegate: compare_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                     delegate: add_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                       delegate: mult_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                         delegate: unary_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                           delegate: indexed_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                             root: primary_expr
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                               literal
B: [2087, 2108] PS: [137, 10] PE: [137, 31]                                                 string
B: [2087, 2088] PS: [137, 10] PE: [137, 11]                                                   start: string_start `"`
B: [2088, 2107] PS: [137, 11] PE: [137, 30]                                                   contents: string_contents
B: [2088, 2098] PS: [137, 11] PE: [137, 21]                                                     content: string_content `Resetting `
B: [2098, 2104] PS: [137, 21] PE: [137, 27]                                                     interpolation: interpolation
B: [2098, 2099] PS: [137, 21] PE: [137, 22]                                                       { `{`
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                       expr: expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                         delegate: ternary_expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                           delegate: or_expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                             delegate: and_expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                               delegate: compare_expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                                 delegate: add_expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                                   delegate: mult_expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                                     delegate: unary_expr
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                                       delegate: var_path
B: [2099, 2103] PS: [137, 22] PE: [137, 26]                                                                         root: identifier `path`
B: [2103, 2104] PS: [137, 26] PE: [137, 27]                                                       } `}`
B: [2104, 2107] PS: [137, 27] PE: [137, 30]                                                     content: string_content `...`
B: [2107, 2108] PS: [137, 30] PE: [137, 31]                                                   end: string_end `"`
B: [2108, 2109] PS: [137, 31] PE: [137, 32]                           ) `)`
B: [2114, 2141] PS: [138,  4] PE: [138, 31]     stmt: shell_stmt
B: [2114, 2115] PS: [138,  4] PE: [138,  5]       lefts: var_path
B: [2114, 2115] PS: [138,  4] PE: [138,  5]         root: identifier `_`
B: [2115, 2116] PS: [138,  5] PE: [138,  6]       , `,`
B: [2117, 2118] PS: [138,  7] PE: [138,  8]       lefts: var_path
B: [2117, 2118] PS: [138,  7] PE: [138,  8]         root: identifier `_`
B: [2119, 2120] PS: [138,  9] PE: [138, 10]       = `=`
B: [2121, 2141] PS: [138, 11] PE: [138, 31]       shell_cmd: critical_shell_cmd
B: [2121, 2123] PS: [138, 11] PE: [138, 13]         $! `$!`
B: [2123, 2141] PS: [138, 13] PE: [138, 31]         command: expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]           delegate: ternary_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]             delegate: or_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]               delegate: and_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                 delegate: compare_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                   delegate: add_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                     delegate: mult_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                       delegate: unary_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                         delegate: indexed_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                           root: primary_expr
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                             literal
B: [2123, 2141] PS: [138, 13] PE: [138, 31]                               string
B: [2123, 2124] PS: [138, 13] PE: [138, 14]                                 start: string_start ```
B: [2124, 2140] PS: [138, 14] PE: [138, 30]                                 contents: string_contents
B: [2124, 2134] PS: [138, 14] PE: [138, 24]                                   content: string_content `git reset `
B: [2134, 2140] PS: [138, 24] PE: [138, 30]                                   interpolation: interpolation
B: [2134, 2135] PS: [138, 24] PE: [138, 25]                                     { `{`
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                     expr: expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                       delegate: ternary_expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                         delegate: or_expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                           delegate: and_expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                             delegate: compare_expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                               delegate: add_expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                                 delegate: mult_expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                                   delegate: unary_expr
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                                     delegate: var_path
B: [2135, 2139] PS: [138, 25] PE: [138, 29]                                                       root: identifier `path`
B: [2139, 2140] PS: [138, 29] PE: [138, 30]                                     } `}`
B: [2140, 2141] PS: [138, 30] PE: [138, 31]                                 end: string_end ```
B: [2143, 2218] PS: [140,  0] PE: [142, 11]   if_stmt
B: [2143, 2218] PS: [140,  0] PE: [142, 11]     alt: if_alt
B: [2143, 2145] PS: [140,  0] PE: [140,  2]       if `if`
B: [2146, 2151] PS: [140,  3] PE: [140,  8]       condition: expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]         delegate: ternary_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]           delegate: or_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]             delegate: and_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]               delegate: compare_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                 delegate: add_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                   delegate: mult_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                     delegate: unary_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                       delegate: indexed_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                         root: primary_expr
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                           literal
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                             bool
B: [2146, 2151] PS: [140,  3] PE: [140,  8]                               false `false`
B: [2151, 2152] PS: [140,  8] PE: [140,  9]       : `:`
B: [2154, 2183] PS: [140, 11] PE: [140, 40]       comment `// failure simulation point 2`
B: [2188, 2206] PS: [141,  4] PE: [141, 22]       stmt: expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]         delegate: ternary_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]           delegate: or_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]             delegate: and_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]               delegate: compare_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]                 delegate: add_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]                   delegate: mult_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]                     delegate: unary_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]                       delegate: indexed_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]                         root: primary_expr
B: [2188, 2206] PS: [141,  4] PE: [141, 22]                           call
B: [2188, 2193] PS: [141,  4] PE: [141,  9]                             func: identifier `print`
B: [2193, 2194] PS: [141,  9] PE: [141, 10]                             ( `(`
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                             arg: expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                               delegate: ternary_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                 delegate: or_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                   delegate: and_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                     delegate: compare_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                       delegate: add_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                         delegate: mult_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                           delegate: unary_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                             delegate: indexed_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                               root: primary_expr
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                                 literal
B: [2194, 2205] PS: [141, 10] PE: [141, 21]                                                   string
B: [2194, 2195] PS: [141, 10] PE: [141, 11]                                                     start: string_start `"`
B: [2195, 2204] PS: [141, 11] PE: [141, 20]                                                     contents: string_contents
B: [2195, 2204] PS: [141, 11] PE: [141, 20]                                                       content: string_content `Bah! BAD!`
B: [2204, 2205] PS: [141, 20] PE: [141, 21]                                                     end: string_end `"`
B: [2205, 2206] PS: [141, 21] PE: [141, 22]                             ) `)`
B: [2211, 2218] PS: [142,  4] PE: [142, 11]       stmt: expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]         delegate: ternary_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]           delegate: or_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]             delegate: and_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]               delegate: compare_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]                 delegate: add_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]                   delegate: mult_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]                     delegate: unary_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]                       delegate: indexed_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]                         root: primary_expr
B: [2211, 2218] PS: [142,  4] PE: [142, 11]                           call
B: [2211, 2215] PS: [142,  4] PE: [142,  8]                             func: identifier `exit`
B: [2215, 2216] PS: [142,  8] PE: [142,  9]                             ( `(`
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                             arg: expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                               delegate: ternary_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                 delegate: or_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                   delegate: and_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                     delegate: compare_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                       delegate: add_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                         delegate: mult_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                           delegate: unary_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                             delegate: indexed_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                               root: primary_expr
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                                 literal
B: [2216, 2217] PS: [142,  9] PE: [142, 10]                                                   int `1`
B: [2217, 2218] PS: [142, 10] PE: [142, 11]                             ) `)`
B: [2220, 2265] PS: [144,  0] PE: [144, 45]   shell_stmt
B: [2220, 2265] PS: [144,  0] PE: [144, 45]     shell_cmd: critical_shell_cmd
B: [2220, 2222] PS: [144,  0] PE: [144,  2]       $! `$!`
B: [2222, 2265] PS: [144,  2] PE: [144, 45]       command: expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]         delegate: ternary_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]           delegate: or_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]             delegate: and_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]               delegate: compare_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]                 delegate: add_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]                   delegate: mult_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]                     delegate: unary_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]                       delegate: indexed_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]                         root: primary_expr
B: [2222, 2265] PS: [144,  2] PE: [144, 45]                           literal
B: [2222, 2265] PS: [144,  2] PE: [144, 45]                             string
B: [2222, 2223] PS: [144,  2] PE: [144,  3]                               start: string_start ```
B: [2223, 2264] PS: [144,  3] PE: [144, 44]                               contents: string_contents
B: [2223, 2254] PS: [144,  3] PE: [144, 34]                                 content: string_content `git commit -m "Bump version to `
B: [2254, 2263] PS: [144, 34] PE: [144, 43]                                 interpolation: interpolation
B: [2254, 2255] PS: [144, 34] PE: [144, 35]                                   { `{`
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                   expr: expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                     delegate: ternary_expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                       delegate: or_expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                         delegate: and_expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                           delegate: compare_expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                             delegate: add_expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                               delegate: mult_expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                                 delegate: unary_expr
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                                   delegate: var_path
B: [2255, 2262] PS: [144, 35] PE: [144, 42]                                                     root: identifier `version`
B: [2262, 2263] PS: [144, 42] PE: [144, 43]                                   } `}`
B: [2263, 2264] PS: [144, 43] PE: [144, 44]                                 content: string_content `"`
B: [2264, 2265] PS: [144, 44] PE: [144, 45]                               end: string_end ```
