=====
Fn multi return/assign
=====
a = foo()
a, b = foo()
[a, b] = foo()
[a] = foo()
=====
B: [ 0, 50] PS: [0,  0] PE: [4,  0] source_file
B: [ 0,  9] PS: [0,  0] PE: [0,  9]   assign
B: [ 0,  1] PS: [0,  0] PE: [0,  1]     left: var_path
B: [ 0,  1] PS: [0,  0] PE: [0,  1]       root: identifier `a`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]     = `=`
B: [ 4,  9] PS: [0,  4] PE: [0,  9]     right: expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]       delegate: ternary_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]         delegate: or_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]           delegate: and_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]             delegate: compare_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]               delegate: add_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                 delegate: mult_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                   delegate: unary_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                     delegate: indexed_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                       root: primary_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                         call
B: [ 4,  7] PS: [0,  4] PE: [0,  7]                           func: identifier `foo`
B: [ 7,  9] PS: [0,  7] PE: [0,  9]                           () `()`
B: [10, 22] PS: [1,  0] PE: [1, 12]   assign
B: [10, 11] PS: [1,  0] PE: [1,  1]     lefts: var_path
B: [10, 11] PS: [1,  0] PE: [1,  1]       root: identifier `a`
B: [11, 12] PS: [1,  1] PE: [1,  2]     , `,`
B: [13, 14] PS: [1,  3] PE: [1,  4]     lefts: var_path
B: [13, 14] PS: [1,  3] PE: [1,  4]       root: identifier `b`
B: [15, 16] PS: [1,  5] PE: [1,  6]     = `=`
B: [17, 22] PS: [1,  7] PE: [1, 12]     right: expr
B: [17, 22] PS: [1,  7] PE: [1, 12]       delegate: ternary_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]         delegate: or_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]           delegate: and_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]             delegate: compare_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]               delegate: add_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]                 delegate: mult_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]                   delegate: unary_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]                     delegate: indexed_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]                       root: primary_expr
B: [17, 22] PS: [1,  7] PE: [1, 12]                         call
B: [17, 20] PS: [1,  7] PE: [1, 10]                           func: identifier `foo`
B: [20, 22] PS: [1, 10] PE: [1, 12]                           () `()`
B: [23, 37] PS: [2,  0] PE: [2, 14]   assign
B: [23, 24] PS: [2,  0] PE: [2,  1]     [ `[`
B: [24, 25] PS: [2,  1] PE: [2,  2]     lefts: var_path
B: [24, 25] PS: [2,  1] PE: [2,  2]       root: identifier `a`
B: [25, 26] PS: [2,  2] PE: [2,  3]     , `,`
B: [27, 28] PS: [2,  4] PE: [2,  5]     lefts: var_path
B: [27, 28] PS: [2,  4] PE: [2,  5]       root: identifier `b`
B: [28, 29] PS: [2,  5] PE: [2,  6]     ] `]`
B: [30, 31] PS: [2,  7] PE: [2,  8]     = `=`
B: [32, 37] PS: [2,  9] PE: [2, 14]     right: expr
B: [32, 37] PS: [2,  9] PE: [2, 14]       delegate: ternary_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]         delegate: or_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]           delegate: and_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]             delegate: compare_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]               delegate: add_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]                 delegate: mult_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]                   delegate: unary_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]                     delegate: indexed_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]                       root: primary_expr
B: [32, 37] PS: [2,  9] PE: [2, 14]                         call
B: [32, 35] PS: [2,  9] PE: [2, 12]                           func: identifier `foo`
B: [35, 37] PS: [2, 12] PE: [2, 14]                           () `()`
B: [38, 49] PS: [3,  0] PE: [3, 11]   assign
B: [38, 39] PS: [3,  0] PE: [3,  1]     [ `[`
B: [39, 40] PS: [3,  1] PE: [3,  2]     lefts: var_path
B: [39, 40] PS: [3,  1] PE: [3,  2]       root: identifier `a`
B: [40, 41] PS: [3,  2] PE: [3,  3]     ] `]`
B: [42, 43] PS: [3,  4] PE: [3,  5]     = `=`
B: [44, 49] PS: [3,  6] PE: [3, 11]     right: expr
B: [44, 49] PS: [3,  6] PE: [3, 11]       delegate: ternary_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]         delegate: or_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]           delegate: and_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]             delegate: compare_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]               delegate: add_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]                 delegate: mult_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]                   delegate: unary_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]                     delegate: indexed_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]                       root: primary_expr
B: [44, 49] PS: [3,  6] PE: [3, 11]                         call
B: [44, 47] PS: [3,  6] PE: [3,  9]                           func: identifier `foo`
B: [47, 49] PS: [3,  9] PE: [3, 11]                           () `()`
