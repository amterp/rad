=====
UFCS example 2
=====
a[1].replace("l", "o")
=====
B: [ 0, 23] PS: [0,  0] PE: [1,  0] source_file
B: [ 0, 22] PS: [0,  0] PE: [0, 22]   expr_stmt
B: [ 0, 22] PS: [0,  0] PE: [0, 22]     expr: expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]       delegate: ternary_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]         delegate: or_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]           delegate: and_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]             delegate: compare_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]               delegate: add_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                 delegate: mult_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                   delegate: unary_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                     delegate: fallback_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                       delegate: var_path
B: [ 0,  1] PS: [0,  0] PE: [0,  1]                         root: identifier `a`
B: [ 1,  2] PS: [0,  1] PE: [0,  2]                         [ `[`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                         indexing: expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                           delegate: ternary_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                             delegate: or_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                               delegate: and_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                 delegate: compare_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                   delegate: add_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                     delegate: mult_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                       delegate: unary_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                         delegate: fallback_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                           delegate: indexed_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                             root: primary_expr
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                               literal
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                                                 int `1`
B: [ 3,  4] PS: [0,  3] PE: [0,  4]                         ] `]`
B: [ 4,  5] PS: [0,  4] PE: [0,  5]                         . `.`
B: [ 5, 22] PS: [0,  5] PE: [0, 22]                         indexing: call
B: [ 5, 12] PS: [0,  5] PE: [0, 12]                           func: identifier `replace`
B: [12, 13] PS: [0, 12] PE: [0, 13]                           ( `(`
B: [13, 16] PS: [0, 13] PE: [0, 16]                           arg: expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                             delegate: ternary_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                               delegate: or_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                 delegate: and_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                   delegate: compare_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                     delegate: add_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                       delegate: mult_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                         delegate: unary_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                           delegate: fallback_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                             delegate: indexed_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                               root: primary_expr
B: [13, 16] PS: [0, 13] PE: [0, 16]                                                 literal
B: [13, 16] PS: [0, 13] PE: [0, 16]                                                   string
B: [13, 14] PS: [0, 13] PE: [0, 14]                                                     start: string_start `"`
B: [14, 15] PS: [0, 14] PE: [0, 15]                                                     contents: string_contents
B: [14, 15] PS: [0, 14] PE: [0, 15]                                                       content: string_content `l`
B: [15, 16] PS: [0, 15] PE: [0, 16]                                                     end: string_end `"`
B: [16, 17] PS: [0, 16] PE: [0, 17]                           , `,`
B: [18, 21] PS: [0, 18] PE: [0, 21]                           arg: expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                             delegate: ternary_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                               delegate: or_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                 delegate: and_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                   delegate: compare_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                     delegate: add_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                       delegate: mult_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                         delegate: unary_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                           delegate: fallback_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                             delegate: indexed_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                               root: primary_expr
B: [18, 21] PS: [0, 18] PE: [0, 21]                                                 literal
B: [18, 21] PS: [0, 18] PE: [0, 21]                                                   string
B: [18, 19] PS: [0, 18] PE: [0, 19]                                                     start: string_start `"`
B: [19, 20] PS: [0, 19] PE: [0, 20]                                                     contents: string_contents
B: [19, 20] PS: [0, 19] PE: [0, 20]                                                       content: string_content `o`
B: [20, 21] PS: [0, 20] PE: [0, 21]                                                     end: string_end `"`
B: [21, 22] PS: [0, 21] PE: [0, 22]                           ) `)`
