=====
Lambda shell multi stmt ERRORs
=====
fn() ($`echo hi`, $`echo hello`)
=====
B: [ 0, 33] PS: [0,  0] PE: [1,  0] source_file
B: [ 0, 32] PS: [0,  0] PE: [0, 32]   expr_stmt
B: [ 0, 32] PS: [0,  0] PE: [0, 32]     expr: expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]       delegate: ternary_expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]         delegate: or_expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]           delegate: and_expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]             delegate: compare_expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]               delegate: add_expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]                 delegate: mult_expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]                   delegate: unary_expr
B: [ 0, 32] PS: [0,  0] PE: [0, 32]                     delegate: fn_lambda
B: [ 0,  2] PS: [0,  0] PE: [0,  2]                       keyword: fn `fn`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]                       ( `(`
B: [ 3,  4] PS: [0,  3] PE: [0,  4]                       ) `)`
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                       ( `(`
B: [ 6, 17] PS: [0,  6] PE: [0, 17]                       ERROR
B: [ 6, 16] PS: [0,  6] PE: [0, 16]                         shell_cmd
B: [ 6,  7] PS: [0,  6] PE: [0,  7]                           $ `$`
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                           command: expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                             delegate: ternary_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                               delegate: or_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                 delegate: and_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                   delegate: compare_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                     delegate: add_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                       delegate: mult_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                         delegate: unary_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                           delegate: fallback_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                             delegate: indexed_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                               root: primary_expr
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                                 literal
B: [ 7, 16] PS: [0,  7] PE: [0, 16]                                                   string
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                                                     start: string_start ```
B: [ 8, 15] PS: [0,  8] PE: [0, 15]                                                     contents: string_contents
B: [ 8, 15] PS: [0,  8] PE: [0, 15]                                                       content: string_content `echo hi`
B: [15, 16] PS: [0, 15] PE: [0, 16]                                                     end: string_end ```
B: [16, 17] PS: [0, 16] PE: [0, 17]                         , `,`
B: [18, 31] PS: [0, 18] PE: [0, 31]                       stmt: shell_stmt
B: [18, 31] PS: [0, 18] PE: [0, 31]                         shell_cmd: shell_cmd
B: [18, 19] PS: [0, 18] PE: [0, 19]                           $ `$`
B: [19, 31] PS: [0, 19] PE: [0, 31]                           command: expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                             delegate: ternary_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                               delegate: or_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                 delegate: and_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                   delegate: compare_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                     delegate: add_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                       delegate: mult_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                         delegate: unary_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                           delegate: fallback_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                             delegate: indexed_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                               root: primary_expr
B: [19, 31] PS: [0, 19] PE: [0, 31]                                                 literal
B: [19, 31] PS: [0, 19] PE: [0, 31]                                                   string
B: [19, 20] PS: [0, 19] PE: [0, 20]                                                     start: string_start ```
B: [20, 30] PS: [0, 20] PE: [0, 30]                                                     contents: string_contents
B: [20, 30] PS: [0, 20] PE: [0, 30]                                                       content: string_content `echo hello`
B: [30, 31] PS: [0, 30] PE: [0, 31]                                                     end: string_end ```
B: [31, 32] PS: [0, 31] PE: [0, 32]                       ) `)`
