=====
Str escaping interpolation
=====
print("hello, \{var}")
=====
B: [ 0, 23] PS: [0,  0] PE: [1,  0] source_file
B: [ 0, 22] PS: [0,  0] PE: [0, 22]   expr_stmt
B: [ 0, 22] PS: [0,  0] PE: [0, 22]     expr: expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]       delegate: ternary_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]         delegate: or_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]           delegate: and_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]             delegate: compare_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]               delegate: add_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                 delegate: mult_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                   delegate: unary_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                     delegate: fallback_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                       delegate: indexed_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                         root: primary_expr
B: [ 0, 22] PS: [0,  0] PE: [0, 22]                           call
B: [ 0,  5] PS: [0,  0] PE: [0,  5]                             func: identifier `print`
B: [ 5,  6] PS: [0,  5] PE: [0,  6]                             ( `(`
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                             arg: expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                               delegate: ternary_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                 delegate: or_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                   delegate: and_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                     delegate: compare_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                       delegate: add_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                         delegate: mult_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                           delegate: unary_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                             delegate: fallback_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                               delegate: indexed_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                                 root: primary_expr
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                                   literal
B: [ 6, 21] PS: [0,  6] PE: [0, 21]                                                     string
B: [ 6,  7] PS: [0,  6] PE: [0,  7]                                                       start: string_start `"`
B: [ 7, 20] PS: [0,  7] PE: [0, 20]                                                       contents: string_contents
B: [ 7, 14] PS: [0,  7] PE: [0, 14]                                                         content: string_content `hello, `
B: [14, 16] PS: [0, 14] PE: [0, 16]                                                         open_bracket: esc_open_bracket `\{`
B: [16, 20] PS: [0, 16] PE: [0, 20]                                                         content: string_content `var}`
B: [20, 21] PS: [0, 20] PE: [0, 21]                                                       end: string_end `"`
B: [21, 22] PS: [0, 21] PE: [0, 22]                             ) `)`
