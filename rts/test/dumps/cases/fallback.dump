=====
Fallback
=====
a = foo() ?? 0
b = 2 + bar() ?? 0
c = 2 ?? 1 ?? 0
d = foo() ?? [1, 2]
e, f = foo() ?? [1, 2]
=====
B: [ 0, 93] PS: [0,  0] PE: [5,  0] source_file
B: [ 0, 14] PS: [0,  0] PE: [0, 14]   assign
B: [ 0,  1] PS: [0,  0] PE: [0,  1]     left: var_path
B: [ 0,  1] PS: [0,  0] PE: [0,  1]       root: identifier `a`
B: [ 2,  3] PS: [0,  2] PE: [0,  3]     = `=`
B: [ 4, 14] PS: [0,  4] PE: [0, 14]     right: expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]       delegate: ternary_expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]         delegate: or_expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]           delegate: and_expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]             delegate: compare_expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]               delegate: add_expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]                 delegate: mult_expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]                   delegate: unary_expr
B: [ 4, 14] PS: [0,  4] PE: [0, 14]                     delegate: fallback_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                       left: fallback_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                         delegate: indexed_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                           root: primary_expr
B: [ 4,  9] PS: [0,  4] PE: [0,  9]                             call
B: [ 4,  7] PS: [0,  4] PE: [0,  7]                               func: identifier `foo`
B: [ 7,  8] PS: [0,  7] PE: [0,  8]                               ( `(`
B: [ 8,  9] PS: [0,  8] PE: [0,  9]                               ) `)`
B: [10, 12] PS: [0, 10] PE: [0, 12]                       op: ?? `??`
B: [13, 14] PS: [0, 13] PE: [0, 14]                       right: indexed_expr
B: [13, 14] PS: [0, 13] PE: [0, 14]                         root: primary_expr
B: [13, 14] PS: [0, 13] PE: [0, 14]                           literal
B: [13, 14] PS: [0, 13] PE: [0, 14]                             int `0`
B: [15, 33] PS: [1,  0] PE: [1, 18]   assign
B: [15, 16] PS: [1,  0] PE: [1,  1]     left: var_path
B: [15, 16] PS: [1,  0] PE: [1,  1]       root: identifier `b`
B: [17, 18] PS: [1,  2] PE: [1,  3]     = `=`
B: [19, 33] PS: [1,  4] PE: [1, 18]     right: expr
B: [19, 33] PS: [1,  4] PE: [1, 18]       delegate: ternary_expr
B: [19, 33] PS: [1,  4] PE: [1, 18]         delegate: or_expr
B: [19, 33] PS: [1,  4] PE: [1, 18]           delegate: and_expr
B: [19, 33] PS: [1,  4] PE: [1, 18]             delegate: compare_expr
B: [19, 33] PS: [1,  4] PE: [1, 18]               delegate: add_expr
B: [19, 20] PS: [1,  4] PE: [1,  5]                 left: add_expr
B: [19, 20] PS: [1,  4] PE: [1,  5]                   delegate: mult_expr
B: [19, 20] PS: [1,  4] PE: [1,  5]                     delegate: unary_expr
B: [19, 20] PS: [1,  4] PE: [1,  5]                       delegate: fallback_expr
B: [19, 20] PS: [1,  4] PE: [1,  5]                         delegate: indexed_expr
B: [19, 20] PS: [1,  4] PE: [1,  5]                           root: primary_expr
B: [19, 20] PS: [1,  4] PE: [1,  5]                             literal
B: [19, 20] PS: [1,  4] PE: [1,  5]                               int `2`
B: [21, 22] PS: [1,  6] PE: [1,  7]                 op: + `+`
B: [23, 33] PS: [1,  8] PE: [1, 18]                 right: mult_expr
B: [23, 33] PS: [1,  8] PE: [1, 18]                   delegate: unary_expr
B: [23, 33] PS: [1,  8] PE: [1, 18]                     delegate: fallback_expr
B: [23, 28] PS: [1,  8] PE: [1, 13]                       left: fallback_expr
B: [23, 28] PS: [1,  8] PE: [1, 13]                         delegate: indexed_expr
B: [23, 28] PS: [1,  8] PE: [1, 13]                           root: primary_expr
B: [23, 28] PS: [1,  8] PE: [1, 13]                             call
B: [23, 26] PS: [1,  8] PE: [1, 11]                               func: identifier `bar`
B: [26, 27] PS: [1, 11] PE: [1, 12]                               ( `(`
B: [27, 28] PS: [1, 12] PE: [1, 13]                               ) `)`
B: [29, 31] PS: [1, 14] PE: [1, 16]                       op: ?? `??`
B: [32, 33] PS: [1, 17] PE: [1, 18]                       right: indexed_expr
B: [32, 33] PS: [1, 17] PE: [1, 18]                         root: primary_expr
B: [32, 33] PS: [1, 17] PE: [1, 18]                           literal
B: [32, 33] PS: [1, 17] PE: [1, 18]                             int `0`
B: [34, 49] PS: [2,  0] PE: [2, 15]   assign
B: [34, 35] PS: [2,  0] PE: [2,  1]     left: var_path
B: [34, 35] PS: [2,  0] PE: [2,  1]       root: identifier `c`
B: [36, 37] PS: [2,  2] PE: [2,  3]     = `=`
B: [38, 49] PS: [2,  4] PE: [2, 15]     right: expr
B: [38, 49] PS: [2,  4] PE: [2, 15]       delegate: ternary_expr
B: [38, 49] PS: [2,  4] PE: [2, 15]         delegate: or_expr
B: [38, 49] PS: [2,  4] PE: [2, 15]           delegate: and_expr
B: [38, 49] PS: [2,  4] PE: [2, 15]             delegate: compare_expr
B: [38, 49] PS: [2,  4] PE: [2, 15]               delegate: add_expr
B: [38, 49] PS: [2,  4] PE: [2, 15]                 delegate: mult_expr
B: [38, 49] PS: [2,  4] PE: [2, 15]                   delegate: unary_expr
B: [38, 49] PS: [2,  4] PE: [2, 15]                     delegate: fallback_expr
B: [38, 44] PS: [2,  4] PE: [2, 10]                       left: fallback_expr
B: [38, 39] PS: [2,  4] PE: [2,  5]                         left: fallback_expr
B: [38, 39] PS: [2,  4] PE: [2,  5]                           delegate: indexed_expr
B: [38, 39] PS: [2,  4] PE: [2,  5]                             root: primary_expr
B: [38, 39] PS: [2,  4] PE: [2,  5]                               literal
B: [38, 39] PS: [2,  4] PE: [2,  5]                                 int `2`
B: [40, 42] PS: [2,  6] PE: [2,  8]                         op: ?? `??`
B: [43, 44] PS: [2,  9] PE: [2, 10]                         right: indexed_expr
B: [43, 44] PS: [2,  9] PE: [2, 10]                           root: primary_expr
B: [43, 44] PS: [2,  9] PE: [2, 10]                             literal
B: [43, 44] PS: [2,  9] PE: [2, 10]                               int `1`
B: [45, 47] PS: [2, 11] PE: [2, 13]                       op: ?? `??`
B: [48, 49] PS: [2, 14] PE: [2, 15]                       right: indexed_expr
B: [48, 49] PS: [2, 14] PE: [2, 15]                         root: primary_expr
B: [48, 49] PS: [2, 14] PE: [2, 15]                           literal
B: [48, 49] PS: [2, 14] PE: [2, 15]                             int `0`
B: [50, 69] PS: [3,  0] PE: [3, 19]   assign
B: [50, 51] PS: [3,  0] PE: [3,  1]     left: var_path
B: [50, 51] PS: [3,  0] PE: [3,  1]       root: identifier `d`
B: [52, 53] PS: [3,  2] PE: [3,  3]     = `=`
B: [54, 69] PS: [3,  4] PE: [3, 19]     right: expr
B: [54, 69] PS: [3,  4] PE: [3, 19]       delegate: ternary_expr
B: [54, 69] PS: [3,  4] PE: [3, 19]         delegate: or_expr
B: [54, 69] PS: [3,  4] PE: [3, 19]           delegate: and_expr
B: [54, 69] PS: [3,  4] PE: [3, 19]             delegate: compare_expr
B: [54, 69] PS: [3,  4] PE: [3, 19]               delegate: add_expr
B: [54, 69] PS: [3,  4] PE: [3, 19]                 delegate: mult_expr
B: [54, 69] PS: [3,  4] PE: [3, 19]                   delegate: unary_expr
B: [54, 69] PS: [3,  4] PE: [3, 19]                     delegate: fallback_expr
B: [54, 59] PS: [3,  4] PE: [3,  9]                       left: fallback_expr
B: [54, 59] PS: [3,  4] PE: [3,  9]                         delegate: indexed_expr
B: [54, 59] PS: [3,  4] PE: [3,  9]                           root: primary_expr
B: [54, 59] PS: [3,  4] PE: [3,  9]                             call
B: [54, 57] PS: [3,  4] PE: [3,  7]                               func: identifier `foo`
B: [57, 58] PS: [3,  7] PE: [3,  8]                               ( `(`
B: [58, 59] PS: [3,  8] PE: [3,  9]                               ) `)`
B: [60, 62] PS: [3, 10] PE: [3, 12]                       op: ?? `??`
B: [63, 69] PS: [3, 13] PE: [3, 19]                       right: indexed_expr
B: [63, 69] PS: [3, 13] PE: [3, 19]                         root: primary_expr
B: [63, 69] PS: [3, 13] PE: [3, 19]                           literal
B: [63, 69] PS: [3, 13] PE: [3, 19]                             list
B: [63, 64] PS: [3, 13] PE: [3, 14]                               [ `[`
B: [64, 65] PS: [3, 14] PE: [3, 15]                               list_entry: expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                 delegate: ternary_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                   delegate: or_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                     delegate: and_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                       delegate: compare_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                         delegate: add_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                           delegate: mult_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                             delegate: unary_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                               delegate: fallback_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                                 delegate: indexed_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                                   root: primary_expr
B: [64, 65] PS: [3, 14] PE: [3, 15]                                                     literal
B: [64, 65] PS: [3, 14] PE: [3, 15]                                                       int `1`
B: [65, 66] PS: [3, 15] PE: [3, 16]                               , `,`
B: [67, 68] PS: [3, 17] PE: [3, 18]                               list_entry: expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                 delegate: ternary_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                   delegate: or_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                     delegate: and_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                       delegate: compare_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                         delegate: add_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                           delegate: mult_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                             delegate: unary_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                               delegate: fallback_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                                 delegate: indexed_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                                   root: primary_expr
B: [67, 68] PS: [3, 17] PE: [3, 18]                                                     literal
B: [67, 68] PS: [3, 17] PE: [3, 18]                                                       int `2`
B: [68, 69] PS: [3, 18] PE: [3, 19]                               ] `]`
B: [70, 92] PS: [4,  0] PE: [4, 22]   assign
B: [70, 71] PS: [4,  0] PE: [4,  1]     lefts: var_path
B: [70, 71] PS: [4,  0] PE: [4,  1]       root: identifier `e`
B: [71, 72] PS: [4,  1] PE: [4,  2]     , `,`
B: [73, 74] PS: [4,  3] PE: [4,  4]     lefts: var_path
B: [73, 74] PS: [4,  3] PE: [4,  4]       root: identifier `f`
B: [75, 76] PS: [4,  5] PE: [4,  6]     = `=`
B: [77, 92] PS: [4,  7] PE: [4, 22]     right: expr
B: [77, 92] PS: [4,  7] PE: [4, 22]       delegate: ternary_expr
B: [77, 92] PS: [4,  7] PE: [4, 22]         delegate: or_expr
B: [77, 92] PS: [4,  7] PE: [4, 22]           delegate: and_expr
B: [77, 92] PS: [4,  7] PE: [4, 22]             delegate: compare_expr
B: [77, 92] PS: [4,  7] PE: [4, 22]               delegate: add_expr
B: [77, 92] PS: [4,  7] PE: [4, 22]                 delegate: mult_expr
B: [77, 92] PS: [4,  7] PE: [4, 22]                   delegate: unary_expr
B: [77, 92] PS: [4,  7] PE: [4, 22]                     delegate: fallback_expr
B: [77, 82] PS: [4,  7] PE: [4, 12]                       left: fallback_expr
B: [77, 82] PS: [4,  7] PE: [4, 12]                         delegate: indexed_expr
B: [77, 82] PS: [4,  7] PE: [4, 12]                           root: primary_expr
B: [77, 82] PS: [4,  7] PE: [4, 12]                             call
B: [77, 80] PS: [4,  7] PE: [4, 10]                               func: identifier `foo`
B: [80, 81] PS: [4, 10] PE: [4, 11]                               ( `(`
B: [81, 82] PS: [4, 11] PE: [4, 12]                               ) `)`
B: [83, 85] PS: [4, 13] PE: [4, 15]                       op: ?? `??`
B: [86, 92] PS: [4, 16] PE: [4, 22]                       right: indexed_expr
B: [86, 92] PS: [4, 16] PE: [4, 22]                         root: primary_expr
B: [86, 92] PS: [4, 16] PE: [4, 22]                           literal
B: [86, 92] PS: [4, 16] PE: [4, 22]                             list
B: [86, 87] PS: [4, 16] PE: [4, 17]                               [ `[`
B: [87, 88] PS: [4, 17] PE: [4, 18]                               list_entry: expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                 delegate: ternary_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                   delegate: or_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                     delegate: and_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                       delegate: compare_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                         delegate: add_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                           delegate: mult_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                             delegate: unary_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                               delegate: fallback_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                                 delegate: indexed_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                                   root: primary_expr
B: [87, 88] PS: [4, 17] PE: [4, 18]                                                     literal
B: [87, 88] PS: [4, 17] PE: [4, 18]                                                       int `1`
B: [88, 89] PS: [4, 18] PE: [4, 19]                               , `,`
B: [90, 91] PS: [4, 20] PE: [4, 21]                               list_entry: expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                 delegate: ternary_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                   delegate: or_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                     delegate: and_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                       delegate: compare_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                         delegate: add_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                           delegate: mult_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                             delegate: unary_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                               delegate: fallback_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                                 delegate: indexed_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                                   root: primary_expr
B: [90, 91] PS: [4, 20] PE: [4, 21]                                                     literal
B: [90, 91] PS: [4, 20] PE: [4, 21]                                                       int `2`
B: [91, 92] PS: [4, 21] PE: [4, 22]                               ] `]`
