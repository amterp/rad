#!/usr/bin/env rad
---
Runs & compares output from dumps.
---

$`go run gen_actual_dumps.go`

stdout = $`find ./cases/*.dump`
dumps = split(stdout[:-1], "\n")

dumps = [split(d, "/")[-1] for d in dumps] // get basenames

actuals = ["actual/{d}" for d in dumps]

results = []
fails = 0
for i, d in dumps:
    actual = actuals[i]
    diffs = compare_files("./cases/{d}", actual)
    result = green("SUCCESS")
    if diffs:
        result = red("FAIL")
        fails++
    summary = "{i + 1:3}. {d} - " + result
    print(summary)
    results += [summary]

print("+----------------------------------------------+")
if fails:
    Num = ["{i + 1:3}" for i in range(len(dumps))]
    Dump = [replace(d, "\.dump", "") for d in dumps]
    Result = [replace(r, ".* - ", "") for r in results]
    display:
        fields Num, Dump, Result
    print(red("{fails} FAILURES"))
    if confirm("Update test cases? [y/n] > "):
        $`mv ./actual/* ./cases`
else:
    print(green("ALL PASSED"))

fn compare_files(file1, file2):
    // Check if delta is available (suppress output)
    delta_unavailable, _, _ = quiet $`which delta` catch:
        pass

    if delta_unavailable:
        result = quiet $`diff {file1} {file2}` catch:
            pass
        return result
    else:
        result = quiet $`delta {file1} {file2} --paging=never` catch:
            pass
        return result

// todo rad:
// - reading files built in func
// - could replace the go code if rad had some sort of regex extraction mechanism
