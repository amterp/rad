{
  "name": "Rad",
  "scopeName": "source.rad",
  "patterns": [
    {
      "name": "comment.line.shebang.rad",
      "match": "^#!.*$"
    },
    {
      "name": "comment.block.documentation.rad",
      "begin": "^---$",
      "end": "^---$",
      "patterns": [
        {
          "name": "comment.block.documentation.rad",
          "match": ".+"
        }
      ]
    },
    {
      "begin": "\\bargs\\b(?=:)",
      "end": "(?=^[^\\s])",
      "patterns": [
        {
          "name": "comment.line.arg.rad",
          "match": "#.*$"
        },
        {
          "name": "comment.line.double-slash.rad",
          "match": "//.*$"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#floats"
        },
        {
          "include": "#ints"
        },
        {
          "include": "#bools"
        },
        {
          "include": "#null"
        },
        {
          "include": "#types"
        },
        {
          "name": "constant.language.nullable.rad",
          "match": "\\?"
        },
        {
          "name": "storage.modifier.rad",
          "match": "\\b(enum|range|regex|mutually|requires|excludes)\\b"
        },
        {
          "name": "string.quoted.double.rad",
          "match": "\"[^\"]*\""
        },
        {
          "name": "constant.character.short-flag.rad",
          "match": "\\b[a-zA-Z]\\b"
        },
        {
          "include": "#params"
        }
      ]
    },
    {
      "begin": "\\b(rad|request|display)\\b",
      "end": "(?=^[^\\s])",
      "patterns": [
        {
          "name": "storage.modifier.rad",
          "match": "\\b(fields|sort|map|color|asc|desc)\\b"
        },
        {
          "include": "#global"
        }
      ]
    },
    {
      "include": "#global"
    }
  ],
  "repository": {
    "global": {
      "patterns": [
        {
          "name": "comment.line.double-slash.rad",
          "match": "//.*$"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#floats"
        },
        {
          "include": "#ints"
        },
        {
          "include": "#bools"
        },
        {
          "include": "#null"
        },
        {
          "include": "#types"
        },
        {
          "name": "entity.name.function.rad",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        },
        {
          "include": "#global_keywords"
        }
      ]
    },
    "string_interpolation": {
      "name": "string.interpolated.rad",
      "begin": "{",
      "end": "}"
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.rad",
          "match": "\\b(bool|list|map|float|int|json|str|any|void|num|error)\\b"
        }
      ]
    },
    "params": {
      "patterns": [
        {
          "name": "variable.parameter.rad",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.multiline.rad",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "include": "#string_interpolation"
            }
          ]
        },
        {
          "name": "string.quoted.single.rad",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#string_interpolation"
            }
          ]
        },
        {
          "name": "string.quoted.double.rad",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string_interpolation"
            }
          ]
        },
        {
          "name": "string.quoted.other.rad",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "include": "#string_interpolation"
            }
          ]
        }
      ]
    },
    "floats": {
      "patterns": [
        {
          "name": "constant.numeric.float.rad",
          "match": "\\b\\d(_?\\d+)*((\\.\\d(_?\\d+)*([eE][+-]?\\d(_?\\d+)*)?)|([eE][+-]?\\d(_?\\d+)*))\\b"
        }
      ]
    },
    "null": {
      "patterns": [
        {
          "name": "constant.language.null.rad",
          "match": "\\b(null)\\b"
        }
      ]
    },
    "ints": {
      "patterns": [
        {
          "name": "constant.numeric.integer.rad",
          "match": "\\b\\d(_?\\d+)*\\b"
        }
      ]
    },
    "bools": {
      "patterns": [
        {
          "name": "constant.language.boolean.rad",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "global_keywords": {
      "patterns": [
        {
          "name": "keyword.control.rad",
          "match": "\\b(args|if|for|while|in|else|pass|json|confirm|unsafe|return|quiet|or|and|not|fn|switch|case|yield|default|defer|errdefer|fail|recover|continue|break|del|rad|display|request)\\b"
        },
        {
          "name": "entity.name.tag.rad",
          "match": "\\$!"
        },
        {
          "name": "entity.name.tag.rad",
          "match": "\\$"
        },
        {
          "name": "keyword.operator.arithmetic.rad",
          "match": "\\b(\\+)\\b"
        }
      ]
    }
  }
}